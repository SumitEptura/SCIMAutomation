<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0150f8a8-1831-4cdd-ae19-e1fdabe9194c" activeEnvironment="Default" name="Eptura SCIM" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="7db819ef-8227-455a-b057-c48911a198c5" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://epturascimqaapieastus.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://scimqa.condecodev.com</con:endpoint><con:endpoint>https://scimqamaintenance.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SCIM Token" path="/api/v1/token" id="858136ad-a1d9-432f-b3d0-7cb1b8ba5e6f"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>${#Project#Authorization}</con:value><con:style>HEADER</con:style><con:default>${#Project#Authorization}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Token" id="7d167b41-b221-466a-9b19-7624ca5bb444" method="POST"><con:settings/><con:parameters><con:parameter><con:name>TenantId</con:name><con:value>${#Project#TenantId}</con:value><con:style>HEADER</con:style><con:default>${#Project#TenantId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>AuthSecret</con:name><con:value>${#Project#AuthSecret}</con:value><con:style>HEADER</con:style><con:default>${#Project#AuthSecret}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 500</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/mixed</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405 400 401</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Token API" id="7ae85594-1bbf-45c7-9217-70003adcc6c8" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#tokenEndPoint}</con:endpoint><con:request/><con:originalUri>https://scimqatp.azurewebsites.net/api/V1/token</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TenantId</con:entry><con:entry>AuthSecret</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CREATE_SCIM_USER" path="/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="CreateUser" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_SCIM_USER" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="UpdateUserForPut" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#UpdatedEmail}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER" path="/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters/><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="GetAllUsers" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER_BY_ID" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeInactive</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="GetUserById" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_PATCH_SCIM_USER" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PATCH" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UpdateUserForPatch" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    {
      "op": "${#TestSuite#opAdd}",
      "path": "${#TestSuite#pathFamily}",
      "value": "${#TestCase#UpdatedfamilyName}"
    },
    {
      "op": "${#TestSuite#opRemove}",
      "path": "phoneNumbers[primary eq \"true\" and value eq \"991818892\"]"
    },
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#pathEmail}",
      "value": [
        {
          "primary": true,
          "value": "${#TestCase#UpdatedEmail}"
        }
      ]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPSERT_TENANT_SETTINGS" path="/${#TestCase#TENANT_SETTINGS}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>default</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>scimclientid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="UpsertTenantSettings" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#maintenanceEndPoint}</con:endpoint><con:request>[
    {
      "SettingName": "UserType",
      "SettingValue": "0"
    }
]</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="default" value="true"/>
  <con:entry key="code" value="${#Project#upsertToken}"/>
  <con:entry key="scimclientid" value="${#Project#scimClientId}"/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>default</con:entry><con:entry>scimclientid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CREATE_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="CreateGroup" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_SCHEMAS" path="/scim/${#TestCase#SCIM_SCHEMAS}" id="d1eec032-e3a7-4e11-9787-1c3b160f6810"><con:settings/><con:parameters/><con:method name="GET" id="c3acab8c-230e-4fe0-b11e-0b25f2aa38a6" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:scim="https://scimqa.condecodev.com/scim/">scim:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:scim="https://scimqa.condecodev.com/scim/">scim:Fault</con:element></con:representation><con:request name="GetSchemas" id="995f086b-d0c9-4afb-8911-0a647813fc91" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_SCHEMA_BY_ID" path="/scim/${#TestCase#SCIM_SCHEMAS}/{id}" id="d1eec032-e3a7-4e11-9787-1c3b160f6810"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#SchemaId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#SchemaId}</con:default></con:parameter></con:parameters><con:method name="GET" id="c3acab8c-230e-4fe0-b11e-0b25f2aa38a6" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="https://scimqa.condecodev.com/scim/api/V1/schemas/urn%3Aietf%3Aparams%3Ascim%3Aschemas%3Acore%3A2.0%3AGroup">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:urn="https://scimqa.condecodev.com/scim/api/V1/schemas/urn%3Aietf%3Aparams%3Ascim%3Aschemas%3Acore%3A2.0%3AGroup">urn:Fault</con:element></con:representation><con:request name="GetSchemasById" id="995f086b-d0c9-4afb-8911-0a647813fc91" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="id" value="${#TestCase#SchemaId}"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalGroupId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalGroupId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UpdateGroupForPut" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startindex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetAllGroups" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startindex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>startindex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP_BY_ID" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_BY_ID" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetGroupById" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_PATCH_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PATCH" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UpdateGroupForPatch" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "members",
      "value": [{
      	"value":"${#TestCase$InternalUserId}"
      	}]
    },
    {
      "op": "remove",
      "path": "members[\"value\" eq \"${#TestCase$InternalUserId}\"]"
    },
    {
      "op": "replace",
      "path": "displayName",
      "value": "${#TestCase#groupName}"
      ]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER_BY_FILTER" path="/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>userName eq "${#TestCase#userName}"</con:value><con:style>QUERY</con:style><con:default>userName eq "${#TestCase#userName}"</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_USER_BY_FILTER" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetUserByFilter" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="userName" value="userName eq &quot;${#TestCase#userName}&quot;"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method><con:method name="GET_USER_BY_FILTEREmail" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetUserByFilter" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails eq &quot;${#TestCase#emailsearch}&quot; and username eq &quot;${#TestCase#usernamesearch}"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="userName" value="userName eq &quot;${#TestCase#userName}&quot;"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DELETE_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalGroupId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalGroupId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DELETE" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DeleteGroup" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP_BY_PARAMETER_NAME" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>excludedAttributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>attributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_GROUP" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetGroupByParameterName" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP_BY_FILTER" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>filter</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_BY_FILTER" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters><con:parameter><con:name>startindex</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>count</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetGroupByFilter" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName eq &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>filter</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER_BY_PARAMETER_NAME" path="/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>excludedAttributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>attributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_USER" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetUserByParameterName" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DELETE_SCIM_USER" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DELETE" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DeleteUser" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPSERT_Defaults_Attributes" path="/${#TestCase#TENANT_SETTINGS}/${#Project#scimClientId}/defaultattributes" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="UpdateAttributesResourse" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#maintenanceEndPoint}</con:endpoint><con:request>{
    "Attributes": [
        {
            "AttributeName": "Defaultcostcode",
            "DefaultValue": "123456"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#Project#upsertToken}"/>
  <con:entry key="accept" value="application/scim+json"/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get_Defaults_Attributes" path="/${#TestCase#TENANT_SETTINGS}/${#Project#scimClientId}/defaultattributes" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetAttributesResourse" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#maintenanceEndPoint}</con:endpoint><con:request>{
    "Attributes": [
        {
            "AttributeName": "Defaultcostcode",
            "DefaultValue": "123456"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#Project#getattributecode}"/>
  <con:entry key="accept" value="application/scim+json"/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Microsoft AD token" path="/oauth2/v2.0/token" id="5283ed50-4748-4208-a8e1-8741c472a892"><con:settings/><con:parameters/><con:method name="Method 1" id="aa6793a8-ba16-4a97-beae-cc181df83396" method="POST"><con:settings/><con:parameters><con:parameter><con:name>grant_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_id</con:name><con:value>4ae8fc6d-d42c-4474-b746-c7af7600ca1c</con:value><con:style>QUERY</con:style><con:default>4ae8fc6d-d42c-4474-b746-c7af7600ca1c</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_secret</con:name><con:value>C1j8Q~VdGdSh9MT6Kd6.EmkY7_MlIQ1Z5sb5ydpk</con:value><con:style>QUERY</con:style><con:default>C1j8Q~VdGdSh9MT6Kd6.EmkY7_MlIQ1Z5sb5ydpk</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>scope</con:name><con:value>4ae8fc6d-d42c-4474-b746-c7af7600ca1c/.default</con:value><con:style>QUERY</con:style><con:default>4ae8fc6d-d42c-4474-b746-c7af7600ca1c/.default</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:tok="https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token">tok:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token">tok:Response</con:element></con:representation><con:request name="Microsoft AD token" id="02294f37-e0a7-4370-b0ac-fd2e9c33d37b" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5</con:endpoint><con:request/><con:originalUri>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="grant_type" value="client_credentials" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry><con:entry>scope</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Generate long live Client Token" path="/api/V1/token" id="49a47871-b849-4db8-90be-1aefe0cd2d28"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="2e810c3e-00c7-446c-a8bb-27652ccd0d52" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://epturascimmaintenanceqa.azurewebsites.net/api/V1/token">tok:Response</con:element></con:representation><con:request name="Client Token" id="95e81806-be12-4ab9-ae3a-bc88d2003158" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>&#13;
  &lt;con:entry key="TenantId" value="${#Project#TenantId}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://epturascimmaintenanceqa.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${TestCase#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="44270076-4a0b-49cd-9424-47bf3864bec2" wadlVersion="http://wadl.dev.java.net/2009/02" name="Eptura SCIM" type="rest" definitionUrl="pagi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/></con:interface><con:testSuite id="059e91a8-4656-41b6-a15b-4238421cc1a3" name="UTILITY" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5f220af4-672c-4b40-9956-97149fbc4a40" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GENERATE_TOKEN" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GENERATE TOKEN" id="f3d85d9d-9b4b-4d4b-a307-21eee2f9d760"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/api/v1/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GENERATE TOKEN" id="7ae85594-1bbf-45c7-9217-70003adcc6c8" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#tokenEndPoint}</con:endpoint><con:request/><con:originalUri>https://scimqatp.azurewebsites.net/api/V1/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fba86cce-0f47-433c-ac80-11dd1916a92a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def Response = messageExchange.getResponseContent()
def slurper = new JsonSlurper()
def result = slurper.parseText(Response)
context.testCase.testSuite.project.setPropertyValue("ACCESS_TOKEN",result.access_token)
// Verify the Status Code
//def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["HTTP_RESPONSE_STATUS"]
//def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")
//
//def ResponseHeaders = messageExchange.getResponseHeaders()
//def HttpCode = ResponseHeaders["#status#"]
//assert HttpCode[0].equals(ExpectedStatusCode)
//assert result.tokenType
//assert result.expiresIn
</scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5cbbbd62-90c5-4019-bd5e-4f844e34c53d" name="Not Contains - ClientId"><con:configuration><token>invalid_grant</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="c0eba74a-bbf5-479b-92db-33a9f356b8dd" name="Not Contains - ClientSecret"><con:configuration><token>invalid_clientId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="0b2a3a8d-ae9e-457b-8421-8e9893709a3e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#Authorization}"/>
  <con:entry key="TenantId" value="${#Project#TenantId}"/>
  <con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>
</con:parameters><con:parameterOrder><con:entry>scope</con:entry><con:entry>grant_type</con:entry><con:entry>Authorization</con:entry><con:entry>TenantId</con:entry><con:entry>AuthSecret</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties></con:testCase><con:testCase id="68efcee9-f274-4c87-9e98-f0a331b58567" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MANAGE_SCIM_RESOURCES" searchProperties="true"><con:settings/><con:testStep type="properties" name="SCIM RESOURCES" id="49aa3cc2-f57d-4d44-8411-b7755733d712"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>TENANT_SETTINGS</con:name><con:value>api/V1/tenantsettings</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>SCIM_SCHEMAS</con:name><con:value>api/V1/schemas</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3d56985f-77e0-4bb8-ae65-ee174ff83e14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STATUS_CODES" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="9f3d7a1e-76b8-4dd2-859c-c1e49f66a38c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>ResourceCreated</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ValidStatusCode</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>BadRequestStatusCode</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>UnauthorizedStatusCode</con:name><con:value>HTTP/1.1 401 Unauthorized</con:value></con:property><con:property><con:name>InternalServerErrorStatusCode</con:name><con:value>HTTP/1.1 500 Internal Server Error</con:value></con:property><con:property><con:name>NotFoundURL</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>Conflict</con:name><con:value>HTTP/1.1 409 Conflict</con:value></con:property><con:property><con:name>Forbidden</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>NoContent</con:name><con:value>HTTP/1.1 204 No Content</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="831d9922-7df6-4e80-8c5e-8f49f8a78df4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DB_VALIDATION" searchProperties="true"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="DB_VALIDATION" id="c539fbb2-a42d-4282-9a75-2a2c7d7d8bc2"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.*
def tC = testRunner.testCase
def tP = tC.testSuite.project

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def userResource = tC.getPropertyValue("USER_RESOURCE")
def groupResource = tC.getPropertyValue("GROUP_RESOURCE")

if(userResource){
def userId = tC.getPropertyValue("internalUserId")
def userName = tC.getPropertyValue("userName")
def userExternalId = tC.getPropertyValue("userExtId")

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
// Azure db to db details
def dbDriver = tP.getPropertyValue("DB_DRIVER")
def dbString = tP.getPropertyValue("DB_STRING")
def dbUser = 	tP.getPropertyValue("DB_USER")
def dbPass = 	tP.getPropertyValue("DB_PASSWORD")
//Connection String
def sql;
//log.info dbString
if(DB_FLAG=="true"){
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - CREATE_USER_DB_VALIDATION] - INFO : DB Connection Success")

// firing a query

log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : DB Validation Start in tblUser Table."

String  count = sql.rows("select count(*) from tblUser where pkUserID = $userId AND UserName= $userName AND accountActive=1")
log.info count
	 	log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : Total No. of Records Found in DB --> "+ count.getAt(3)
	 	log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : Query ---> "+"select count(*) from tblUser where pkUserID = $userId AND AND UserName= $userName AND accountActive=1"

int X =Integer.parseInt(count.getAt(3));

if(X == 1){
	log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : Record Found in tblUser Table, SCIM_User DB Validation Status[PASS]"		

}else{
	testRunner.fail("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : No Records Found In tblUser Table, DB Validation Status[FAIL]")
	log.error("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : No Records Found In tblUser Table, DB Validation Status[FAIL]")	
	log.error("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : No Records Found In DB")
}


	
	}catch(Exception e){
	
	testRunner.fail("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : DB Connection Failed")
	log.error "[STEP - CREATE_USER_DB_VALIDATION] - ERROR : "+e.getMessage()

}
}else{
	log.info "SKIP DB_VALIDATION........."
}
}else{
	def gId = tC.getPropertyValue("internalGroupId")
	// remove "G" prefix from groupID for DB Validation
	def groupId = gId.replace("g","")
def groupName = tC.getPropertyValue("groupName")
def groupExternalId = tC.getPropertyValue("groupExtId")

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
// Azure db to db details
def dbDriver = tP.getPropertyValue("DB_DRIVER")
def dbString = tP.getPropertyValue("DB_STRING")
def dbUser = 	tP.getPropertyValue("DB_USER")
def dbPass = 	tP.getPropertyValue("DB_PASSWORD")
//Connection String
def sql;
//log.info dbString
if(DB_FLAG=="true"){
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : DB Connection Success")

// firing a query

log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : DB Validation Start in tblUser Table."

String  count = sql.rows("select count(*) from tblADGroupToProfilesMapping where pkADGroupToProfilesMappingID = $groupId AND pathname= $groupName AND active=1")
	 	log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : Total No. of Records Found in DB --> "+ count.getAt(3)
	 	log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : Query ---> "+"select count(*) from tblADGroupToProfilesMapping where pkADGroupToProfilesMappingID = $groupId AND pathname= $groupName AND active=1"

int X =Integer.parseInt(count.getAt(3));

if(X == 1){
	log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : Record Found in tblADGroupToProfilesMapping Table, SCIM_Group DB Validation Status[PASS]"		

}else{
	testRunner.fail("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : No Records Found In tblADGroupToProfilesMapping Table, DB Validation Status[FAIL]")
	log.error("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : No Records Found In tblADGroupToProfilesMapping Table, DB Validation Status[FAIL]")	
	log.error("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : No Records Found In DB")
}


	
	}catch(Exception e){
	
	testRunner.fail("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : DB Connection Failed")
	log.error "[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : "+e.getMessage()

}
}else{
	log.info "SKIP DB_VALIDATION........."
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>userName</con:name><con:value/></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value/></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value/></con:property><con:property><con:name>internalGroupId</con:name><con:value/></con:property><con:property><con:name>groupName</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="7c38807d-63a0-43b2-a023-81533f1c962f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RESPONSE_MESSAGES" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="f9a6dc48-6e6c-4734-9def-c76fe0b26627"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>UserExists</con:name><con:value>Please provide a unique User Name</con:value></con:property><con:property><con:name>InvalidEmail</con:name><con:value>The Emails field is required.</con:value></con:property><con:property><con:name>InvalidName</con:name><con:value>The Name field is required.</con:value></con:property><con:property><con:name>InvalidPrimaryEmail</con:name><con:value>Only a single primary email is required</con:value></con:property><con:property><con:name>InvalidPrimaryPhoneNumber</con:name><con:value>Only single primary phone number is allowed</con:value></con:property><con:property><con:name>InvalidPhoneNumberValue</con:name><con:value>Please provide a valid PhoneNumber</con:value></con:property><con:property><con:name>InvalidEmailSyntax</con:name><con:value>Please provide a valid primary Email address</con:value></con:property><con:property><con:name>InvalidEmailDataType</con:name><con:value>INVALID_FIELD: emails[0].primary</con:value></con:property><con:property><con:name>InvalidPhoneNumberDataType</con:name><con:value>The field 'phoneNumbers[0].primary' is invalid.</con:value></con:property><con:property><con:name>InvalidSchemaList</con:name><con:value>The field Schemas is invalid.</con:value></con:property><con:property><con:name>SchemaListMissing</con:name><con:value>The Schemas field is required.</con:value></con:property><con:property><con:name>InvalidFilterMessage</con:name><con:value>Invalid operations query filter. Also, no support for logical operator NOT</con:value></con:property><con:property><con:name>GroupExists</con:name><con:value>Group Already Exists</con:value></con:property><con:property><con:name>GroupNameMissing</con:name><con:value>The DisplayName field is required.</con:value></con:property><con:property><con:name>ExternalIdMissing</con:name><con:value>EXTERNALID_REQUIRED_FIELD</con:value></con:property><con:property><con:name>InvalidValue</con:name><con:value>One or more members given in the list is invalid or does not exist.</con:value></con:property><con:property><con:name>InvalidMemberId</con:name><con:value>The MemberId '' is invalid.</con:value></con:property><con:property><con:name>ExternalIdReadOnlyError</con:name><con:value>Please provide a valid Group External Id</con:value></con:property><con:property><con:name>InvalidClientDetails</con:name><con:value>Client details not found.</con:value></con:property><con:property><con:name>UserNameCharacterLimit</con:name><con:value>The field UserName must be a string or array type with a maximum length of '100'.</con:value></con:property><con:property><con:name>InvalidGivenName</con:name><con:value>Please provide a valid Given Name</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c1b1fcf2-2105-46f0-841d-bbd5e2534055" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SCIM_ERROR_TYPES" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="440d560b-b308-47cb-b5af-46fa3eeb6041"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>ConflictErrorType</con:name><con:value>uniqueness</con:value></con:property><con:property><con:name>SyntaxError</con:name><con:value>invalidSyntax</con:value></con:property><con:property><con:name>InvalidFilterError</con:name><con:value>invalidFilter</con:value></con:property><con:property><con:name>InvalidValueError</con:name><con:value>invalidValue</con:value></con:property><con:property><con:name>Please provide a valid Group External Id</con:name><con:value>mutability</con:value></con:property><con:property><con:name>ClientUnauthorized</con:name><con:value>Unauthorized</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3a9605f9-c658-47b4-854a-3134bd9565c1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SCIM_ERROR_SCHEMAS" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="a7328f05-e101-483c-8b59-730c29d83a52"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>GenericError</con:name><con:value>urn:ietf:params:scim:api:messages:2.0:Error</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="fc605958-9aa1-4a2d-9b30-4f587fadb41f" name="GenerateToken"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01_Verify token" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Microsoft AD token" id="061f63c4-6e34-425e-9043-6a37a04dbab4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/oauth2/v2.0/token" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Microsoft AD token" id="02294f37-e0a7-4370-b0ac-fd2e9c33d37b" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5</con:endpoint><con:request/><con:originalUri>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="45aff2e6-b772-44b0-af28-4536caf3da33" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

def parseToken = jsonSlurper.access_token
context.testCase.setPropertyValue("accesstoken",parseToken)
Boolean actualResults = (jsonSlurper["token_type"]=="Bearer")

assert actualResults == true
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="grant_type" value="client_credentials" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry><con:entry>scope</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Generate long live Client Token" id="f0c147e9-cdb9-46d3-9ce4-8a3459e6b45c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/api/V1/token" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Generate long live Client Token" id="95e81806-be12-4ab9-ae3a-bc88d2003158" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>&#13;
  &lt;con:entry key="TenantId" value="${#Project#TenantId}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://epturascimmaintenanceqa.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://epturascimmaintenanceqa.azurewebsites.net/api/V1/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8648c731-1a0e-4b4b-b95d-cc925da7882c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

def parseToken = jsonSlurper.access_token
context.testCase.setPropertyValue("token",parseToken)
Boolean actualResults = (jsonSlurper["token_type"]=="Bearer")

assert actualResults == true
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#accesstoken}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accesstoken</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjVCM25SeHRRN2ppOGVORGMzRnkwNUtmOTdaRSJ9.eyJhdWQiOiI0YWU4ZmM2ZC1kNDJjLTQ0NzQtYjc0Ni1jN2FmNzYwMGNhMWMiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vYWRiNDhjYWEtMGIxNC00MjU2LWIxNzgtYTVlNTA4YzgwN2Y1L3YyLjAiLCJpYXQiOjE3MDY1OTcyMTUsIm5iZiI6MTcwNjU5NzIxNSwiZXhwIjoxNzA2NjAxMTE1LCJhaW8iOiJBU1FBMi84VkFBQUFPTDhsTkd6ZHc4SjhxZXVRNWFad2Z5dmt4NC9mZ0RPQWQ5akVCYkZuMlFjPSIsImF6cCI6IjRhZThmYzZkLWQ0MmMtNDQ3NC1iNzQ2LWM3YWY3NjAwY2ExYyIsImF6cGFjciI6IjEiLCJyaCI6IjAuQVM4QXFveTByUlFMVmtLeGVLWGxDTWdIOVczODZFb3MxSFJFdDBiSHIzWUF5aHl3QUFBLiIsInRpZCI6ImFkYjQ4Y2FhLTBiMTQtNDI1Ni1iMTc4LWE1ZTUwOGM4MDdmNSIsInV0aSI6IjllX0xocGcxbjB5NlByUS15NDFVQUEiLCJ2ZXIiOiIyLjAifQ.QgqibMQlFfCOw5fCp2g0ZMynUwHpEVPtIl89dfT7pEaLCwraa_C2HkuejX5Cr_V2c2blZk82GlikTyRA8sA4q7XMTyJcOMiqo-0LzjVwaEp5bpD_M3keq6qgloczxRupQN0zTSeRfxkteYlGtTBkHuZS9wddejtYN7hFWrJsLnAqBxtoeGoV79_JJiueCB0jxsY8Ja9UKnUtzzkO1z2pqkPL8XM6zyuuCpk5cN-fd8rrvi4DsbyW1jX5Z-3IhhplyosegWJdVsLSego8rre6fh8UXfkBELHyWFgjPvII_B0Or6NOSJjmm9h-rKeuCOjOyr4caD66P5JuIpxzDYal2g</con:value></con:property><con:property><con:name>token</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIxWENYMld6YUU2b2wzbDlwdXNTazB5MUpZUW9yVzFRY3pYSjNMNk1jRUlyYWFMVXF1V0V5eEFyam8wWi93UW13bzRCL1lIOEo2ZUlCQXk2OWptNnVTUmlTczNXbnd6YXVXbitNSkFObUM2dW9QcU5TQ0tPZ1ZyanQxV0dndjE5ZHhNZ2JrM1NBbmM5bEN1b0g0cHorVFduTlRzcExWSUhjSXcxcmthVjVadFJ0b2YyMnIwUFloUDVZWGlQWGVqeWgiLCJleHAiOjE3MzgyMTk5MjYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.CNmUG-crysFaHDfME0ohYYRJuoS3JjUAg66MaP1WkTg</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="9e08c32b-29d4-41c1-9e4e-3e781ab22331" name="Randomvalues"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e6fdb70e-e836-446d-90f5-15036092a7ee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate random value" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="e561559c-6f67-4f25-94b4-1ece1a028894"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
log.info externalId

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen1


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("Mobile",Mobile)
log.info externalId
</script></con:config></con:testStep><con:properties><con:property><con:name>externalId</con:name><con:value>ExidryOVrm</con:value></con:property><con:property><con:name>userName</con:name><con:value>NameryOVrm</con:value></con:property><con:property><con:name>Email</con:name><con:value>ryOVrm@xyz.com</con:value></con:property><con:property><con:name>Work</con:name><con:value>0078841464</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameryOVrm</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameryOVrm</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0078841464</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>Exid</con:value></con:property><con:property><con:name>userName</con:name><con:value>Name</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>Work</con:name></con:property><con:property><con:name>Mobile</con:name><con:value/></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property></con:properties></con:testSuite><con:testSuite id="047ed729-01c2-495e-ba8c-c8efcdc84c48" name="CreateSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9c4519cc-5eec-4c71-b105-7e31478756c2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01- To Verify Create single SCIM user" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="158be05b-bb87-4f92-8495-58e44aaff3e5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI5M1p1MzA2clhHMGVpQ2plZGxHc2wyYmFaTlhBazBNVmdpZ2p5RjAzY0tnN2RaQkVCNmxMMGROUU1BNm1Udkh1Slpra3dUSkVrTFR3V01vb1Bic2NKdW5hTzFSalNQcTI3RjlvYjc1Y0tFS0pOYlBrTnlTaDNaa0V1UGNjUjdxYmk0eXpUejYvOWpTdHQvZmtKM3N6ZkxVc252N2lScStzTm1NREdtR1A4eW1KY0xPSTJZYmFOUjRDMTFUQlFPRTAiLCJleHAiOjE3MzgzMDIzODUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.qNQPAa2Kj3Ao2Oua5O1Nr2Gpk0r7DX5A_Jwsc_Qq4ko</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1b886b55-de82-4e13-aaf7-d48049120ad7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="b74f466d-f230-4307-b8bb-bd2d79c150e3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c9166907-b2b4-4d11-b2a8-3e2dab55bcc3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="259603bd-e89f-45e0-801c-1e6a245c20b7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_VaUjnJQs</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMvJCXG</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1714fcd0-1ae4-4975-8653-96efc07722f9</con:value></con:property><con:property><con:name>email</con:name><con:value>MvJCXG@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMvJCXG</con:value></con:property><con:property><con:name>Work</con:name><con:value>19978719786</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMvJCXG</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMvJCXG</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3156767808</con:value></con:property></con:properties></con:testCase><con:testCase id="2050be60-e4e0-4d2c-80b4-ae17335e2bd3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02- To Verify, userName must be unique for every SCIM user" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1a4b6728-0248-4840-8f89-395cd88407f4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJiTk05L2dSWnRYUnpqKy9YUENwSnJZeitheTdGS0NtNDBaMEY2akFQcStLaUZnU2NHblBYamVBTlBhVHY2a0ZjeEdQL01NQ1VVZnk2b2ljbVRxTWVJT1cwUFc1bXp1bTlYOGExUWdIbWVEdndFU0llQ1hzTFIwZVRrcnV3aUpUMlhTMzlhMFdnWk90dUgxMmdaTDQ4NnZjRjdqVk1EamFlWHk5TjhySGU1LzRQN0RRem9SbU91dTF5YS9NOEhkZVIiLCJleHAiOjE3MzgzMDIzOTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.nYG31InmUgyrFp6HT9-8BuIogTmczjcMxic1n10V5Dk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c9f023cb-1bd3-4d25-9c25-c69dfdf889b1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="aaffdf84-59bd-46f5-85a4-69c2f9b3e6ce"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateUser with the same username" id="addbfa58-a833-419b-a1f2-f8819ecdcc10"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateUser with the same username" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8d527f95-59a9-4bf4-8720-f50600ef1747" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("UserExists")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("Conflict")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="bd4946bf-1dbf-420f-afcf-eb61e79388cb" name="Valid HTTP Status Codes"><con:configuration><codes>409</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9976ac43-466a-4b8a-8736-1b3a948b899b" name="Contains"><con:configuration><token>Please provide a unique User Name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d4240002-0d69-46e6-8851-6723aa19f488"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_O9xyLr37</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameeC6mME</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>db8a2f9d-86dc-47de-8f92-9bdd571b00fa</con:value></con:property><con:property><con:name>email</con:name><con:value>eC6mME@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extideC6mME</con:value></con:property><con:property><con:name>Work</con:name><con:value>82187097106</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6965301784</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameeC6mME</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameeC6mME</con:value></con:property></con:properties></con:testCase><con:testCase id="f9835c9a-7dde-4b66-81be-71b0b82133f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify, handling of 'null' values for phoneNumbers in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6a30513c-d7f5-4026-96ef-2af5a4de96a4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0c0tnem5lay9Yb1FEcDRiOHB1ZlMyYWpiY1JEK0dYZ0dTa0E1d2dZODFMVWJBc1NmZ2NNR3hNRCtyWTBPM2Z2YmM4WXYxOFVtZ0R0UVdibDlkWmtET2xIUTJRTzhGTGRoVTBTcW9EM0I4Y3V4Wk96NDQxTWFPUm5UMEppU2FjejU4SmJvdEJMdGJOekt6Vld2Rkw3SmZTM1ZCUzU4Y3BOakY0N2I2NXJtdWtrZ1F2ZEI3SHNYNk5CZUhYb2Vvay85eG1lVnhoTlV6TkNBTWl4U012UENRPT0iLCJleHAiOjE3MzgzMDIzOTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.0QOySF4CutBl-yhK_XoSOY_SOysuomlItuiYncyx3fE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="95d70609-babf-4d93-b93f-f4fb50ade873"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="8a13ae63-cd07-46e3-96b2-43c749340f11"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": null,  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c7e6854d-62f3-4cbd-9527-a23b32b29638"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null
def phone=jsonObject.phoneNumbers
assert phone ==[]

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f4a28dfb-73ac-459f-a0fc-cc175b58fa0a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_smmP6x85</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamey2P6f5</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0a79de22-2e47-4628-9a48-8f9543ba0181</con:value></con:property><con:property><con:name>email</con:name><con:value>y2P6f5@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidy2P6f5</con:value></con:property><con:property><con:name>Work</con:name><con:value>61018740903</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7535872524</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamey2P6f5</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamey2P6f5</con:value></con:property></con:properties></con:testCase><con:testCase id="1e8a2546-f5fd-40b3-ba71-0a17f42c14a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify, handling of 'null' values for 'email' field in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bdb7e15b-7df7-4672-8055-c7cce0f2c692"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrazA1RXpOYTJOMHVJNlRmUVJMYXV2NnIrTU8zQUZNUVYvSzRGRFJGS0F0MU02Lyt6V20vU25RRTEySlJHR2J3NlpjQ05raEZqd2k2aldrSnZaa0ZWQzJYVlVXdEMyV3p5QzRSaEJiZE5OdmZyOEI1UmNsc3JObEVXL0Z6T2xmOFRiQlg2MlBYQlNFMWIrZHFFdnlqVnJRekw5N084dXdmTmhSdWl5aXplekl0ZXVvbENzL1dnN0U3RzZYd2R5ZEQiLCJleHAiOjE3MzgzMDIzOTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.94ZWo6tH8bg78qnV2JRPiH0nlt07uBFvtPilJLfGlrY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9f6efa50-79a5-469d-9f6d-4a13df81979b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
//Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
//context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4f4c9154-3b04-4cca-9dcd-2078bf9569ad"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails":null,
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmail")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f082eaf1-8007-468c-979d-50eba38c5681"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wN0HFPyG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName0cJzsC</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1715</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid0cJzsC</con:value></con:property><con:property><con:name>Work</con:name><con:value>42534090318</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6849028643</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname0cJzsC</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname0cJzsC</con:value></con:property></con:properties></con:testCase><con:testCase id="ab94b867-a2cb-4d89-abc6-624fb09af2cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 -To Verify, handling of 'null' values for 'name' field in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="934793e6-46f9-40b1-aad8-ff926009c4e3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5cHkyWFVWOGo5d1RBNWR1bkQxQkpDRFEvQlF6LzgzZk5sNlJGNzZIejUyWDEvMlVBdjBLYVgwUmtnNUhaYVRLVTdxc1NQYWcvTFBvZk5vMkQ1U0dicW42Mkszb0taYTBTMmFXT2IwUFVLZi8xZGZjUVNZVVdlc0lGbkdDOGdYbHZzWExzZEJLaXlyOFRNdGJCQWZZbVRMVG5lVHdnNTZ3aXl6M1JXb0lSYTQ9IiwiZXhwIjoxNzM4MzAyNDAzLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.__eqLURMLBdIeqEac5sWm3avQY_PAuaiQu6n-9Vv9uY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="acc7d432-d027-4df6-a505-d16a38ef77d1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
//familyName = familyName + randomGen
//givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
//context.testCase.setPropertyValue("familyName",familyName)
//context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="95b4e9ba-07d8-497a-ac37-ec09aeec9db4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": null,
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidGivenName")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="203ba195-d9d4-42f0-9138-07194146e1fd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_sb6Gw3xo</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameWkUpch</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1715</con:value></con:property><con:property><con:name>email</con:name><con:value>WkUpch@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidWkUpch</con:value></con:property><con:property><con:name>Work</con:name><con:value>96129550958</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6060157312</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameNBYbac</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameNBYbac</con:value></con:property></con:properties></con:testCase><con:testCase id="3ac89a54-6c30-41c1-9ea8-440e86c57f9d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06- To Verify Create single SCIM user in 'inactive' state" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c0f74052-ac5c-4e24-bc6e-22b2c1803277"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0OFFURUlLQ1paSlh6dFk5UzNyT1pHMFptMitReDZOOG9kRWF6UFg1SHhLUW9WZCtsYnhNWXNKRi9uV1hORzhVZDF4c2ZrUmY3UW5SYVZyb2dOTndoN0N3QU03TXhlRGh3N0RGN2hXVEllU3ZHV2UyaWh4RzEzNmcyanJlVlJkR1poWjN3bG5MSXVqM3YraTVLeUoyblVuZ0ZOQ3lvbmhtb3BhbEhDSE1ITGcydzl2SDk3NjlQT1hVY3Q1Z0tqbitFNGFlenhKUkdrcHpxRGZwL0JnQjFRPT0iLCJleHAiOjE3MzgzMDI0MDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.eVxUpDzuPJ1GFDh10uNxPopdChEnM4MCuV1MTVuSmwk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="47aace67-2326-4d54-83bb-a95c4363aab3"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5d81e09c-5805-407d-9cc7-39f2426d5665"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#activeFalse},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//def ActualActiveValue = jsonObject.active
//def ExpectedActiveValue = context.testCase.testSuite.getPropertyValue("activeFalse")
//assert ActualActiveValue == ExpectedActiveValue



//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="892c0557-8ac8-47a3-b55f-9872f72afcad"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

////Verify the Internal UserId for User
//def ActualinternalUserId = jsonObject.id
//def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
//assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)






// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="36ef3244-a52b-45fc-943c-259bceeb3c30"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Mm01pqDE</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName3zkA3t</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e723870e-7fe2-4852-ad3e-10f077710139</con:value></con:property><con:property><con:name>email</con:name><con:value>3zkA3t@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid3zkA3t</con:value></con:property><con:property><con:name>Work</con:name><con:value>94726893551</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0374762619</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname3zkA3t</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname3zkA3t</con:value></con:property></con:properties></con:testCase><con:testCase id="7bd6cb2b-faf0-46ca-8a0b-2d6e14703cb2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07 - To Verify Telephone number, when 'primary' attribute is true" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e8fe769a-d40f-486e-bbd5-7c3c65696b5e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJTaGcyb3NHNVgwT1BKWXh5bVY5cXJiQ0RyK0pkNzZ4MTJhRTU2YXo1Mk1QS1M2emQ4ZjVMNUVjWE4wSWhocjIvc3NnNmpWSE82ZmtiQ2REOWwwcmpJUVFVVnZ3QXhmNUZSNFRQNUlVUGc1VUFoMnZmOXgvZCsrRlI5Tmo0ajRIZVAvVGtodHZYY3UvZ2NoYjdydEZuWFJNOWtWSXJWbDJXcGFPd2FPcEZ6RFVxZHlkSWNqYjIrVmFaRXBzYWR0MDIiLCJleHAiOjE3MzgzMDI0MTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.JF1_3yWU1ZGXeg8F1LdDeYHOF-FNEUmOaYrJui_Vamc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3063ffdd-e4f7-4978-b68e-41ea3da14e80"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="694624b3-1d95-4348-8ee1-166261e06f63"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bd539d04-100e-4b0d-b85d-30c2cd024013"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d8d2358a-883a-4025-987d-cf48dc35efa8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_3QtC1Kic</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameZkBJEF</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3bd79996-61c8-4ec3-a019-55b3c3ad802f</con:value></con:property><con:property><con:name>email</con:name><con:value>ZkBJEF@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidZkBJEF</con:value></con:property><con:property><con:name>Work</con:name><con:value>82897326255</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6419672622</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameZkBJEF</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameZkBJEF</con:value></con:property></con:properties></con:testCase><con:testCase id="bd39c1dc-d9d1-4f38-8b6f-647a43af3465" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08 - To Verify Mobile number, when type (Mobile OR Cellular OR Cell)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f7cb3bf0-0c03-4124-8f20-194a778d3132"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWRWtlUFMxK3FsczlOTzhnMDNsN0hFYVJWakRrK05PWUhZR1FMdWhxN0V0SXBNMGd4WHJFQXdDOHVVNW9QRTg2YmxWZk5LRFdrQ0JRaGtUUVNHWHNSK1pqUk9VeHVzZjBLY3R6Z3BYeS9UblJvZUZzS1A5RVFkdEE3UW9jdDlmN0dib1dCNzAzT2p0ZkcvOEhUZFVyNzhBTGM3Zmxxd1hWdmlwaFBWNVkxL0RXcEJFOHJ3NGVQQUZMcnVrRmRPRSsiLCJleHAiOjE3MzgzMDI0MTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.SDM9WXnml0ihamSjf5XRpruhkZigjca7xkS17jedSEw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="07342b50-9050-47dd-8fed-3d96723b4bd7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f9a260b7-6bb2-46d7-933c-21f404f1eeec"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "type": "${#TestCase#typeCellular}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def Actualtype = jsonObject.phoneNumbers[0].type
def Expectedtype = context.testCase.getPropertyValue("typeCellular")
assert Actualtype == Expectedtype


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="4c721f7a-4b48-4184-a21c-a76b12a7acca"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d5001f10-bc12-44c7-98ab-8ea5dbd80e77"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_E0LBo1si</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName1KkZut</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c5579fb4-fe23-430f-ae93-efce16db2586</con:value></con:property><con:property><con:name>email</con:name><con:value>1KkZut@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid1KkZut</con:value></con:property><con:property><con:name>Work</con:name><con:value>40879226107</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6434895599</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname1KkZut</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname1KkZut</con:value></con:property><con:property><con:name>typeCellular</con:name><con:value>cellular</con:value></con:property></con:properties></con:testCase><con:testCase id="81bab554-09d7-4802-9431-0e3bc477bbf4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09- To Verify Mobile number, when type has multiple values (Mobile,Cellular,Cell)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4fa9153c-67c7-4162-9971-9d7a7c4a79a4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJUclU4SUhrNjhjV1pZTVlOWmoxb2Z1YjVBYTdHRXM2anN5TFZOcWg2b2hpUkZlalFueUt4Q3ZiU1RGUkpoNHRGcUNrdDBnSFZ6dzF3UTB5b1huV1h4SWNPZWRVdkhxN2pJaTJBYW5vN0hXSEZnZjBWaTVHaUxEWlFTeU9YbFNpTGVMWDJPM2VTVStPcSticGR3eXNDNWMxUXdOYlh2WHRSNG80bVE3aXpIbzEyWGhLc2cyNjlMOUxRb0E4Ykx0dnYiLCJleHAiOjE3MzgzMDI0MTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.rs0ctt1OgsEM1bwsQvgWPc8u9TpTzkValm7M1X0A-Vo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0be7cc49-003f-4b5a-a2b5-912c3ecf3847"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5156b969-7827-4f8c-872b-37bac3059d04"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "type": "${#TestSuite#typeCellular}",
            "value": "${#TestCase#Work}"
        },
         {
      	"type": "${#TestSuite#typeCell}",
      	"value": "${#TestCase#Mobile}"
    	   },
    	   {
      	"type": "${#TestSuite#typeMobile}",
      	"value": "${#TestCase#Mobile}"
    	   }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def Actualtype = jsonObject.phoneNumbers[0].type
def Expectedtype = context.testCase.testSuite.getPropertyValue("typeCellular")
assert Actualtype == Expectedtype

def ActualCelltype = jsonObject.phoneNumbers[1].type
def ExpectedCelltype = context.testCase.testSuite.getPropertyValue("typeCell")
assert ActualCelltype == ExpectedCelltype

def ActualMobiletype = jsonObject.phoneNumbers[2].type
def ExpectedMobiletype = context.testCase.testSuite.getPropertyValue("typeMobile")
assert ActualMobiletype == ExpectedMobiletype

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="1215ed6b-15ba-42c6-9264-158d79eccd2f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="08c17948-1057-4eca-893e-86e6a26267c1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_9aFf5cf3</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName64S6Do</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>60cace47-5f1a-4652-8e0c-761bd1cf996c</con:value></con:property><con:property><con:name>email</con:name><con:value>64S6Do@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid64S6Do</con:value></con:property><con:property><con:name>Work</con:name><con:value>19348155750</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6422537344</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname64S6Do</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname64S6Do</con:value></con:property></con:properties></con:testCase><con:testCase id="4879132c-0e82-45b2-9cac-6c67e4f18c68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ 10-To Verify Mobile number, when type has multiple values (Mobile,Cellular,Cell) and primary is 'true'" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a5b136e9-6686-4f68-9b2e-7bfbef82b860"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJpbUxNYXJpbXRiSTkwNjhPZW5QY1FPRE9reHlXdEwvdVlMUURjWTF0OFVUeUdBenYxUG9EMk11MFg2ZzB6NjlxRzJZNnNUNVZzcGwzVU9XSjU2eFlVcXVtK3ZYcnMzditpSGIxLzc1b0x6V3pjYUdQUDJ6ZVVlRnd4akhkMGtZaURwSVJxVCtKb002cml6NThWUGRNazE1aTZMcUpFc0ZsV2JEd1plTndWd2kxNjBTZGIxYWtiWG90bXVKcFJZb1giLCJleHAiOjE3MzgzMDI0MjEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.s1B43dGlrC7ud-FlWhWwXPBPP-g0VTQwvztQqqGawSk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="60dedaeb-2548-4419-ab61-bd9bba557b37"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="ddde97e2-b0ec-4618-9406-95346e3e15e4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "type": "${#TestSuite#typeCellular}",
            "value": "${#TestCase#Work}"
        },
         {
         	"primary": ${#TestSuite#primary},
      	"type": "${#TestSuite#typeCell}",
      	"value": "${#TestCase#Mobile}"
    	   },
    	   {
      	"type": "${#TestSuite#typeMobile}",
      	"value": "${#TestCase#Mobile}"
    	   }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def Actualtype = jsonObject.phoneNumbers[0].type
def Expectedtype = context.testCase.testSuite.getPropertyValue("typeCellular")
assert Actualtype == Expectedtype

def ActualCelltype = jsonObject.phoneNumbers[1].type
def ExpectedCelltype = context.testCase.testSuite.getPropertyValue("typeCell")
assert ActualCelltype == ExpectedCelltype

def ActualMobiletype = jsonObject.phoneNumbers[2].type
def ExpectedMobiletype = context.testCase.testSuite.getPropertyValue("typeMobile")
assert ActualMobiletype == ExpectedMobiletype

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5355c3be-eace-413b-ab9a-6f46ded84c25"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="52ce34ca-61c1-4c57-9c18-2c22ee83cddf"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZbDdyasO</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameUzhMRV</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>765105e9-38f1-484b-8778-65525e262c47</con:value></con:property><con:property><con:name>email</con:name><con:value>UzhMRV@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidUzhMRV</con:value></con:property><con:property><con:name>Work</con:name><con:value>96443353571</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4780960381</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameUzhMRV</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameUzhMRV</con:value></con:property></con:properties></con:testCase><con:testCase id="930a6105-be37-4c83-a83a-89bd75c33076" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11 - To Verify user is created when 'primary' attribte is missing in payload for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4472d05a-e16e-4465-a255-b1df32be1d11"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsMmlpd1g0TTQwMnNsSU1aWHRNalpoVStYRUNqbDlVSEtlZFBQNVhvdUMzWVVQbXlocUNOREgvNGl5OXhBRmVQZTZ3Um0wQUphNjZqNGtMSDdVWTFRMFowcEd5WURSMzlKL3B2YzRlbmNZY0FhZkJjZW9TWWtoWGpReE82MC96clR6UkZIalBVYW8za3N0ajZPUnYyMzJwMVJ5MVhGOFcvM1d2QXgvVkpHSTRSQzl3OHFhaTc5S3hKU1ljeGY3WkEiLCJleHAiOjE3MzgzMDI0MjUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.JER6DRCUUKWOn_0WmSKNofKNcYrT0NerIw63B2OQy4U</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4ac8575f-991e-4742-8a60-36b1f690baa7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4afe83dd-6629-41ae-b540-d1e7b4cedeb6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="e8903193-e04d-498d-ae66-1dfa207f1162"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6afd078a-63bc-4061-af39-74538e147ac2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_nJjLmZ23</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamePa4X4c</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f87834b8-eafe-44f5-9876-f571820dfd8c</con:value></con:property><con:property><con:name>email</con:name><con:value>Pa4X4c@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidPa4X4c</con:value></con:property><con:property><con:name>Work</con:name><con:value>73088816405</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8862493479</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamePa4X4c</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamePa4X4c</con:value></con:property></con:properties></con:testCase><con:testCase id="e4ca20db-896f-4631-b24f-ed81e2a1ea15" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12 - To Verify that user is created when 'primary' attribute is 'false' for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0d58ed70-1ceb-42db-b1f5-8e58493dbd8f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI3ZkdWQjBFTEgzN0F2WCtmdmxwS0FKUC9teHBYOWxCQlF2MXhYNDZYcjlMYjRTUmtzRk1wblNLcXpKclZzK3d0MHJOQmlBaVFhT21YMVdhbWQ1ZDJQOFlnc1lxeCtVNnpMU3Uyc25sVTVIcHYxRXFBeS9CWXplVlhkaHZGYlNxcE5oWGZkYml0Y2UvWTkxOVYxQVdVdmZWTllaWG9FUkxuNDFiZE1NQit1dGcwYUEyQWdlSEZqT2NYcUJ0bXpJN0siLCJleHAiOjE3MzgzMDI0MjksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.d682RoQO8QgIOvwJCxKmL3hPjQLoj7mTB7Yxt-mwIfo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d4ca76b9-72de-4df8-a0c9-8cf15ae4e389"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="40c0f078-ef4c-4317-b681-99220ba4c874"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a1d0b6e8-35ed-49ef-a49a-818520b7fcfb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="094ebf30-276d-40d5-876a-f1d5d0c3dd9a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZizG0o1W</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameYvXg57</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0566da40-1500-4f51-9936-a4e63466c263</con:value></con:property><con:property><con:name>email</con:name><con:value>YvXg57@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidYvXg57</con:value></con:property><con:property><con:name>Work</con:name><con:value>86309397662</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7633211958</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameYvXg57</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameYvXg57</con:value></con:property></con:properties></con:testCase><con:testCase id="3e7fb60d-46e5-4f4a-87df-b9e37e87de28" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13 - To Verify ErrorMessage/Status Code, when multiple 'primary' attribute are 'true' for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="073d33c1-96f6-4747-983d-84c52d2429d1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsTDByMDhVU0h1ZUljOHU2MHI1WjczMWU3UVV5R2pLWlFrSFFyaEwzL21OenMwcThsWFNwdkhLKzB5YWY1VXBrNFBMekgrZVpaVlpuNkhSa1pUM2g1eTdHQTBLSlhUd1lERFVBR3hRTzhjRTRWZ2VFa1R4Q3lBMERtSHI4bFA5cDJscDIyVE5ZaEY0WmtNdlhCZ1dkaEZoVUdaZGsxTGlIMk9VbmRlQTRhbVhoLzlnZEsrOU1jemEwanJnZ045OW4iLCJleHAiOjE3MzgzMDI0MzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.3HiS18HqxdMDhQJlAO4OWboDVa-D_vdt3AIF_xzPYIg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="24019141-9a26-47ef-988f-de64268419b0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="eb04202f-4e9f-4fc3-be45-bee47faf0741"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidPrimaryEmail")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="338ed373-9cf1-4edb-9020-6c32a80e72c0" name="Contains"><con:configuration><token>Only a single primary email is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b368a19c-7c55-47b2-9b49-f580db30cfce"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_P4MmW0Uq</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName9QXPG3</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>9QXPG3@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid9QXPG3</con:value></con:property><con:property><con:name>Work</con:name><con:value>21403337751</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8072466508</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname9QXPG3</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname9QXPG3</con:value></con:property></con:properties></con:testCase><con:testCase id="57d0a980-4492-443c-a6b2-4b10cfe11301" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14 - To Verify ErrorMessage/Status Code, when 'phoneNumbers' field should accept only numeric values in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="873dca05-5897-4811-a389-f0226bffbf8b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJQWWJXUzEwR2lOYjhlaXpseTJpRlJEU25Kd2NydThXMHo5R3ZQcFJJbmYwN0g5QkpZbGk1QXlUM24wV3R6MkxkK3J4MUZnUENYa1NUV1lMditOZGdPNWN1ZWs4MlBnYzRyVnRXcWg5b25uaWEvayt5U0swT0d5ejlZL0g4Q2xJQWtEUENtcERmdzg5dUc2VXQwNGpmWjZqSEhmQlQvcFhtdkE1VDFuUWZxUjFnL0padHc0YjI3ZFJKY29KaXlWWloiLCJleHAiOjE3MzgzMDI0MzYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.bLJp-a1FSw7xvZl--FkxflM2pZI12UyfquUTNCYCP6E</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e98ea8a6-ad48-412d-8ecc-d3af192e9686"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="243620fb-9fbf-44e1-8e62-f89cb50baf17"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidPhoneNumberValue")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="338ed373-9cf1-4edb-9020-6c32a80e72c0" name="Contains"><con:configuration><token>Please provide a valid PhoneNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f464db36-dd98-4c5e-9ae9-2824da6585d8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_w2YNYA20</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6h9zgK</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>6h9zgK@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid6h9zgK</con:value></con:property><con:property><con:name>Work</con:name><con:value>25776504942</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6h9zgK</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6h9zgK</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6h9zgK</con:value></con:property></con:properties></con:testCase><con:testCase id="d61cb876-06fe-40c4-a668-079aca439bfd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15 - To Verify ErrorMessage/Status Code, email field with invalid characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="15cf45e9-0de3-43a7-8bb2-38f871bc79ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ4bjJURENBL2xUNG5OdGVaMVBHWGRCOHFKUzJQK0h3RmJIQ2RNSWlHdjRmREdJVm1SMEVjUFdiN3FDcUtuVjNRSUNBYSthVUVDVUFDYlVKN1BqTTdYQmJFN0VjbFU2em9uUk9tcUc2djBabG1FNEUwY3FORG5sSkxrNm5SclNCVm1GQVRiSnprZTEyOFRKaGZkN1JpZjBpZU5FOVViZ005TzJZUmYxcnhkSFRSUmhxRjZaY1BEbTlVVkRtdE9DaUEiLCJleHAiOjE3MzgzMDI0MzksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.2a_Lxcdkx-vfd2Uu5i7AUCWPEJVIE3tSkBuKYK-tVsQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="5cba740f-58b2-4647-b414-ae6840250329"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
def randomGen2 =RandomStringUtils.randomNumeric(11)
 
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestCase#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0be9d76b-d704-4c0a-a622-99d9badcd049"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailSyntax")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="338ed373-9cf1-4edb-9020-6c32a80e72c0" name="Contains"><con:configuration><token>Please provide a valid primary Email address</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1968704b-feb1-4f1c-8c80-14068b375713"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_11abIZY1</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameCFqgZY</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>sciÁáÉéíÑñóúÜümuserÑame@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidCFqgZY</con:value></con:property><con:property><con:name>Work</con:name><con:value>07586614093</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3444234763</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameCFqgZY</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameCFqgZY</con:value></con:property></con:properties></con:testCase><con:testCase id="511bbb05-0421-420e-ab43-f81846ead6ac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16- To Verify response when email format supported with Enterprise" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9917d338-f71a-4acd-b0f2-985368cbeb23"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJFQzd3ZVdNeTBwSFlleGlJaUE4WmM4Z2NRT0E3L2RiK0Y3d1pXRkptZU9LdC9DdVRrL0dVM3F4RFd0eGVDdGdoRFY3U2o4Y1BweWk3YVRIM0pKRUlPMzJib05leTRkalhkSU92NGhSQmNqeE1vbXBxSUc4L3lXQkRjNVM2bWEwWkN6MTU2RkJuZlRmTTRpYXlXcGpMdWhhcCtzdnd0Ymdla2g3VzhYaWFUbVQ3TmtHK29ocDNnRnl1UXJqdEhBT04iLCJleHAiOjE3MzgzMDI0NDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Whu-AyBheuGUlubv-dZq6A_YWh0uR-dXZNEZ3O1njGk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d42b5d3e-8805-461b-9ac8-c13e50e7b38d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
def randomGen2 =RandomStringUtils.randomNumeric(11)
 
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestCase#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="03e40e20-194b-4e6d-9a86-c990492e4b55"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="de29aa9d-b945-4689-a88f-d6512c7da0f5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="3425762a-6bc6-4604-a943-4a031bb7406a" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="e1a14251-69f5-4e66-924b-68815b0dd1c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8d73de2f-51b1-4c24-8461-446c16859eab"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName2fg2xs</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b4bd24a7-b257-4311-906e-816ae3e9742d</con:value></con:property><con:property><con:name>email</con:name><con:value>userApim@s.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid2fg2xs</con:value></con:property><con:property><con:name>Work</con:name><con:value>05165654165</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0311868886</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname2fg2xs</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname2fg2xs</con:value></con:property></con:properties></con:testCase><con:testCase id="c423cafc-a90d-4492-807d-30ea47b21bf2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17 - To Verify, blank phoneNumber can be saved" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ce2a0324-a205-4a40-9601-979f6e59a907"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJvN3g0Z0xmbjZ1ZkxadWx1c29sRStqR2R5cW8wWDFYQTRyNGpUVDI0VkxzUThPN2ZRZFB6VDlzZFhhNENLMklaMGNFdm1zTnNOTUFMbkIza0M1cEVkaVFlVDVVU1FUQjY2UEp2Wk81MW5VaWJnVHVxYzFWREJWMjh4cEM3VkVyUStIVVZaUHVjZzNpMUc3aDBibmUzejRVbmRBMTNVY1V0a2YxWFEvaFB6VlFxT2V5MDE3eG5DYVYyOFRuWW94bDkiLCJleHAiOjE3MzgzMDI0NDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.QX-zJENkZawdkWCBqwI9Dd8vuAs_rGNfaOupE8oP9Hg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="784a7dcc-84bb-43b8-a4cd-a9e7111c065b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
//def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
//Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
//context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0b1cb8c9-255f-40f7-af50-d053709c8bc3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": " "
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="087e049e-fbd0-48e0-95db-5fe64c8cb51d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8a92386d-d30c-45ea-b6d0-6c523a8173ab"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wvSwDDUp</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameuq37Hp</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9c0f5e9a-65d3-452e-8a28-775f2aa08768</con:value></con:property><con:property><con:name>email</con:name><con:value>uq37Hp@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extiduq37Hp</con:value></con:property><con:property><con:name>Work</con:name><con:value>13820910052</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7698524729</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameuq37Hp</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameuq37Hp</con:value></con:property></con:properties></con:testCase><con:testCase id="eb0bc195-627a-4e56-96b2-a98eb31cd374" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18 - To Verify, blank/Invalid 'type' for phoneNumbers field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8b52750c-c822-4afe-bb17-a8dca1cd7d9e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJHR3ZST09BS1NrMnl6dXloazNMMmw1WG9mMEUyUDBWRVM2M1lsQXAxekFrbHFla0pPblg0dkVFL3VraFNLMXlVZVRmWDgvNTNzREg5NEdQeXl2MUpSNDNkYTFkcWZQSFpGckwrQTVoVXNoTkJ3MWZ0RXdqRk03aXRhU3N6VXlKRXhSVVpuQnFOd3NPOGZtdEJaS3RoVFVhNnhUYjMxTUpOcWc4bkdIQmVhNm9CY2JFOUx0dzVwZjQ5MXVLbDhMTGgiLCJleHAiOjE3MzgzMDI0NTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.viHhBUJp4yjn2N09bx68urz6dpIYeuK6z7or2WsI8K0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="917f46b1-a834-4da5-a0b2-f7f6473475c2"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f4502bc1-7c0f-4ab7-a9fa-d819505c3691"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestCase#Invalidtype}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="340b33ee-8858-49bd-b9c6-203cbcddb726"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7ee2d40d-ba9b-486d-a690-36e945779633"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WwNLV3T6</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName8l3etb</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7f0775bc-d23e-4fe0-94c1-563841708d5a</con:value></con:property><con:property><con:name>email</con:name><con:value>8l3etb@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid8l3etb</con:value></con:property><con:property><con:name>Work</con:name><con:value>05228990337</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3724495841</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname8l3etb</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname8l3etb</con:value></con:property><con:property><con:name>Invalidtype</con:name><con:value>Invalidtype</con:value></con:property></con:properties></con:testCase><con:testCase id="b985be6c-e052-4913-9548-9a637f72f877" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19 - To Verify ErrorMessage/Status Code, when 'primary' attribute as a string for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6ed06abc-ea58-45ed-9d3e-e97e05f6ffb2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJEWEcvYjdIelNlSXVlRElhbUFqMVgxOEV5QlkrWWlMcmp1YjhjS2NHUmI3YTJWVUczOENnM0Jka3VrWFIzUXFodGcxeUZzK2FkM0JqQjdTUjdJTllDRnVmZDByT2pzU1pvRnlXR0l2STN4dXAwbEhHcjFSb3NKQWdoNm5Qc0luYWRRTTI0M09icXdIMnRiZXJOSUxEVFhsT0hPZWZZeEZxK3Z4Tmw3a1BxVTE4NDRGMWp1cklXS2Q4TlRRb2ZXVEEiLCJleHAiOjE3MzgzMDI0NTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.nDBg89UIaB5CDIGzcstgtgfM0MYsVZw4FVV60DV54M0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3d0fde13-b72b-4d64-a25a-76a3e5f71305"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="dc829407-02f1-460a-85f4-af666c843ef2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": "${#TestCase#primary}",
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailDataType")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f865a079-1e55-47cf-81ee-a0e88cd6419d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>primary</con:name><con:value>Hello</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMpeds9</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMpeds9</con:value></con:property><con:property><con:name>Email</con:name><con:value>Mpeds9@xyz.com</con:value></con:property><con:property><con:name>Work</con:name><con:value>94399796769</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1065054646</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMpeds9</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMpeds9</con:value></con:property></con:properties></con:testCase><con:testCase id="958a6d16-f155-409f-8a8e-4b800d0dc880" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20 - To Verify ErrorMessage/Status Code, when 'primary' attribute as a string for phoneNumber field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7a1338a-391d-460f-9051-9d7922fa206a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBTFFIdUhlNU9ObW1RVmgrQ3RhY3dlUmM4Q2tVdUtkQlJyKzczMU4vRWRFSXM1ZmRNdkpZUjRLRzlRS01zeENSTkdIZDFrTDV6dXlxeTY4Q1lLcWFqdUwybDgrMStCVGpSSmxvcUYvRlFNSUpyc0NxSVo0UUh4aFEzRVdKUEFTbCtmamJOSXMzTEd6emJjd1lUSUduTUVJVHNjMStGeWFEMnU3UTZiZTl0MHFEeDZrNnFoMi9Zb3NwYjhMa1FZQVQiLCJleHAiOjE3MzgzMDI0NTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.x_V0omAn4npSMF63cRNpZo2Rko9wKTsNi2EOk1CEGEg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fd62b4eb-e0ba-4b24-a031-3ab6707f40d7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0b27c54c-9c73-4483-b19b-da0ecb710b2a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c47a0fb2-9cc6-41ba-8ecb-486d537c381c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType


//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="be6e8be8-ef25-4a3a-8fc3-d9fdbc62aa4c" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d54398e2-4497-4934-9ff9-51304f9b6e90" name="Contains"><con:configuration><token>Please provide a valid PhoneNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9e1a5dc1-76b3-46d6-8e93-87cc572149f3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_CX9Zf7vw</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamesUkYg7</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1767</con:value></con:property><con:property><con:name>email</con:name><con:value>sUkYg7@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidsUkYg7</con:value></con:property><con:property><con:name>Work</con:name><con:value>sUkYg7</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3225353724</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamesUkYg7</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamesUkYg7</con:value></con:property></con:properties></con:testCase><con:testCase id="2ee1d72c-814f-4aa9-a065-fd25c7fd1d47" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_21 - To Verify ErrorMessage/Status Code, when schema list is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7d095f50-5027-467b-a753-827fb9c91925"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJvdjBlZDNGL2Qzcm83T3dsbW9PT2M5MHN5VVE4NkRPNGhvOHFYd05uMi9wY0NjT25PMm0vNSt1R1h3Mm8ydTd2M205dis1U3NBK2U5dVBocy9wWno3K0swQ1ZCbTU1cEJDbWV3RnFSaGRER3FOS2dyUkp2QTFldjJyMi9SaWwyc1drNWhWY1JTNGpMRkpFL3IyOEtFMUhOOWFSdFdFN2JvYmlHdXkrR0NxbDJpZ04wZUpvb2ptWitsT0VxaDNTVHEiLCJleHAiOjE3MzgzMDI0NjEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.LIWmvtX0YjW757SdtrWmMg9kk8dbboCL0qHpFtQ66UY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="35e4a2c0-e3ef-4d48-a0a3-d0d3c8e882b7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f7351d56-9ebc-40e3-9a2e-2fa8427ffde7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c47a0fb2-9cc6-41ba-8ecb-486d537c381c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("SchemaListMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="be6e8be8-ef25-4a3a-8fc3-d9fdbc62aa4c" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d54398e2-4497-4934-9ff9-51304f9b6e90" name="Contains"><con:configuration><token>The Schemas field is required.</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e50ea421-d22c-4515-9162-c7356de9d1f3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_pPglqSKm</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameKDrJEO</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1767</con:value></con:property><con:property><con:name>email</con:name><con:value>KDrJEO@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidKDrJEO</con:value></con:property><con:property><con:name>Work</con:name><con:value>99486828281</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6111443701</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameKDrJEO</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameKDrJEO</con:value></con:property></con:properties></con:testCase><con:testCase id="238d8649-6f5f-48ac-8498-09a559937a6e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_22 - To Verify ErrorMessage/Status Code, when schema list is 'null' in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="cd3a1aa2-384f-4df4-8582-85db630a4f4b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJHcTlVaEhxRVQ2Y3ZYcDJvNlM5OWc4THluMGRMSlJrYW1jQ09jd3Nrb01uK2NzZzY0WlZNa0YxRnZhUnhuT211RktQY0Z0OXJFeUpuNDg2bExMc2I4OGN5L20zQm0rZ1E1Nk5sV1R4dHcwaFBMRm0yUngza1hnZkxrWTQvUDBVejNYb080dzBad3BzaXJjZ0xqNTFDSjdocWNqTVBvWFpVTW5JQ3FVbGNiYStrcEVkVHI5UVFWUmFCYlpYR0pWR3QiLCJleHAiOjE3MzgzMDI0NjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ZMI3oI3LN6vqlBDoQaj27UvTkpWzbTHpSRkbVbZKxL4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7d3d141f-4a56-44e9-a90b-5d12201c63b2"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5dabf766-b8f2-4bef-88fd-f596f949af01"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestCase#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c47a0fb2-9cc6-41ba-8ecb-486d537c381c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidSchemaList")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="be6e8be8-ef25-4a3a-8fc3-d9fdbc62aa4c" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d54398e2-4497-4934-9ff9-51304f9b6e90" name="Contains"><con:configuration><token>The field Schemas is invalid.</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="638e46c9-ed61-4ce8-846e-39ad492bf694"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_lH1Ev4aX</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamewF7GmZ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1767</con:value></con:property><con:property><con:name>email</con:name><con:value>wF7GmZ@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidwF7GmZ</con:value></con:property><con:property><con:name>Work</con:name><con:value>50028477232</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9013328679</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamewF7GmZ</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamewF7GmZ</con:value></con:property><con:property><con:name>schemas</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="781abe56-31ea-436b-a8d8-d623e191e81b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_23 - To Verify Create single SCIM user with userName with 100 characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e3202e17-785c-4d08-a078-9d779737a64f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5ZTltWFRsUDVoVTRoS214S1ZIUWdNZnIvRzgxdnFqU2lGdVk1TStZUUJlRmR5bFIwRXFtSEhiR0VTZHpTVHk4WlhVSDVZRTZwdFBLUE1keUlIZ2xEMElCMlNoN0tuTDNsaGtSZjZiYmZDK1pLdGhkdnZRNVFDWENCblFmdjFhckh1OEVjMjhxdm5SRmREdDE5REordmdEbmltSklMclJhQ2tTei8xZ25QZE81ZzdBYkJEbWJBeDlJUFhIRWx6cnMiLCJleHAiOjE3MzgzMDI0NjgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.yq5IYtmgmcduKOsrDMUGWDE4nkxcuyeJzqKBvQLgI68</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9daefcc7-05bc-4a0e-b80f-7e6eae72efdd"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
  def randomGen3 =RandomStringUtils.randomNumeric(100)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen3
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="84b09f74-e7bf-4d01-90d0-a35623b30243"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5a9199d8-7667-4478-a44c-331241bcae2f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cee337e2-bd08-49ce-9fa9-53142a0ef328"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_sp2Qf5VL</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName3689123861928718009836812578870138768236294679165889934262855740514223605429521587645572018079214528</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2dc03c7f-f66e-430c-b994-279bd797cac8</con:value></con:property><con:property><con:name>email</con:name><con:value>Vyz5K8@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidVyz5K8</con:value></con:property><con:property><con:name>Work</con:name><con:value>95858087636</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7077442809</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameVyz5K8</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameVyz5K8</con:value></con:property></con:properties></con:testCase><con:testCase id="24e1292f-8059-4d9c-a222-4b35aeb872f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_24 - To verify, SCIM user is created when active parameter not provided in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d9aa00f4-05c4-45dc-95e7-8c714ccf29af"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsZXFlWTZGRndOT3ZpUXgvamkyV0ZsekQ5Sk5XZGMraWZqdG1IODBpd0JHeWZHYzBoUXBHd28wSFRQSG1keGlUaVJhNGxUWFEycDFaYTJxZXNhdjBMaXJhNy9WZ3hRV2xUU0R1U21PVTF6ZTJPd3czWDJEYlJWR240Q2dkdmdkekJlZWRla1ZhT0pzZFdwZGhKZkZJVU84Z0FiSEpzT0Yvc3BBVVM5MUE1V0lBWVg3L29aaXk4LzFLd3l5K2Nmc1oiLCJleHAiOjE3MzgzMDI0NzIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.PQ7LO82_A41xdsK9UZ2pBqNqlowaaIGI9OQ8SqO-L7w</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3c865b52-14b2-400e-8096-9e36aad50706"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4e124deb-ccdb-472b-b6e0-43c8722f1de6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def active = jsonObject.active
assert active == true



//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="82aab0d3-4f5c-4f9b-a312-2b02dd422ded"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_SD5dk5z3</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameOvOf1O</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>04047190-7353-44c8-a6b3-7c0ef3538732</con:value></con:property><con:property><con:name>email</con:name><con:value>OvOf1O@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidOvOf1O</con:value></con:property><con:property><con:name>Work</con:name><con:value>86959728477</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4880095130</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameOvOf1O</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameOvOf1O</con:value></con:property></con:properties></con:testCase><con:testCase id="58869f15-422f-4de1-99ec-968da466e39d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_25 - To Verify response when no value is given for preferred language" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3d258453-0191-4455-9472-46b813a65d71"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJUVW1kMUJ0SHJWYUE4RW1FZzVza050OVNjQ2lyWWFuSVd4ZlUwbXRwUVNJSmptUmNiMkE5VW5DL1Q4Wk4vWWZOUkNXbWdQblJ3Zi9aU0Y1VTVIUlM0bG9Bb3gxMFBEUDUzY1lESmcwUUprMEJoSndBSE9PTnpjbjJia2FpQmNib0RMU2loZ3dqdVM2WXpPTmRyaW5MUm9QT0JXVEtQRVFFNlFjNzM4Z3JzcTQ9IiwiZXhwIjoxNzM4MzAyNDc1LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.d2__VVZJo1jW_5DWS9U0eoJ-sfExgrX5YlPoUKIsWCk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7276bc99-2b63-4d88-93a5-872de263c2bc"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="be707a27-a32e-4a2a-ba9b-6736d505b5e7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": " ",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def active = jsonObject.active
assert active == true



//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter



//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="04e9b820-a01d-4522-a938-f231196f3b4c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7c62f6b1-9668-47e3-a850-d23d9ef09cec"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_PZl6TJUE</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameqMyMoC</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>30722385-5027-453a-95c8-31b5c92f021b</con:value></con:property><con:property><con:name>email</con:name><con:value>qMyMoC@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidqMyMoC</con:value></con:property><con:property><con:name>Work</con:name><con:value>85290439357</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7923848102</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameqMyMoC</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameqMyMoC</con:value></con:property></con:properties></con:testCase><con:testCase id="9c062441-6e1c-418d-8e39-adcf69ac6281" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_26 - To Verify response when no value is given for location" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e19273b4-5429-47f3-960f-00c59c2eecc9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJPYW1haERORmNaV1JKMXc4MENhME9QK0VvWUZxOEpiV3BtTmNRaFpwSVNRNUZidGdCYjN5K0theHpZSjF6WThXTXFJYTV2RXFTNnRjVHRRMTR2R1hUa1hjQS82OFdPQU5ORUY5VGx1QjFzd3JRUjlFUGtxTjB3cVZuTlVhQlhxek9GQlo0K0JPZVpsc2x3L1VtdUd6YWRoVWNMS3JqM29jQVNjMnpDSWhaWGZKYm42ZjRnWDRaQkdleHlKang4MDkiLCJleHAiOjE3MzgzMDI0NzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.1n5rHG4iwoGMoMUthsh68TRoG7BmtMeN7ODL55DNXhw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cac18d00-f9f8-4a84-b202-ac5bd59e3720"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="9b2b5d93-f036-4f7d-8ee6-caa628e979a8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": " "
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
//assert locality == [null] 

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bf6f8f7e-5f88-4f6f-a830-462267e599d8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="959a1fb3-aba6-4b01-8359-29757f3d4a63"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_IV3vxxzY</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameOM8sNz</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b78f077a-cbfb-4c81-930e-cf1d562452cd</con:value></con:property><con:property><con:name>email</con:name><con:value>OM8sNz@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidOM8sNz</con:value></con:property><con:property><con:name>Work</con:name><con:value>32298384023</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0047733979</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameOM8sNz</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameOM8sNz</con:value></con:property></con:properties></con:testCase><con:testCase id="6478be49-f0e3-4885-b0e2-26977d977ae2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_27 - To Verify response when no value is given for Country" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="336edca9-6e5e-4013-9edc-f6722aaef494"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ0WWdCZzBRSzNWRTJER29UN3p1Tm1CR3c2NDhCVk8zRWZQZEJwKzBzb3VuSmVwV0lHaU41a3ZLWXBjV2lxREtPMkM3MVRMUzc5ejBKYUlaT1UxM1dtaGh1VTRNMVFVaGprL2FnRmJDQmQxVjF4dGNMbHRvZnJwVFFqSlFhTVNJOW5EK3JnNEIvTW51R1BaTXI2bmxsQnhJUFdraHVWa3VRcFI3Rm4xbGpMMENNNmxlQ1I0bmlPV0xXdjArM1E5VmMiLCJleHAiOjE3MzgzMDI0ODIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.uliq6A9Rg6W49lqjems5nhWQxZ6gmTOv95WVwNulAbQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2fe1fea8-1457-48f8-a784-0caea1871cf1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f01774b3-6c28-4b03-ab74-9117c7e83445"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="57d7f4c1-fadd-4ad8-bee5-bf1bbcf9ec1f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="959bcfa6-d8fa-49e9-beba-dbc3fd87ceda"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_sWcIv0cQ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameuO61uP</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>10de6c00-49b5-48e2-8e15-d74773bb68ec</con:value></con:property><con:property><con:name>email</con:name><con:value>uO61uP@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>fr-FR</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extiduO61uP</con:value></con:property><con:property><con:name>Work</con:name><con:value>49029215112</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4405875348</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameuO61uP</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameuO61uP</con:value></con:property></con:properties></con:testCase><con:testCase id="eb65c20b-123f-4219-9668-c61eff36a5c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_28- To Verify response when null or no value is given for Department" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8cdc0c42-3326-47a5-9012-27604a359801"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJlS2tnQkJNeVVqYjgzNUhoNldRRWpWWnkvRmh1TDBjd1BxRnQxTUcyZktHU2YyeXJISjZMd2dWWmp6TDdKUWhnSmtoUXc5L3FJNXhyZmZZdGIvSytOMGJ3RjFyQ1lFeXl3aGJ1UTc4c2tGeDJjZUN5eFh4SFFWeXJXaXZUSExZRnpmUkpuY2FzMUoyTWFGUGJubzQ3eUpNUUFtUjdHY3dIODhBN1ltWkFtSkVNanROQjFQdENMVDVPSGROd21CYXQiLCJleHAiOjE3MzgzMDI0ODUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.qFTy_1hayRv2Q59H8AYlYteuXn-f0_U2HSiSwTWOUho</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c4f62547-5db6-422f-b86a-e0bb7cc77d1b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5d248dd0-2b87-4c69-971a-0bcb6c2e0095"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "null",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="f9d144ef-3d7e-403a-a557-476a06e0a64d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="06ecc3eb-e869-462c-bd3d-db41cc2bdc08"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mPstu1K6</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName9P7mS9</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2bfb12f9-59cf-45e1-bc84-6731fb113d01</con:value></con:property><con:property><con:name>email</con:name><con:value>9P7mS9@xyz.com</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid9P7mS9</con:value></con:property><con:property><con:name>Work</con:name><con:value>26056207352</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7515411453</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname9P7mS9</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname9P7mS9</con:value></con:property></con:properties></con:testCase><con:testCase id="6fcfe935-fe22-4283-9a62-9f017898a921" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_29 - To Verify response when null or no value is given for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9499fba6-4b75-4142-85b8-d0e287db3ceb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsY1NGOTRodzFmbk9NS1dRbGNmalJsRUV0UU9UaythelpQMkVYMFd3TmhwRVlObHZLdEtpOFR0Q3hGdlF5TXN1YjMxdHkvL3Rzd0luWXpsV2pNOVMzbmw3NXhzbjhEUHo5bnVDdkM1eDEvVnFKUkZhUmhFVGJiUnhPOEFiYVZjUUVjMDRMRlRPUllIUGw1dVhLckJDVmszc2crYlhqWWRzd0FRVHZhQnRWb1VDcktEZXBrNTNTakxXZjllNGdTUVkiLCJleHAiOjE3MzgzMDI0ODksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.PuCQpD4avDDkiSvT1p8VlAHtv6fPIwFX7HK_nMZHJBs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3e4741e7-8c07-4168-a5a1-fbf3f8378fea"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="141fe911-e017-43f8-9ab3-d56c5cbe950a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}",
        "costCenter": ""
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bbb37d8a-48c0-4adc-ba2f-5640fa8f5fdb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="157e1e29-d359-416e-a868-7464105e23ac"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_niLVvJZY</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamee8kzcV</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>bc2926ff-bc0a-40d8-8a3b-8f46abec93cb</con:value></con:property><con:property><con:name>email</con:name><con:value>e8kzcV@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extide8kzcV</con:value></con:property><con:property><con:name>Work</con:name><con:value>56262844248</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0210566869</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamee8kzcV</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamee8kzcV</con:value></con:property></con:properties></con:testCase><con:testCase id="ed4a2c99-8324-4627-b77f-133034c54e96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_30 - To Verify response when preferred language parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f52e01ad-e2d9-4e17-b80f-dd20099aa7f2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhaEZpMDNqSGY2aldMdGYvWktQTmgrVHZGbTc1ckdTV2gzUDZTdTNqUFVhTmZsODRZc3R6cThRdHRCY0hLdXkvTnIzeTI3RExnWWlNTXk3dWZYVlFxMkFoQWlaNWd1TEVYOEN1blkyaGN1ZVQzM3EyN3RrRUZHTXVtUzlkKzd0U0N0eU1vUFBtM2MrdmplUjdsVlp6elo2NkZFTE9oSVp4UGduUXRjVzZ0bmFXSXZhZzNKMi9nTVllcW9qNDdobEoiLCJleHAiOjE3MzgzMDI0OTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Ybczs9af1BJKFBRfwSq-AI-nSE6JoHFBSbQp0b2f_EA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f9dfaf7f-f6e8-4bb0-ad88-d890e5c605a0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e823e987-9661-4d06-a4d9-942a9d4c99ac"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
   
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bebfb69d-4e8e-4897-8fa4-0689c8f7047b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="75b06845-8f7c-4630-9cf3-645c92e99447"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_qBB5C08O</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamefZPUq0</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>40b99f89-20a7-4370-8554-32245bfb9b69</con:value></con:property><con:property><con:name>email</con:name><con:value>fZPUq0@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidfZPUq0</con:value></con:property><con:property><con:name>Work</con:name><con:value>55883283071</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8986085994</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamefZPUq0</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamefZPUq0</con:value></con:property></con:properties></con:testCase><con:testCase id="5f8d95a0-0eff-4f60-b9f1-fa06a7e2fd5d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_31- To Verify response when Country parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0a87b723-d57d-4205-b9fd-cdf28fc0ada4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ2eFgzTXRUQnp1NkZvcVhnYng1N1JsZHk4MVlYTkhsNDNZWFdMMWZPSVE3dmVnOXpsNUx0N2ViTHUyTkpKaGJYZkk2QXhUZGxvZmx3bWRLeDROb055SElLN2RVbTd1Q3VOamx6eDJ5bU5tMW13S09uNmpYdFB4Y1FpNnN5b3pKdHFkM1I2cm9UTDdVS0EwcklmT1FPcXZ0VjU3YWx1TEZMSm45Q2ZNN2M3YzQ9IiwiZXhwIjoxNzM4MzAyNTAyLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.v2n_D-qwinA_A-PyfvY5jLuRTFWab6MEgtKxVAaeNRU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="34f344c9-2cfc-4f6f-bcfa-00c67ee480ec"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="49d330ca-4096-4511-bd6e-b3522560dec6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country ==[null]
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="2f9ee470-0f29-42c8-9b7d-dbdda2503c44"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="269b5acc-68f3-47f9-804f-ae29f56b302d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_MYB0k8AS</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName0LX1Bg</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>004b2c9f-d13d-42ef-bb2e-03a43b2a72c5</con:value></con:property><con:property><con:name>email</con:name><con:value>0LX1Bg@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid0LX1Bg</con:value></con:property><con:property><con:name>Work</con:name><con:value>49856723234</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9698311824</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname0LX1Bg</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname0LX1Bg</con:value></con:property></con:properties></con:testCase><con:testCase id="8a4db617-b90f-4bd9-8a46-bd5d776322a2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_32- To Verify response when location parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d9a300d2-4d65-4b34-a520-135af85c0cbe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtR3pUTk1zbEpwNUc2YVgvNGdTWmg3VmxLbmc3QzUyWWdVbDh1eXFOQzBIOS92RWhYSWRyU0pwb3NJOHhJK0FuTFhEcWgwMXFabUFwR0VPZFhuUHhNWkVFZHNEUjFwL0h5cllyQVRySWo0S1JtMkovWlo2SVhUSk9hNjBUZUVaaXhhczF1eEErNzhZdWJOTTRLVTc5MTNheDVmdmZOQ1FzVG1PV29QZDYvNDNNUWhlYlhUZjVpcGcvd29KN2RoZGQiLCJleHAiOjE3MzgzMDI1MDUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.JtH0B6O1fITzDQeCqc6nddgzB-ZuAT7FByC-TCQPR68</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="24d16641-a3a0-4661-b75b-ec2ae56f933a"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="25316df4-506c-4e61-b54a-5f27c407f78f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality == [null]




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="1ef33c84-a4e0-436e-9903-fb92a0cff982"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c10a1c06-e68e-4d94-a78e-084711c363a4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_DCxUZvgU</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameZ1R7Lb</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8965dce9-6587-4fb7-9a5e-b6646e4c3272</con:value></con:property><con:property><con:name>email</con:name><con:value>Z1R7Lb@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>hu-HU</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidZ1R7Lb</con:value></con:property><con:property><con:name>Work</con:name><con:value>47869782690</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8301506590</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameZ1R7Lb</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameZ1R7Lb</con:value></con:property></con:properties></con:testCase><con:testCase id="74b1c7c6-18ad-4cef-ac0c-c50f6752ea68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_33- To Verify response when Department parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3d1f64b7-9867-4a94-be22-c78bdfbcc186"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJGSHpiamp5V2VVUlV5bkdObU55dy8yMGlQUjkrRVltWWRZc2NCYUZheitqcUZLQWNIN1hrSi9FczJ5NUkrYjRIMnZtWmdsRG1aUW5NV0FkSjAxVEJsOXVsSEpuK2EyeG5sR2FxSkpkVFdYQzArdTkvR0ZuVjUwNmNWbEcxQWh2cytXYWx0bUNXRTN5WkVkQzd6bmUycktqMzRVTFczZytSZWFicW85VE9LTUw5TUNHWkZMSFhGYlJqR1pNOC82VmwiLCJleHAiOjE3MzgzMDI1MDksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.h-aFA354VkU5FmgZZhOmSAS_yXFRZRzSAvMbDJDS7Rs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cfccef24-ff35-4df9-bc1d-059b6f1f973b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="7db50fd1-ea11-488d-a0f2-6b562983d186"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="65c550c0-bc3f-46ff-a152-21ea5693acc0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="170c1afe-530e-4d68-90cc-1e3886f0b169"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_LSHS9n53</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamel0xJOQ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>a17e5f36-603d-4234-93eb-4c27c133f101</con:value></con:property><con:property><con:name>email</con:name><con:value>l0xJOQ@xyz.com</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidl0xJOQ</con:value></con:property><con:property><con:name>Work</con:name><con:value>40668582295</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3882269131</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamel0xJOQ</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamel0xJOQ</con:value></con:property></con:properties></con:testCase><con:testCase id="9c7f59ad-5475-4106-b8ae-f03ec3be6287" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_34 - To Verify response when no parameter is given for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3a25f788-7d14-40fd-88e3-fc951b6f4dbe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJIcm9td0N0SlBYdVFSenR0ekRjQk9FMXlCeng4WThYdWN3NjlkelJETXhQTnVaU1ltMFFlT1IzOG5GMlVUN3ZOYi9pdndKS1A0bWN4ckJaOWJxMS9MMFVJc0tvMkZaSE9RZm1sWHNYck40TXNvSHQzbzI5NEI4OHU4K2l6QkNSUDI2MzVBMkpwcERMTVllNVhkRjNMYm9PbmVqS1M0WFNtTVdHMXErdGMrOUY0dnNuMDZIblFDTDRPa0JtOVRITDQiLCJleHAiOjE3MzgzMDI1MTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.FafY384fpm_-R6-4nRVbFBiT04UpdhC94Wo-6wz_FNw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1c34f566-c5ca-475b-869b-a7ee55169683"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c22e892f-6532-4ebd-8970-d536e5e4b75b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}"
        
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
//Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//
//assert ActualcostCenter == null

//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c45eb486-5761-463a-a63a-5b5d0d58d3de"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e37046e6-edba-4db9-93ab-6f0635a6a436"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_jy1aPJUm</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameRUXEEG</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0cc48878-a748-45c7-9bdd-01f30b41d7d6</con:value></con:property><con:property><con:name>email</con:name><con:value>RUXEEG@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>Language</con:name><con:value>nl-NL</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidRUXEEG</con:value></con:property><con:property><con:name>Work</con:name><con:value>67743040948</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1070329270</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameRUXEEG</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameRUXEEG</con:value></con:property></con:properties></con:testCase><con:testCase id="137f3725-76c8-4706-b90a-941cb41f2532" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_35 - To Verify response when no attributes are given under addresses" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="65577801-f5da-4e05-a36a-b8a4ed72d9ef"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJMdTFKeTZlSkxHLzBtUWhybWZNYVUzd1pwa1ZZMnpSZzRPaysyYThaVlRVNGZ2UUpHbVhScFJPVDBBcVhXeklYZGt1b093emc0VVVyRlBZcVNmTjZqVThwNjhJUEJzSzNZcEFkWFVNTlJGRmtGaXp6Ym9wS21lS3lnaUYrMnFPYVhNWmZORmhJNGlvY05yUk0vT0orK3R0RjdHZVFSc05BRmpPNlZteTY3OTF4LzJvSGpDbm83NzJsY1hCMXdObXciLCJleHAiOjE3MzgzMDI1MTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.YuuRHmhIYagzlqQpZUvEqj0XlwwpMjo4t2pwwInw3Z0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cdc4eb9f-1cc7-4c3b-a5e8-0a3e86f2e536"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="54e9c7f7-dc9a-4136-a81d-ccd5fbe06804"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}"
        
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
//Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//
//assert ActualcostCenter == null

//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="ac3adfbe-0686-4ece-a2ec-1a13cf4e1242"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="be1efcd1-80ab-4e05-9f21-a8f8aac815c0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7Uzcg7uJ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamegWgIR6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1c7957da-4bc9-4dfa-b0ae-7232a622240e</con:value></con:property><con:property><con:name>email</con:name><con:value>gWgIR6@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidgWgIR6</con:value></con:property><con:property><con:name>Work</con:name><con:value>40205965322</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6653451541</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamegWgIR6</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamegWgIR6</con:value></con:property></con:properties></con:testCase><con:testCase id="f3aafd00-6e1a-4cbd-8f0c-10c8a83d9207" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_36- To Verify response when no attributes are given under extension schemas" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e737d21e-db2e-4730-bfed-2e0d17abffb5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJiVHRXditZMXRFdit2Smh3SmNsL1pOVEVDKysrNGVRNDhTbkNWS1cwZmJVa2lJRGZtdm5GdlNjZTRBRlJFeWVrOUZJajJCUEQ1UTZvQ3c0L1JIbzloSWY4OGlmMThLZ3FZUTZFMzJSTjZaK2pXZm1WTngrbHRnVDQ3MnE3R3k1M3lmQXdOdXNiWXlGYWVKYkNydFUweDZQajd4UnJRTGQ1ZUt3QzJkZ3ZmaHE0NFpGYzBBYWdGdXB1WmhrWWJicmciLCJleHAiOjE3MzgzMDI1MjIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.TdPXNZNEWxVt5QAu8PYAKvgeGLQixOv3gxfHYlM4jis</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e283f728-e557-4f45-854c-dee9f22959a6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="d7286e97-6664-4385-ac41-af0a3e1dc3bc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
//Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//
//assert ActualcostCenter == null

//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="54cb7062-8b79-45ed-9da1-436d985ea722"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b869a10e-8818-45e2-9cc8-ab30fb9eb73e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_VicZEoSX</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName9J1RNU</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c0a0fbfe-9740-4db5-aeaa-e66f30b369a6</con:value></con:property><con:property><con:name>email</con:name><con:value>9J1RNU@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid9J1RNU</con:value></con:property><con:property><con:name>Work</con:name><con:value>19070207155</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>5020785896</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname9J1RNU</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname9J1RNU</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>activeFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>typeCellular</con:name><con:value>Cellular</con:value></con:property><con:property><con:name>typeCell</con:name><con:value>cell</con:value></con:property></con:properties></con:testSuite><con:testSuite id="4318299a-a373-456a-bfaf-b519b5446432" name="UpdateSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2ae2f313-8fd7-48eb-827c-ec23ef19c69b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify by updating users emails attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="fe605e60-11f3-4cff-960e-cec5a84a98a9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJOcWJRbWVnSUpqcGRqbHplSzhsM0pOVXhaZDZJejRJc0dqb1ZHV01sdGwwemRVZm0rNUhseVJnelpDdGdjeG90WDdLTGNENFEwVUgzYnZVODBEM0I0c1lOQW95MDlUaU9JRzIvUnlWVmh0VklGQ016d09jM0Vuc1p4VEtiVDU1dy9FYUx2eU1PNmViUkxpSEZxOWdLdkt0d0JTQ2dLT2ZsM1gwMDJYUWNCejg9IiwiZXhwIjoxNzM4MzAyNTQzLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.X80Ajg2etwIcfOx8dPP-m0X2GA_eO0uaqOssbJIB5Hw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0a0be016-8565-4df3-a192-47dccb08abaa"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

//def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

//UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="eec0663b-05bc-46d7-8448-0bbc7b1e59fa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="e7b34e06-ae41-49d9-8819-dde29dccb5d5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#UpdatedEmail}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber



//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a3492415-235f-4e17-9db4-84a9679c36de"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_T4M01wuF</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName8Cf42E</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8d74ae93-1151-4bdf-ac4c-59a34821d07f</con:value></con:property><con:property><con:name>email</con:name><con:value>Updated8Cf42E8Cf42E@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid8Cf42E</con:value></con:property><con:property><con:name>Work</con:name><con:value>55149832044</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8723135593</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname8Cf42E</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname8Cf42E</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>Updated8Cf42E8Cf42E@xyz.com</con:value></con:property></con:properties></con:testCase><con:testCase id="26e554a3-f39c-4f3b-b919-cc95a230324c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To verify, SCIM user is updated when active parameter not provided in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="acab4407-cfdc-4bc6-9f60-7aac95bcb6d3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ4Unl5U214eVJXZUlkSXN5YUtSQ3lHbEQyMVZnZnNId1BEaWZDbTl4cSs0eUR1TGswSHFsV2ZXSGJ3bDdmSkVOek1xSEVaUlNHUnZDdUQ5ZUl1SlkxcGRKL2Y1V1drVlVNSWd6WVkyNzJWWm5DaU0wVGJnL2ZyMmRwc2JzWmRCbDZTRHl0UzhERXhoUWthUEhBd0JKNHh6UnRPRGczKzlrRC9OcDFEbk14cmxSWHBia0xUWW5YRlNXMzdtLytsaUgiLCJleHAiOjE3MzgzMDI1NDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.fr6gzQUYQeutst2REXmJDhfBY5CjsAZcK91tAPClIoI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fdeff7b7-f552-4904-abb8-e6e15b47c713"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

//def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

//UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="2a0f06a8-0c91-4304-9910-176e4690416b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="12811fbe-3521-407c-a6bf-e8fac434c19f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
   
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#UpdatedEmail}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
//
//// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//
////Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId
//
context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

////Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")
log.info ExpectedStatusCode

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request
//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber



//String inputPhoneNumber = "1234567890";
//String number = inputPhoneNumber.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info "number"


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="14951568-5de0-4772-9325-c068cb4c48dc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extidBY7eQY</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameBY7eQY</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1defd360-42e5-4cd8-9d4b-a2e49df4f067</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdatedBY7eQYBY7eQY@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidBY7eQY</con:value></con:property><con:property><con:name>Work</con:name><con:value>76966030510</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0600386188</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameBY7eQY</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameBY7eQY</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>UpdatedBY7eQYBY7eQY@xyz.com</con:value></con:property></con:properties></con:testCase><con:testCase id="4746ff75-c856-45ae-98c1-661fc58bd4d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify by updating users first name attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7df922f1-c721-4579-bd76-dcb9b3fbb5ea"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKWVplVG1RSXZ4anlCaUQ0UG5KVXN3aW5zTWJnOWF1cEw2MFFSUFpDY0VCVDdhdFFHc3dKZHowVDQ4b004Q0lhc3lYU2t0MENDS2h3N040blNXZW5lNGhVSjN6eVRRSHBXMlhmN0dSeTVFK2xTK3c0ZmVXY2ZlbVlEOUM1Kzd1Qkx6Wm5VM29UK0lpNkpsb0ZadmlxaCt4cVgzYnFJOTJFTzBzSkdMTVNqOFhUUFJvVTdCM0xMSFpEelJ1dVM1YkIiLCJleHAiOjE3MzgzMDI1NTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.i04YO8nwSwHI3MfSrF-lF8dNnKkeB2LWg-cNlqa2WMs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="ae942f8a-fc0f-4bbe-b130-7656834bf25d"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

//def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

//UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName=UpdatedGivenName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="40dfa54c-35f8-4680-a95d-43b51802765c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="7a5a4f9c-66db-4107-9f40-028b86a5833e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
   
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#UpdatedGivenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

//String inputPhoneNumber = "1234567890";
//String number = inputPhoneNumber.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5f76cd78-1446-4e0b-8d51-7c6e2c327309"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_rXo0rTLZ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamexG0TZs</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ce011b70-74bb-471d-aae6-4bbb62853260</con:value></con:property><con:property><con:name>email</con:name><con:value>xG0TZs@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidxG0TZs</con:value></con:property><con:property><con:name>Work</con:name><con:value>11212625935</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0161228974</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamexG0TZs</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamexG0TZs</con:value></con:property><con:property><con:name>UpdatedGivenName</con:name><con:value>updatedNamexG0TZs</con:value></con:property></con:properties></con:testCase><con:testCase id="da6aa803-947d-442e-ad29-5e250d34e073" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify by updating users last name attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7cef1ad5-d570-4179-b45c-ba50dfa71998"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJMN05CNGZyb2xraFBlMWFKVmRseXpWSlUwVjBvNmxIQXdnWnYyOGRmUWxZa3B1bDhjYlFNQWVLVzN3TTUzRGo3VFoxZkRpcjYzS2ZUTUw2TGFHaG5CTFltMUsva0RNaHlERVNpT2p5R3lvdW12akhOR1lmSkpBUXJTekVoRXZlMm84cm1TWU5GSTJOM1ArVzVIL2JqdEdwU0FFVVdQZWc3Q2tyd1VDSGY1cDg9IiwiZXhwIjoxNzM4MzAyNTU1LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.rmqCGS4X5fXgnLwLVSXO15nK5-Cx_NSEytVzGVdKdUk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e0be2a00-2bc3-419d-a0af-ecc37f026bd0"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdatedfamilyName=UpdatedfamilyName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="89fdd31f-3c7c-4a23-a198-222419ce4338"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="024897a5-e52c-43b1-bb0c-bb06ab1aca28"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
   
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#UpdatedfamilyName}",
            "givenName": "${#TestCase#GivenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="54549304-ca8f-4a6e-99e6-ee058d874829"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_529k8nsU</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamen2ytho</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e0ccc29d-a686-418d-86fd-99082697801c</con:value></con:property><con:property><con:name>email</con:name><con:value>n2ytho@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidn2ytho</con:value></con:property><con:property><con:name>Work</con:name><con:value>33606021767</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>5419708788</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamen2ytho</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamen2ytho</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUpn2ytho</con:value></con:property></con:properties></con:testCase><con:testCase id="5d920e23-877f-4165-ad01-9f15b3e32283" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To Verify by updating users Telephone no attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c3c5660c-2df1-4aad-aa2b-94d1197180fc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJjcDNUbzNOWFJGYkhaUXdxRVFrSzZiMlQySHh1SUNxdGRDM1dHSFp6enY5SitIV2lUbnRNTnhoL285SXBXU09NWm1tSTJkTnFHbUowaGM1b2dzaUFSblV0eFptTndBMkg1Z0c5cWcyYUVPL0ZCK01DbGZyQkFuZnZpU2o3WktYZ0QvakJDeUhhVjk1dFJZbjhpazRkNU0ycmp5eldCMXY1Y3ZLMXphRDN3VFpzR0U0dHljRXJkZ3l4ZDBIS0VYaVIiLCJleHAiOjE3MzgzMDI1NTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.qNQ8OPE0KB9bW2L8zObSVgGNActTC6xgN1IMcAp94CI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e8304397-2bab-4dd1-8901-3fe7578f7f4a"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdatedWork1 = context.expand('${#TestSuite#UpdatedWork1}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdatedWork1=UpdatedWork1 + randomGen1

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdatedWork1",UpdatedWork1)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="254e8b21-2f45-4f40-8fdb-e1527548ad96"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="de241910-bcf0-4ab1-8b6b-aacb5de5dedb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
   
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#UpdatedWork1}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#GivenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="15058300-fb06-4c7a-80e4-7fc006d27ad1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_YwxKUrrv</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamecZVOtC</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9d632384-bed6-4609-a542-7a67037f9bb7</con:value></con:property><con:property><con:name>email</con:name><con:value>cZVOtC@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidcZVOtC</con:value></con:property><con:property><con:name>Work</con:name><con:value>02567206030</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3719310442</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamecZVOtC</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamecZVOtC</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>013719310442</con:value></con:property></con:properties></con:testCase><con:testCase id="cfa6911a-8e35-416d-a11e-725b9592ccae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To Verify by updating users Mobile no attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d7b90976-99c2-48a6-9c12-6b8578aadde2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJldVFqVmlGcmh4SUhhMk5hNm9sY0RDK21FZ2pJa255SEdRSzMwKzlHUm11dW52TExNazRlTkQzMXFRdXRDOWNTaHBCMTIvaTBVZUNnT2VuWTFBbUY5TmxVVHJxQlJNOUxaM1FjbGsybklZdnJPVGlHU3Z5OXlHR0cydndER01nNWV3U0JCTCtoVjJvcWRVQkdBb2g5MTNObFFXbXpYbWJaT2xXMGpQMjBxRDNOTWxNZ0RFQ0xlZEt5bGdVa0EvS0ciLCJleHAiOjE3MzgzMDI1NjMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.siVd_e6-oFbvM4IO1Wsn6AsGkI2jY5Cnj2_YBU_Kgf8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2e10dba5-fde9-4b48-916f-3a0812dadc58"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdatedMobile1 = context.expand('${#TestSuite#UpdatedMobile1}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdatedMobile1=UpdatedMobile1 + randomGen2

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdatedMobile1",UpdatedMobile1)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="8399d346-94d4-4220-a15a-bef645997452"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="302249d0-fd07-4504-b0f0-27f81afc09df"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#UpdatedMobile1}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request
//
//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0e359c3d-a55f-43f4-b22f-dad513c174e3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_eZoMDqVu</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameCXNU5V</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>13589811-3f6c-45d4-b9d5-66ed16690ca3</con:value></con:property><con:property><con:name>email</con:name><con:value>CXNU5V@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidCXNU5V</con:value></con:property><con:property><con:name>Work</con:name><con:value>08513877397</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4165649012</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameCXNU5V</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameCXNU5V</con:value></con:property><con:property><con:name>UpdatedMobile1</con:name><con:value>8908513877397</con:value></con:property></con:properties></con:testCase><con:testCase id="a9cf62b1-cce3-489b-882f-4bba435f0b89" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To Verify by updating all the Users attributes" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="de3a45d1-aa10-4d08-8ea6-2ac8c56b7ca4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRa0xBN3Y5TFkzM25UTHRLOGVzZHN2dnZJOVJMVysvRmc3TU80QnhVclV5MWw4YkliblpLekpieW9ZWDhQODUzUDBwSVNWVmJ4SEVTZVR0bEF6ZnhCcFRHYlRGTEo5MGM4TkZDKzZsazhTTU9YckN1VzNnNUF3RG1mZTB4MFdUMWFhemF6ZTg2Z3k5ZkRwOWRad20ydzJqaUZ6UW5GTTNrR2pRQVdLT0lDNmo2UTRqT3ZRclhSTkxrSUNaTFJqRlQiLCJleHAiOjE3MzgzMDI1NjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.KIT5zYe32TIONp2Dr8Ip9TGM1FbViOtj1s94DdIDSVU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="841a96ed-feae-4e82-a3b7-bbc5d90ae1a4"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="a1ac7140-b5f6-4741-a6d8-de564dfc918a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="7c67a401-90ee-4787-9618-54be412501af"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#UpdatedEmail}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#UpdatedWork}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#UpdatedMobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#UpdatedfamilyName}",
            "givenName": "${#TestCase#UpdatedGivenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1dbcc799-a70b-483b-bab8-ffc6fa4cdd42"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_PsBbksSn</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamepWSd5D</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>19c73706-f19a-4fe4-b4bd-f173fa69c30e</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdatedpWSd5DpWSd5D@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidpWSd5D</con:value></con:property><con:property><con:name>Work</con:name><con:value>1338300136</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>674164009</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamepWSd5D</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamepWSd5D</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>674164009</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>1338300136</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUppWSd5D</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>UpdatedpWSd5DpWSd5D@xyz.com</con:value></con:property><con:property><con:name>UpdatedGivenName</con:name><con:value>updatedNamepWSd5D</con:value></con:property></con:properties></con:testCase><con:testCase id="b8058a0f-162a-4345-8be1-498b6d0118fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08-Verify the response that Phone number and email with invalid type" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8311cf83-a54a-439b-b3cc-75332df67f34"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJoTTdrakdGdjZRUEZGd2xaelNtUVZtTTY3UnBIeVk0N1NtVXVsSUJBYmVRV2RRQkQ5NnA0MTB6Qy9BRGt3K3IyWlJzdlF1dDJZQ0JoMG5BUFZZVm1lcndwNTVHTTZPdWUxQmd6MlMyd2x3aWFPRG1qaURXYjZXUmxwU1N2WGsvelZPZi9sWWphNkoyRGovWStqMEtCaUs1NkVlT1U4b3YvMjByenVDVkNMbkJnNXNFbnh4dnB0YVM5VndPWjNhL3kiLCJleHAiOjE3MzgzMDI2ODAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ORCA7YnocsUAE3--BEMXRumChBbQ8bcJRB2dVzhkx6k</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2215b030-e5d3-46cf-b6b3-3f2af7bae701"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f5746c98-14a9-45b4-afae-3c7b9413254d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="a1ad8a83-7064-40c9-a1dd-c0eff9eceb2a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "type": "${#TestCase#InvalidEmailType}",
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestCase#InvalidType}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    },
	
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }     
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)



//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailSyntax")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a6f3e89c-7f8e-4051-9f8e-bd284e138732"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_tLg1jInd</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameOxo8cc</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>914bdd61-b01a-47b5-8995-53952ace679f</con:value></con:property><con:property><con:name>email</con:name><con:value>Oxo8cc@xyz.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property><con:property><con:name>updategroup</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property><con:property><con:name>updatefloor</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property><con:property><con:name>InvalidType</con:name><con:value>Test</con:value></con:property><con:property><con:name>InvalidEmailType</con:name><con:value>edit</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidOxo8cc</con:value></con:property><con:property><con:name>Work</con:name><con:value>35521670682</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1483203958</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameOxo8cc</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameOxo8cc</con:value></con:property></con:properties></con:testCase><con:testCase id="5d0e0970-38d3-4f8d-8598-d3038b26020b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09-PUT User | Verify the response that Phone number and email type is added" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2833f7f1-c35c-4c27-bd2b-b1e8fe7dc3da"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJqMG1sZjBxMitWd0YzdWNuZlFuWnNoM1c3U213TEF5WjBvUnZ0Vnp3SWgweU1LVzEzQmJJeVJrb2h1WjVFYW9UV2gwQ1ArSDlleEVxS0VYZ3RUdlorVnN1M1NIZDR5M1NmK0pDSjdiTzlQOEp1MzFncHBPdUczaFYxVkh1OU1UNGl3MytiSDRnWHZJb1RtRHlnakQ2MW9PVmxUb01YbmpqdDlweEJSekZTbWZUMUFCQTl1bkZGVVFwcG4xVytjY2QiLCJleHAiOjE3MzgzMDI1OTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.QhlNmRIW8KIY-hZfOWffgyqS3I_u90QC1xtrU5bYH8E</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6e2869b9-6823-4249-8129-b70d29c4703d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="16d506db-3561-4c5d-bd0f-9e8ae7f6ad90"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
           
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="9c61b18f-3424-4fa8-976e-96a51a4882e6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    },
	
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }     
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def ActualupdatedGroup = jsonObject.group
def ExpectedupdatedGroup = context.testCase.getPropertyValue("group")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d703fd63-cd0d-4f01-9499-37b19246bd92"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ciZITKNx</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName1ZtNmb</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>acb24c77-fa11-4c67-b08d-636fb23e508a</con:value></con:property><con:property><con:name>email</con:name><con:value>1ZtNmb@xyz.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property><con:property><con:name>updategroup</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property><con:property><con:name>updatefloor</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid1ZtNmb</con:value></con:property><con:property><con:name>Work</con:name><con:value>19887709005</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4229591041</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname1ZtNmb</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname1ZtNmb</con:value></con:property></con:properties></con:testCase><con:testCase id="ea601ad8-3c77-46f5-9d5b-8f03f8538eef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To verify that Username is not updated with special characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0eb7a311-8de9-4219-a175-3dc7cc5f0de3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIyQThvUm5SVGs4cGtINmVvUWdSNlRUNDY1N1NtNGR1d1BPclRXV2JEaTZWR01CM1ZwUnJua2laOTFOZW5JZGJOSDRCQXpESWEyU1dBdmIxcklMdFNWaFZFT0pMM0NVSFFMTjR5RURKSkVzaUo4R0F1dWpXV0RrdFNDWXY2ckFYZ05QSjNvL0V3citlMk1GdG5zN0NpZ2dGbGVpS2c4ZzYydTFiTFFtblhCSnl0anNyWlZQenM5eXVlWDhodkRWeVoiLCJleHAiOjE3MzgzMDI1OTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.HJtZJ4S550lSVzO0040DO8PjRYy6LPrqqWhiCwtPKBY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8eb2de09-3959-46da-9138-deb0fa4d5ee9"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdatedMobile1 = context.expand('${#TestSuite#UpdatedMobile1}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdatedMobile1=UpdatedMobile1 + randomGen2

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdatedMobile1",UpdatedMobile1)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="b0821f44-a162-4cc9-9dd3-fbd9521146dd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="4421d2fd-083a-437f-9ee8-3c78b65b26ae"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#UpdateduserName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)



//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.meta.resourceType
//def userLocation = jsonObject.meta.location
//assert resourceType == "User"

//Verify the Language for User
//def ActualuserName = jsonObject.userName
//def ExpecteduserName = context.testCase.getPropertyValue("userName1")
//assert ActualuserName == ExpecteduserName
//log.info ActualuserName


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="60324f25-112c-4fbe-942d-cd5a209e58c8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_51u0buhN</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameSz6i3X</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>50898ca2-124f-41ed-b6bc-8ff8f32f9d66</con:value></con:property><con:property><con:name>email</con:name><con:value>Sz6i3X@xyz.com</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_51u0buhN</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>Kanchan@123!</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidSz6i3X</con:value></con:property><con:property><con:name>Work</con:name><con:value>98229813654</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>5718904171</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameSz6i3X</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameSz6i3X</con:value></con:property></con:properties></con:testCase><con:testCase id="6d0d7d9d-f3f8-41d7-9741-cd014d17d54c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11-To verify that user is deleted after updating Username" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="dcf441b7-79fe-40ac-92a6-a22fc52cbbeb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJXL0N6RUxLdFA2cDVRd3pKa3ZHUmVpM0xwSHQ0d29kNHdodDJyQVVMbmUycmxJaDB1TVdOend0UHJDczlZTXVtaWF3c0FRTmgxVHE5Njh3a3doWm85Nk5JUTA3UkRWOHBDSytyMys2V2JFK3E2cUN6dm43K2JPdmdKVitQbmcxZmNZalhwYVZLV000ZFMyT2Jzcm1ia21RQUxCTExEaFZnZTh6ZXFLdjlOQlJzeWd5Z1VRTGw4YUViU3BjSXp1MkMiLCJleHAiOjE3MzgzMDI1OTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Ga5XTgZ1b_1IvMNJZ0PGYofGYsc3uALCAStXcQxSktA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8bcaaf3c-0a72-4ea0-adf8-9375fa16aeb4"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="446beab7-1c8f-4a13-9fbe-0d72a10811a3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="58aa8272-5da3-4826-9463-46440742fc75"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#UpdateduserName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

//Verify the Language for User
def ActualuserName = jsonObject.userName
def ExpecteduserName = context.testCase.getPropertyValue("UpdateduserName")
assert ActualuserName == ExpecteduserName
log.info ActualuserName

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="b6020653-96c2-46d1-b435-4667ffca1d2a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="38455655-faa8-4ba5-8bd1-b3d6c52378ae"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WJKfpGe9</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamefJTBn9</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8d0daf1d-2f49-449c-81dd-58731c975a5e</con:value></con:property><con:property><con:name>email</con:name><con:value>fJTBn9@xyz.com</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_WJKfpGe9</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKfJTBn9</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidfJTBn9</con:value></con:property><con:property><con:name>Work</con:name><con:value>62420304505</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2291442187</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamefJTBn9</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamefJTBn9</con:value></con:property></con:properties></con:testCase><con:testCase id="a0f394b2-cbbc-495f-9c80-16eb172e2614" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12-To verify response when no value/parameter  for location is given under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bf20944f-4535-4d58-8c4e-1cfc3a05f69a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJzMnRwaXBKS1F5eW4zT056Kzd1OVU5ek9nYUVjQVIwODBpN0ZRcXAvcFRoejNBUUFLQ0tZTGMray9ZcllSMzFacFV5MDRIOE5kR2x4R3F0RnNEajRhNU9MNVN4RjBVZnNkRWE1QURzVjBTbTFtNG5HZWo4cEp6emVsQkY4WU1henNOTTJTenlNaGZFckxrRkw2MUJnZnlhcmFyL2lZaEZ5K2Vqc0dpN3ZLbGd4TzBRWTJyeDdJYlZHcUhVb215eXkiLCJleHAiOjE3MzgzMDI2MDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._TAahzBXPhE-wdbFrH9sB_GBLq5IJGF0eAGEuREQKIk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b015c1dc-aed4-4c3e-b34a-cace6ab2546e"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2



//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)



</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4eed48aa-b622-49e7-9ad2-ac0bb6c19240"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="5f850e5a-c97a-4392-9473-b9d179d14692"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": " "
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId



// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality == [" "]


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="9cf77669-855f-4f51-91d1-7d4483afe738"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}"
           
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality == [null]

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="21bf0528-4506-4c48-9f04-21ebad7232a7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_d8MK9ji0</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameGJtXIe</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e64e4acb-8a60-4c1f-8522-e1dcf71ba5ce</con:value></con:property><con:property><con:name>email</con:name><con:value>GJtXIe@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidGJtXIe</con:value></con:property><con:property><con:name>Work</con:name><con:value>16566284406</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7815487939</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameGJtXIe</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameGJtXIe</con:value></con:property></con:properties></con:testCase><con:testCase id="308f6f7c-dcc3-4c1c-a6b2-df2a0c9b00f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13-To verify response when no value or Country parameter is not given under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7824c746-fd3f-476b-b20f-ac6247a225cb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIyR1JEQzljWCt4QUJUaFpKd05nU1F0KzhTZVR3K0lxd1EvdHFTdjYrVFNwcWNUaVBleWhNQUFNYjc3NENmRFZ5Y013eDN2ODZpc1lBNHk2SHVTeWU1RUtYcXVGdEUrME9LNm1YZkJ2ZTNwRW1YS2ppSWw4ZE1PcUxCbHlSaTg5TE02NlN2ZVQ4MEQyQm1ZdDA3Tmhzb1pBVDBUK1NQM2VmeDYvSTlYNDgrZVI0Q1AvUXF0ZzFsbzJJSHJvSUJzUmwiLCJleHAiOjE3MzgzMDI2MDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.IEPuXiZu4B0obaZS7E0B0cYeHlooU8Mvesw5pWt6_OY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cbceed5b-c5a2-4620-97dc-67f410ff066e"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2



//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)



</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="80484c39-9e9f-4f97-a92e-e44e258c5574"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="d01479d0-2044-497f-b077-1958fc09ef22"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="ace21afc-5530-4558-8741-ad13c111225d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
           
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="92c400be-c56f-4355-8f57-0e6f532c6393"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7oAwtm5E</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameOI8XnP</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>d3b2ccaa-71ee-4da9-b58a-707f0e5070cc</con:value></con:property><con:property><con:name>email</con:name><con:value>OI8XnP@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidOI8XnP</con:value></con:property><con:property><con:name>Work</con:name><con:value>87844770186</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7916007115</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameOI8XnP</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameOI8XnP</con:value></con:property></con:properties></con:testCase><con:testCase id="25cad89a-a7ae-4cc1-958e-e8217d5bb7ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14-To verify response when no value or &quot;preferredLanguage&quot; parameter is not given in request" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="904f48c9-85ab-424d-950d-6621d322c420"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIvc1RYN1ZQNUtySk1tY29ZbzNqNVg4L2lZOGl5d3VzbmdPYUVhYkhSZHppQnFIREJid2N1QXVxeWFQTUw2M3RyVDhsUi9vc3YwcmduT2x0SXFCSTRMTVhSdC9HdHhWOUdtZC8rMkYzbHNnRzJvd2hQTWZMdVphQncwckFjc0tZZXdlRXBveUdJcWRKOHhvVEFBaDYyMHdEek83VnVsanQ3b0FLZllEaW1MWXVESkJhVHpTQ051VGN4MU9RYzBPNXRNbzVGNTNCR1ZkcldRVDQ3eEg3Z0JBPT0iLCJleHAiOjE3MzgzMDI2MTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.mPF20fnoR1RDAoOI6_Yxb9GiR9OqfFQNuR9H35fNW9A</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cf38d7c8-74e5-4dd0-b88d-983345369617"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="27d70b00-49d9-4a2f-8c68-613659ce6d6a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="312294aa-520c-41bc-9f26-96df8d297304"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#UpdateduserName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="a93d37b1-5d5f-4073-870f-517908fd699a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#UpdateduserName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a91fc7e7-de91-45b5-a7f2-8047d621799c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_0DY1A3O4</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName5Fhhic</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9bc532f5-491e-46e3-adc2-43255f7b4be2</con:value></con:property><con:property><con:name>email</con:name><con:value>5Fhhic@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid5Fhhic</con:value></con:property><con:property><con:name>Work</con:name><con:value>62725227402</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1869074135</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname5Fhhic</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname5Fhhic</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KK5Fhhic</con:value></con:property></con:properties></con:testCase><con:testCase id="fdea4d18-f48d-4de2-a376-32aeefeb3a2f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15-To verify response when null value or no attributes are given under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c95210da-2ba8-4eee-bff3-919788e6e667"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJCcjhKYmNWMktkcThlQm80dTArQUxnc0FCbTJEdWFGbXMxSnI1RUdWdzBxNDh6N3hWT1FHUHB6QmZUZEplcEFFSHJGaXo0cDczRTMzUnpCTmdneXdVOFR1R1Jnc05UREx4UnpUTkozUk42UjNXQWY3eHkxY1IyQ3Jhb094bDhDQnk2RVdhM0lYeWZ2TFJ6UzNVd1dkZkV2aG5hQXlJSTBmN2VFUlNxbHRQVGVZVmJXaERpVUY0RVJWN295QUt5VlUiLCJleHAiOjE3MzgzMDI2MTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.DrZSSMqjzUVvv3lDFsYuGhs8H3iCzIsxu6LUexJWxpM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fbdcabca-51c4-454f-af91-54968849daab"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="547d8f5c-455a-4cc1-85cf-69ca6f1ada9e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="9629c6cf-8eac-4080-a515-471cff12c3c1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#UpdateduserName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="725c9bbe-5cf3-4a4b-aa80-68f38d0f114c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#UpdateduserName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "null",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3be7c4de-cfbe-443c-a0f9-3a584cbeef7b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_xNM3LOSe</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameEyvs0I</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4b0feddf-e79a-494e-9f6e-ac39ca3e0d18</con:value></con:property><con:property><con:name>email</con:name><con:value>Eyvs0I@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidEyvs0I</con:value></con:property><con:property><con:name>Work</con:name><con:value>03559575488</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0151748615</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameEyvs0I</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameEyvs0I</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKEyvs0I</con:value></con:property></con:properties></con:testCase><con:testCase id="e59d4c20-a667-406b-bc6d-d0ba59c59b07" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16-To verify response when no attributes are given under &quot;extension&quot; schemas" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a2894e69-8827-4217-b51c-964465f6df92"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0eTdweGw2RFdtUzN6TEVMaktTUkZWZkVjUUIvR3hTVmh2MDZKcUlRR3hVVWU3SmJNTGFYSnFWVW1Scmw5L25NcEhBZWJjOXRvMU1sMEVBZ2JDMEErSmJWRVRuTjZwRVAyaWV2a1FNaWVjdVFMbUlnUkhiUDloaGtsVXNyamJNUWdFY2pGUEI2T2IwTS9BU2dyVlBXRitmY3hzSkJTVy9Eb2VsT0xFcGh5eUFIMm9JRVNVVHdrTVkzVEJJZ0tDd2ciLCJleHAiOjE3MzgzMDI2MTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.fcSuy3-5J-kx6NnUd6bGkwuyoIXo_EbHudbMMkjYqDM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="de1fe6b2-2606-4735-a7fd-7bd894d50b95"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="8a6a162c-c799-4c60-8246-1c2e782d4ac1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="cfd5da92-5922-4983-bff3-aecfc729228a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
      
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="290fd8cc-d639-484e-9233-967f721330a1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_rlwPtuGN</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameL89djL</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f3770e22-d163-49d7-b656-fe60f4e6fe9d</con:value></con:property><con:property><con:name>email</con:name><con:value>L89djL@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidL89djL</con:value></con:property><con:property><con:name>Work</con:name><con:value>51158937491</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4037090585</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameL89djL</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameL89djL</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKL89djL</con:value></con:property></con:properties></con:testCase><con:testCase id="3cbb4833-6564-48b8-a65c-05923e884d5c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17-To verify response when no parameters are given under &quot;phoneNumbers&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="08e84f97-7b2d-4cd8-836d-1fb1c7dd7945"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI3eGhxTUljTis5YjdON3J1RkJiU3JEWjVWSytLdU5hUzJBMHhnZmZuM25Kd2hKdFI4Qmc1MEtRSHpIM3ZJdE4yVUd4cGpXRENEK3U0QmpPcEZtWG9FMmlGTDZXYUlTMEVvekdGYm1sTUs4WlZpOEVoS3J1NXVObDdnTEl0UUVnT3MwL2RNQm9BWkRac3JHNkVPUGx2ZTlpdUYremd3RHRZZE82ZUdpSml4bjV5b0x4NE5WVSs1ZVVWNW12SjMxcnMiLCJleHAiOjE3MzgzMDI2MjMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.PKDFrQJMt1UtvXlstcgt_qTNjjkLGmGh9Nr9rK6CmEU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="05232385-d59b-4156-87ba-0df2fc3ba947"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="72934166-e214-499f-ae4d-8a08a3a45d65"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="80a5a8ad-fe8a-47df-b3b2-1b7f1ca3f085"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c2b542a9-d1e1-4f44-96d0-bf4690b30010"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_dsSuac0Q</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameHr4sY4</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>764c9fc3-3006-49cb-8b26-4f0658270b86</con:value></con:property><con:property><con:name>email</con:name><con:value>Hr4sY4@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidHr4sY4</con:value></con:property><con:property><con:name>Work</con:name><con:value>96052534065</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7061298081</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameHr4sY4</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameHr4sY4</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKHr4sY4</con:value></con:property></con:properties></con:testCase><con:testCase id="5dcf26ac-f979-4ad4-9d47-e4a98c224d98" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18-To verify response when null value is given for location under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4abe4cd0-32c6-416f-a9c3-dc4687a5d189"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5UkdvdE9zVHpzM1czY0YwNnNNSU9oeXZqZmpxaVFXYkdwU0hmNk1iT0NIekI0OGtwaWE3M3B3ckQ3akIzblA3T0VTRWtsZ2U0bDdNM3RuRGlWbnAyekJQRVY0SGl0SXBVeW1NaWpaRGJJdzI5SHhJWjlxSC9wT3NWa2l1SFVqSFFMdEJaTGdRUi9mZ3BHM2tNenNzTlc5dDNYWVdoS3hKc1hGZTdMNXUrRVNZU2pHOUtuU3QwUk8zT0ZRYVpKSDEiLCJleHAiOjE3MzgzMDI2MjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.nbuH9hzKPHpnJCUENQ592DwL9FIWjcOKrJxjTrU8MCk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e88507e0-8ac7-4742-bdbd-73b857277474"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c0f83965-35ba-4fa7-8848-2a545f5dc61e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="25aae2f7-64d9-48c1-a42a-8a2ce3907ce0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "null"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f35e54c8-4c71-4ecd-800c-33b9171b7ca0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_o09rBu0P</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamej63I3p</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c7b211fb-f820-4666-bd61-4cfa650e2f00</con:value></con:property><con:property><con:name>email</con:name><con:value>j63I3p@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidj63I3p</con:value></con:property><con:property><con:name>Work</con:name><con:value>02107059396</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1809517304</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamej63I3p</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamej63I3p</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKj63I3p</con:value></con:property></con:properties></con:testCase><con:testCase id="d7a54494-f0ea-4b17-ba65-f264d07b1f1c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19-To verify response when null or invalid values are passed for &quot;preferredLanguage&quot; in request" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a1f0b5a0-1e13-4519-b467-4e7d8ddf5a13"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJDS05BaWdyQjI3TmpoVzVWVmptbTBUbGd0d1YwemJtK0NYK2FWV3hGRlh0V0h1ajB1cEZJdWRHUjNHMGYySWlmTWUveE15SEQ4MzlxdDFzM2R4Ty9BNGtjZ3Y2cU4wKzdkREtzNS8xL2NTYUF2Q0p1U3IxQlljRC9COUs5dkwyYmVMQjY5am5Ieko4UHVxZU8zWUZhS3kzcXdlbC9JVlBlaWNWMlE3cUwrL1E9IiwiZXhwIjoxNzM4MzAyNjMwLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.uHpkWOJkB58X0aNbCKYU_4BIXwjtrNl2FE4IlGgAz7I</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d1fab44e-dce1-4dc5-9a61-5b2c18f2de66"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="17b15786-c255-45ac-af8a-5041efcb8efb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="e11f60c3-eef7-4ec5-a109-1d9f32545fde"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage1}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId



// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="01987d9e-107e-4d20-aa7f-06156992b119"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "null",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="146f391b-84ff-4490-972a-fde744515273"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5SaGa8q5</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameAvY3u0</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6cd6dabe-26e4-4db1-9600-2bcb6515b8bd</con:value></con:property><con:property><con:name>email</con:name><con:value>AvY3u0@xyz.com</con:value></con:property><con:property><con:name>preferredLanguage1</con:name><con:value>abcd</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidAvY3u0</con:value></con:property><con:property><con:name>Work</con:name><con:value>68478116082</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7015365493</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameAvY3u0</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameAvY3u0</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKAvY3u0</con:value></con:property></con:properties></con:testCase><con:testCase id="b4dc2b69-0292-4c80-84a5-5857c3cc5e57" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20-To verify response when location of other country is given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="eb8b2153-842d-4e16-95d2-fceb2947e271"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWRUt3S1NhbUhMQ1hEcUlOU3FPT2sxM005SzRuZjArbytPUXZ4SkZNbUFZZkNIZDNKK1JCdjA5aXFVb01NR2RJZnhtbHhGb1g4NUxpeXJGTWRWY0w5WCsvdnJIU1Z3ZWs1ZXRjM2hhZU5KbGg1MVo1b1JESmRhMlVWM3hSclJ5ZFFzc1JPTGRQOG9HTkg3dVBPNXd4bjFFS2hTU0pMVENLRFE5b3VyOTFDeEE9IiwiZXhwIjoxNzM4MzAyNjM1LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.WHQ8UO0OPFXFUyQKwue2K459qqwN7TrgEEoS2GIO_a0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e79e64e3-dea3-46fb-ac3f-87564c69f372"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0a2d6f9b-c8d0-491f-ba51-30982fe0c7b7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="70f2144c-dc06-4c01-bb25-56f4662f2a4a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestCase#country1}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="286a5c29-da84-4431-8524-0da5a58d4646"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_34ET3r7D</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamevVD4mK</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>96efc77f-95df-4080-a65f-a28ff273adca</con:value></con:property><con:property><con:name>email</con:name><con:value>vVD4mK@xyz.com</con:value></con:property><con:property><con:name>country1</con:name><con:value/></con:property><con:property><con:name>externalId</con:name><con:value>extidvVD4mK</con:value></con:property><con:property><con:name>Work</con:name><con:value>20425598165</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9720836376</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamevVD4mK</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamevVD4mK</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKvVD4mK</con:value></con:property></con:properties></con:testCase><con:testCase id="6deb5c90-fb0f-4af2-9cc3-28e954d02a55" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_21-To verify response when null/no value is provided for Department" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="cc1885a9-9572-4a51-9e99-adaf25e83d5f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ6MEdQc05NWlhjWVdROFU0WjVGQnVvaENOUXJ1bUlLdUJ3TVlCd0N0enF3WWRCZXRybDh0Q0FPQ2RqRHEybWhsbTRFRzg3QkNNU2V6U1g3bE9ZYUVrbHlSZjR0U05aWjB5VUtKZ2NWZEFWOVdkbU9kWGhSSDZJYjJoYlFZSmQ4TWNsVjdGbE9tWE5vNHBnWDdlVUUvZTR0R05YNVRWdGZrT2wzY2wxbHpYNVpYeGQ3bEQzcWJYZ2NZT0hzWlphYVkiLCJleHAiOjE3MzgzMDI2MzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.wQ3agNn7hcya12hnYBpmUPcq96QEYLUwKgIHNq-gZX0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e41bc35c-fa63-4ed5-9a2b-67d94a28ddb1"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="999f55aa-4bdb-45a7-afb2-3ad677581c08"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="88f83244-0109-4e52-aa27-d4dfe5f8594a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "null",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="b52e5309-d2ee-4fb2-b354-dd273df73b36"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7f7955ed-3657-4e86-836b-654f0359ec1f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5LNGBXge</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameihHnmJ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b007137e-6454-4b08-b328-45d3bd11fffe</con:value></con:property><con:property><con:name>email</con:name><con:value>ihHnmJ@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidihHnmJ</con:value></con:property><con:property><con:name>Work</con:name><con:value>84313149852</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0120987441</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameihHnmJ</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameihHnmJ</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKihHnmJ</con:value></con:property></con:properties></con:testCase><con:testCase id="1442f41b-bedf-40c8-910d-0ab147ba9a13" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_22-To verify response when no parameter is provided for Department" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="328af625-39a1-4f09-9b4d-3116e2bd6f7b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJucHVQb29SZDJLYmlYTWhpVi9rVVBHMVlIc1VTdjZKLzR3a04rYjVxQzlOaUFRQXZvSE0zMlFhT01vN1ZURDlDWlBnc0drVUd2QnBsbXN6WVgrVmJUT3BQSjMxaFpXZFdFNGEwVVNEd3JLOVpranBKc2V3Y1UrVVF5Z2tUR2hLTHpOVUduZ3ZjMGZocnZZWlJGcG9SUk1xeHl6NmZXQVZhSEVNY2haVmdMTGJZS2x5NnkxaStKUzB0OUc5MlRMTUYiLCJleHAiOjE3MzgzMDI2NDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.8-H9GKVXQk4eWMC7uQyl4buuKmHy4V2KLWExyCljkOE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1cbc4356-709f-4cbc-abbb-f520494ac4b7"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="06016b5b-e19b-42df-92ea-48e9ebc22e8d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="f086bc11-5652-442f-b745-f28ce816b666"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4e54c46a-2e94-4b38-9d17-67eb33cc169b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_NMXUR7vF</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameZCRM6s</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>03de5cfd-2c9d-441b-ae5e-281859b9df93</con:value></con:property><con:property><con:name>email</con:name><con:value>ZCRM6s@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidZCRM6s</con:value></con:property><con:property><con:name>Work</con:name><con:value>38074993384</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9379725484</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameZCRM6s</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameZCRM6s</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKZCRM6s</con:value></con:property></con:properties></con:testCase><con:testCase id="06c9996a-fc52-43b1-a829-7a87dcea0655" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_23-To verify response when null/no value is provided for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="921d1b75-73ab-49a9-b7cb-939316e8e362"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJISThwd1gxTmUvYzF5cFhNYXZlRGJvaVBhVlIwcTdXd2VnTENBWjJ2SEJVeUozZFpGdDR4d2g2b2lXNmNxOWM5NS8zL3BmYndWbk5jaysybXl3VEo2RzQwa1ZnU2M3SjlQajZVQ251U21kTjN5Nkp1RWFCL0o4UTdXOFYxYWJQOXE2K2FkTEpKajFmNDRBYTZEamFjSlZIOVNVakE2L0dEVmhvMDlMQ3RZNDhrWnhzbXVWbVpicmNJcUNwc0ZxdVYiLCJleHAiOjE3MzgzMDI2NDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.k_3ynDfyvDHQMQYK3XoIqWNs_5P3STB_n3O1B6s15O0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="32a63f31-f039-4c11-a54e-60c119fcc366"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="9f456b47-a8fc-4a37-966d-2710bf3750e4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="f1dcd058-edc3-4604-8789-1e3a056ab2ce"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "null"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="511771cf-7e3b-43c2-9fe2-5b234067d8cb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": ""
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="bc1ec182-6f2c-486e-8788-2255f4608e9e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WMlIsi2L</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMO56M6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9732d85a-6669-4cd1-a0b0-cb6dd3bef68d</con:value></con:property><con:property><con:name>email</con:name><con:value>MO56M6@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMO56M6</con:value></con:property><con:property><con:name>Work</con:name><con:value>67288668466</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0649685677</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMO56M6</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMO56M6</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKMO56M6</con:value></con:property></con:properties></con:testCase><con:testCase id="d636d87e-6b93-45d4-ae0c-cfe89476d518" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_24-To verify response when parameter is not provided for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="88b4c866-d440-44fb-840d-5606c586158c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ4enpvTHRoMHhsS1dpc1VXYlFwVGw1MThpRGQ3VWNOSkY1MjdpZ21RZEEvbUlONS9nc1RJd0RzQ3JWdXRxUVkyL2hubGtpNlJPUTZEMWFxd28zcHVpVUNSYUdQaHJ0SkNCKy9oeFkxV3dqenF6U1BLWU4wODBucld5YkRSd1c5QkdZenZ5TS9QVTZYRmw1S0h1RXhzRUdkSFhyNDdwSEdVOHN6bWRmYUVBK0ZVUmxWayt0dk9INjJuM3IrdlFKaEwiLCJleHAiOjE3MzgzMDI2NDksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.BKCyFwDicmtS35GPMlvndRy6xmkCYsVSqg5EsrQgAg4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="053893a9-b7b3-4b9b-a6e1-b4ccf7c6691d"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="6289ad4b-c5b4-448d-a6d8-0ea629373068"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="28de84cc-8d0e-452c-9132-42ba3b6ce60e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4d63e314-4f10-4128-815f-bf1008e3e42f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_zviQ0lpK</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameb8fS4u</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7258360a-5555-40ef-b1c8-0595d2e95f8f</con:value></con:property><con:property><con:name>email</con:name><con:value>b8fS4u@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidb8fS4u</con:value></con:property><con:property><con:name>Work</con:name><con:value>19477507724</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0428538298</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameb8fS4u</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameb8fS4u</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKb8fS4u</con:value></con:property></con:properties></con:testCase><con:testCase id="1c37240f-0a10-4391-89a3-5450b5921505" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_25-To verify response when &quot;preferredLanguage&quot; value  is updated" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e68f9988-6b6e-40dd-9eb5-5c12c94c80c5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKVUZYT3F6WTNpRUplRTdNTzRrVE14MVkxRThWYkpGcmpiUFZUZExGTWdFR2NOSCtTT2tqZ2QzMFVDTUF4OFhrOWwwNitWd3JUeml0cll6cldvYzdmYW5lNTVROWlkVjdjTVl3QlRTbkxPdDRoMnI1R0s5YzJxTUV5QVdXT3dyVjZyNFF5a2cwMVFZamdTcE10L2lCc2FDbTB3dyt1c2Jvb1pKWjJKbklDbUFCVzFwVE5aaXF6U3MzL09ZTkJzSXMiLCJleHAiOjE3MzgzMDI2NTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.0tmrIpPfgV3KSgt076O3lhIfl08bXlMBtOKyaO498Os</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="78da001f-afff-4bec-911e-a4627be7770b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f311e021-dcd3-4f08-aab0-d71829dec84e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="b435fd92-a395-4a5e-9910-5d7268acec15"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestCase#preferredLanguage1}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="46eb220e-3013-433e-a445-45907fb4895c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_YBR5KUvJ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameOoMjZe</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>07b8fe01-ea01-4d35-ae5a-d4c8a063e306</con:value></con:property><con:property><con:name>email</con:name><con:value>OoMjZe@xyz.com</con:value></con:property><con:property><con:name>preferredLanguage1</con:name><con:value>EN_US</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidOoMjZe</con:value></con:property><con:property><con:name>Work</con:name><con:value>70030195709</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6836349168</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameOoMjZe</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameOoMjZe</con:value></con:property></con:properties></con:testCase><con:testCase id="a5179eb7-a6c2-4f3f-92a3-f4f78dc449fc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_26-To verify by creating user with passing Country value with Alpha-2 code" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f57f7e32-ca81-41db-b22b-929e958dd350"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJOUk9LNjJHVHlMbjJFRkU4am1iU3lLQ1ROUnNKbTRMSWZwZWVPS3JHNVB5ZTh3Y0QxMGl6Tm5IbDB5cy8vQWFLT2syblJ6dEYwL1NmVkJnN2xnVCtXY2h1SDNRMDE3cjNFTm0xaUsxQzdhSHAvRlVBTjBiL2ZzNzlVT2pKTElDUW5vS285OW1EZVRpbCtUODdkekMvK0xWM09wOTNlZzdRZFdzQVhCdFduZTN3UklIM1YwbGJOd0s0Q2l5ODlxdlMiLCJleHAiOjE3MzgzMDI2NTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.43-52YBhZUCPUrBLpLX04Sz7XPy5fc6pM5LUXHgxbsc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="52287ed7-a904-4317-9494-a120a4a1d712"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f1e4e86e-c243-4b83-b4ce-99adde7a7f80"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="66056e9d-3f54-48c6-8505-ecd280b2b0b2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestCase#countryAlpha2}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f4f50b22-fd2f-44b3-8c42-6f0aa04a319d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_HuKU3Gg3</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameWXOVpc</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>999051d6-eef0-4c7a-8e36-e4ece212a048</con:value></con:property><con:property><con:name>email</con:name><con:value>WXOVpc@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidWXOVpc</con:value></con:property><con:property><con:name>Work</con:name><con:value>19502425213</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3889923242</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameWXOVpc</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameWXOVpc</con:value></con:property><con:property><con:name>countryAlpha2</con:name><con:value>IN</con:value></con:property></con:properties></con:testCase><con:testCase id="8ab82b1d-65e4-47e3-8c56-675ce30a8b07" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_27-To verify by creating user with passing Country value with Alpha-3 code" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ebe3bacf-85f8-4cc0-b5c7-6591b03ec64f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0dC9LTHVQbEduQlNpV284Y3M1YnhkSW9BUVprWnBza0FSZUVkcS9PYnFFaFROUndpUVJqZkUwb0pwaUlIb0s2bWt5cDZpYTNnMlBDU0JDYnhSZVJ3ckNkQ3VRVnRSdFpzeWpQbmlremhRQnBLZ2VjSVZZM3p5WnFaMjRwWWkva1lxMDN4eEpwVEZLSVNEbndWbEgxM2NNak9Mc290TEZ4aXNXdEZPWmZ5c3ZPaWh5YVBsU2d0K1lKOTZxd1c4UHUiLCJleHAiOjE3MzgzMDI2NjIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.UWV8EZODi2KOV7V3dVTCHt732QOVLPIX1c3GtK9S2EQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f682bf05-65e5-4a98-9230-e41e553ec624"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="13c63df6-8f8c-42ae-8053-1bd3f1e9be4c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="d19b027b-4706-4524-9530-9d7a56456916"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestCase#countryAlpha3}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1e59d21e-541f-4a3d-921d-b0d1562aaf91"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_zTvHPeHR</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamezqaS1o</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c464b428-bab8-45f3-948a-b56f3836f061</con:value></con:property><con:property><con:name>email</con:name><con:value>zqaS1o@xyz.com</con:value></con:property><con:property><con:name>countryAlpha3</con:name><con:value>IND</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidzqaS1o</con:value></con:property><con:property><con:name>Work</con:name><con:value>14821448635</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6284756717</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamezqaS1o</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamezqaS1o</con:value></con:property></con:properties></con:testCase><con:testCase id="662d6f53-608d-42cb-9eb1-69da8b4108b0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_28- Verify the response for user endpoints with invalid Group and floor attributes in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7454c13f-8984-4d8c-940a-9e303221a1d5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJaUmtXN1J0K3Z2ejJOZmxjcm5JTDdYbU1hWU1iZXlPZ21nVmRMOWJRVm9mOWlTcFJVb1FZMlh2UUhoUHZVa2xJa3gvalBVMHovTG0wTjZ2WVlva0N4LytpdFFscXhoVUplMlpKQUhxUmwzM3ZwTEhWN3cwVEdVaTFreTNxWXdvb1NhT3lGdWdMd1UyODlDU2tDS0NLNStsRytvbHZoZmhmT2N5VmpweDhEbmZRNHJPVFBGZ0E0ZGloT2dWaWkzZW0iLCJleHAiOjE3MzgzMDI2NjUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.UKpAtTFRE5WgHsYHQALZNZ02V_Zb8kCDIz62ZRju5Ck</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9804d347-a1f1-4180-abeb-984681c2a690"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="9de27563-895d-4768-b28d-ca88430f1496"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    } ,
	
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="691144e0-9a21-493d-9a99-04ae6c2d9c85"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    },
	
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#updategroup}",
        "floor": "${#TestCase#updatefloor}"
    }     
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a3b99cbc-4540-497a-a740-8f72a809825f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_pUVRUWHZ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameKr7i47</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e2d9bf85-e65b-4ce0-9763-b65bfad9b93f</con:value></con:property><con:property><con:name>email</con:name><con:value>Kr7i47@xyz.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property><con:property><con:name>updategroup</con:name><con:value>a1!@#$%^&amp;*().,>&lt;?/[]{}+=</con:value></con:property><con:property><con:name>updatefloor</con:name><con:value>a1!@#$%^&amp;*()_+=-{}[].,&lt;>/?</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidKr7i47</con:value></con:property><con:property><con:name>Work</con:name><con:value>99960706882</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2604405463</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameKr7i47</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameKr7i47</con:value></con:property></con:properties></con:testCase><con:testCase id="22bebb7d-ee46-45ac-bb0f-b8c0ac225290" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_29-default Group value gets set for user if Group value not provided" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4be2e9cf-ac95-4431-9283-aee08e72637d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI3MGpzOEpyZytkendCaTRDT053WURZVWc0Um82Z2lPZGkzU0lBM3h0c2ZreXhsQkFUVHVFZTl2dHJNZnh4eDV1R1R3ajUzU1RCUE1UNHpjcUtjNTZTYzVmV240RitUWTlFb1c1QW5aak9TUVUwaWdDa2RTaTMzRzhYNVJCcjVnK002M0lBb1IwL2tLcVhhWUxjWWgxOC9VWjljTGhUOGFNT3hPcDVvUDJxenpyUCtsWCthOWZwbFJwVnVaalR6d2EiLCJleHAiOjE3MzgzMDI2NjksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._gns5qlU6BXqSj4gLpDL4Ok4kUpf1MqvoO_GaODhEdQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bce75fee-1222-43c7-b51a-7687fee20bad"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdateduserName=UpdateduserName + randomGen

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="abd89896-eee6-4903-b252-f3d564181ad3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="718a554b-8fb4-4003-a98d-7bc4d5ceaf20"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#TestSuite#schemas}"
      ],
     "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
    "active": ${#TestSuite#active},
    "emails": [{
        "primary": ${#TestSuite#primary},
        "value": "${#TestCase#Email}"
    }],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }
    ],
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
     "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
         {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#Department}",
        "costCenter": "${#TestSuite#costCenter}"
    },
	
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }     
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e7bae5bf-97eb-44e7-b99c-951dc2f58786"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_m7okh4Tn</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameIS7ybb</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5422e35d-19b1-4ae6-b882-0f6f243ed9d2</con:value></con:property><con:property><con:name>email</con:name><con:value>IS7ybb@xyz.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidIS7ybb</con:value></con:property><con:property><con:name>Work</con:name><con:value>39890719447</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2192693566</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameIS7ybb</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameIS7ybb</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>01</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>11</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KK</con:value></con:property><con:property><con:name>UpdatedMobile1</con:name><con:value>89</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>9</con:value></con:property><con:property><con:name>UpdatedGivenName</con:name><con:value>updatedName</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUp</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>Updated</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>pathUserName</con:name><con:value>userName</con:value></con:property><con:property><con:name>PathPhoneNumber</con:name><con:value>phoneNumbers</con:value></con:property><con:property><con:name>PathLocality</con:name><con:value>addresses[type eq \"work\"].locality</con:value></con:property><con:property><con:name>pathGivenName</con:name><con:value>name.givenName</con:value></con:property><con:property><con:name>pathFamily</con:name><con:value>name.familyName</con:value></con:property><con:property><con:name>pathEmail</con:name><con:value>emails</con:value></con:property><con:property><con:name>PathDepartment</con:name><con:value>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department</con:value></con:property><con:property><con:name>PathCountry</con:name><con:value>addresses[type eq \"work\"].country</con:value></con:property><con:property><con:name>PathCostCenter</con:name><con:value>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:costcenter</con:value></con:property><con:property><con:name>PathAddress</con:name><con:value>addresses[type eq \"work\"].country</con:value></con:property><con:property><con:name>opReplace</con:name><con:value>replace</con:value></con:property><con:property><con:name>opRemove</con:name><con:value>remove</con:value></con:property><con:property><con:name>opAdd</con:name><con:value>add</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property></con:properties></con:testSuite><con:testSuite id="d8f02aa9-9902-45db-974f-c308e6b1c740" name="PatchUpdateSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b0f20aa2-7399-428d-b884-34f8ec2cf556" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify Update single SCIM user using PATCH" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2e67077d-2fdd-484f-9de8-12b4befb3fde"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ3cmhvUzQ4c2JJaWxpREpQNHJkT0p1UmxId3V5Zy91WHFZU3QwQ0FGTWo1ZVlkNUU3RE01R3p6R25COUkxSFcrMUR4d2MxeUp2Q0ZneDk0bHpGTmp0TVhsRE5oTVAzWXNTdWI1bnNnbElnRmdHSTVYRklRZlo4SU9YV3NEaDZKRW03SWhxcDU0ZlcwMUg0ZEcySXBtWVJNVUxQUnZoc3BvLy9TaUt4eVI4ZkEyN2dNbjMyTllKcmZmVWRZc3hNT3UiLCJleHAiOjE3MzgzMDI2OTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.KRWX8hyF9J9oTnpVuT-lDMBjWwSX0Oz7Cgnv0c18XtU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0c8390e6-aa73-4900-8287-38dcdf498554"><con:settings/><con:config><script>


import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="658d0fae-4165-41b2-9b5a-738e345b4616"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Patch_Update_User" id="94c48ee9-4dae-4dfa-9842-e4596cb57e46"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Patch_Update_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    {
      "op": "${#TestSuite#opAdd}",
      "path": "${#TestSuite#pathFamily}",
      "value": "${#TestCase#UpdatedfamilyName}"
    },
    {
      "op": "${#TestSuite#opRemove}",
      "path": "phoneNumbers[primary eq \"true\" and value eq \"991818892\"]"
    },
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#pathEmail}",
      "value": [
        {
          "primary": true,
          "value": "${#TestCase#UpdatedEmail}"
        }
      ]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="2a3cca3d-5d01-42fe-8cac-6ac1bf0ecbe6" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="43d4787e-7755-44c1-986a-d40e1e180e25" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5b4a499e-00de-4063-8e02-38ec270807c1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualfamilyName=jsonObject.name.familyName
def ExpectedfamilyName = context.testCase.getPropertyValue("UpdatedfamilyName")
assert ActualfamilyName == ExpectedfamilyName

def Actualemail=jsonObject.emails[0].value
def Expectedemail = context.testCase.getPropertyValue("updatedemail")
assert Expectedemail == Actualemail


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User


//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null




//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="af6d6777-20de-4019-9a0b-ce3b73659a6c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_PnlLcc53</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamezVObsz</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>73666983-c544-48b9-a8a3-52ec7317c5a8</con:value></con:property><con:property><con:name>email</con:name><con:value>zVObsz@xyz.com</con:value></con:property><con:property><con:name>familyname</con:name><con:value>LnamezVObsz</con:value></con:property><con:property><con:name>updatedemail</con:name><con:value>UpdatedzVObszzVObsz@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidzVObsz</con:value></con:property><con:property><con:name>Work</con:name><con:value>67470891182</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1848168745</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamezVObsz</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUpzVObsz</con:value></con:property></con:properties></con:testCase><con:testCase id="8fa2d291-40b5-4686-aff5-ff09f46fab68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To Verify, user is updated by any single-valued attribute with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c7b3abe5-7e5a-4852-a00a-425df4380cae"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJQUWdRS2xPM1Vxb2hVZEFJbEhQQi9KYmsrc1A0K05MMkFjZzhBNWtrT1lFTzJqRm8wdDRMTmhRQ2xIeVBTZC81Mm5QUTZ3UWQzeVlTNHVlaTYvL1ZYQlJKNEFpaWpVUEwwZnVPRE9XUjN3c3JZYy9iNk95Nlh1Y092T2s4SnJSSm4yOGdHcE5jTFM3NXlJd3RuenNBR3ltc0U4KzFzZWI5SU1WZzNkd090U2N6ZklvWkxMeWs1TVJWVTQ1azdYWDEiLCJleHAiOjE3MzgzMDI2OTYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.qbeAgFnNMXWJd_yeReo31RHVoiSnmxWHdWczBmVNF8E</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bfeb03c5-e236-4f9f-8818-cf483b454716"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f77e9b17-081f-4c59-b310-71eb409988cb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Patch_Update_User" id="beac6c66-bffe-481d-b626-09750813fc7f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Patch_Update_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    {
      "op": "${#TestSuite#opAdd}",
      "path": "${#TestSuite#pathFamily}",
      "value": "${#TestCase#UpdatedFamilyName}"
    },
   {
            "op": "${#TestSuite#opAdd}",
            "path": "${#TestSuite#pathGivenName}",
            "value": "${#TestCase#UpdatedGivenName}"
        }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="95b87db0-52b9-4393-90c9-e07ad696eda6" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5ab860da-fcba-4a64-a7eb-22a35343ea04" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5c934bb1-93c2-4396-b95c-a67c24584eed"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualfamilyName=jsonObject.name.familyName
def ExpectedfamilyName = context.testCase.getPropertyValue("UpdatedFamilyName")
assert ActualfamilyName == ExpectedfamilyName

def ActualgivenName=jsonObject.name.givenName
def ExpectedgivenName = context.testCase.getPropertyValue("UpdatedGivenName")
assert ActualgivenName == ExpectedgivenName

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9ca74d3a-d567-4b06-bd7d-ea9ab77c7794"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_thnBvfGu</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMTE5Tz</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>079179f9-9f61-426d-96c9-d1a51ec96fa9</con:value></con:property><con:property><con:name>email</con:name><con:value>MTE5Tz@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMTE5Tz</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMTE5Tz</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMTE5Tz</con:value></con:property><con:property><con:name>Work</con:name><con:value>44584942624</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4492403523</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUpMTE5Tz</con:value></con:property><con:property><con:name>UpdatedGivenName</con:name><con:value>updatedNameMTE5Tz</con:value></con:property></con:properties></con:testCase><con:testCase id="75384f39-410d-4381-887e-5d8e48ae4214" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03 - To Verify, user is updated by any multi-valued attribute with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6a24ee97-110d-4fbb-91b1-feea57a71aaf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJyNFhYbU1yL3F6dVFvSWJmMmI5dkJOclRnYldYTG5FbnN5NFlwdGo5VkxudllTVmI1d2xlV3RZMm9CMHVaYm9CbjZrbkJ2RXdJSkVDQ1pjZ3dDWUEzWVJ0bkNaYkhLdm00RlRVKy8vOSsvWUdvSjJVcW1XZzBZZ0MwVno5OFk4SWpDZ2I0a3RJVHRRNFNIRmZPUk40WHJ4eEQ2alRJMnNYWTVjRlFpcm5GK009IiwiZXhwIjoxNzM4MzAyNzAwLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.wc9mBA0ODSdwM7JPPlw4CctJoavG3r_S5dp5TwQl4eQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="014b32a2-2f41-4455-a867-c7390ccd0089"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f51cc76b-9c84-4aa6-9608-39fe11a133bd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="72aba27f-1dc8-4afe-8ccb-ca2cb161e389"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    
    {
      "op": "${#TestSuite#opAdd}",
      "path": "phoneNumbers[type eq \"work\"].value",
      "value":"${#TestCase#UpdatedWork}"
      
    },
    {
      "op": "${#TestSuite#opAdd}",
      "path": "phoneNumbers[type eq \"mobile\"].value",
      "value":"${#TestCase#UpdatedMobile}"
      
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="607edc54-1f61-40e6-b38c-7c749ff34488"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="abd26813-5632-4fef-aada-26ef70941d2a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_MiMpBS08</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameGqOCOe</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>69415193-a8b6-4641-b1e0-0c4bce7a1683</con:value></con:property><con:property><con:name>email</con:name><con:value>GqOCOe@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>phoneNumber1</con:name><con:value>8877777999</con:value></con:property><con:property><con:name>phoneNumber2</con:name><con:value>7788669900</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidGqOCOe</con:value></con:property><con:property><con:name>Work</con:name><con:value>1754017162</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>249943938</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameGqOCOe</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameGqOCOe</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>249943938</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>1754017162</con:value></con:property></con:properties></con:testCase><con:testCase id="a6b3914e-efb4-48f8-9e9d-e5f0430f4c8b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04 - To Verify, user's telephone number updated with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="01475ade-be8c-4ecc-a195-0b165f096476"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI4WDRZYmtHQ2I0LzV1Z2s4L3RuYmpZME84eDB6QXZ0b1h3aWRrVUtaMGxYbU9JT3NiZG1Vb2Y2NHI5MFJCNkFQY2YxNWNydHNpUWQxNTZqbVcwVTFqdHNyMjdDMkJvVEFNamhPcHBZOVFBRmt1eDNibmFQNy95Q1VyeXZIcFFMUmlUOG9DbUFqR3JReER5cU5HZFR3Sm5ia0x6Q0VxRWg3L1YrVjNzSjc4OUlWYjVOcmVkeFlGcTF6UnFqN25YbGIiLCJleHAiOjE3MzgzMDI3MDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.IYKfPSw4zj2JbxWaVv48KjauE9k6ulSVIwKRU5OcwAY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="843d6339-5e50-4e25-93b9-c1a8c55acb31"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="1753eab9-27b1-4222-bd75-68b15a4dc741"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
   
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="ef65e2ad-6534-4bef-8a39-bfc85c1295e4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"${#Project#schemasPatch}"
],
"Operations": [
{
"op": "${#TestSuite#opAdd}",
"path": "${#TestSuite#PathPhoneNumber}",
"value":[{
"primary":false,
"value":"${#TestCase#Work}"
}
]
}
]
}
</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="abe951d8-3cd0-4050-80aa-32a03a371855"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualphoneNumber=jsonObject.phoneNumbers[0].value
def ExpectedphoneNumber = context.testCase.getPropertyValue("Work")
assert ActualphoneNumber == ExpectedphoneNumber
//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)


def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code




//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0a118fc7-73f2-46f8-89d0-8d92d166c8c4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_NeoPOGBz</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamegryzap</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9d9d6c19-bdce-41cc-b867-38431529a21e</con:value></con:property><con:property><con:name>email</con:name><con:value>gryzap@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>phoneNumber</con:name><con:value>8899009988</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidgryzap</con:value></con:property><con:property><con:name>Work</con:name><con:value>47890416324</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6333583209</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamegryzap</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamegryzap</con:value></con:property></con:properties></con:testCase><con:testCase id="e4cffa67-a49c-41a4-ac3f-5c6829318183" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 - To Verify, user's Mobile no attribute is updated with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ef0fbade-0287-46d2-9763-980dd10aa04e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJzV3hpT2tYZlFqaDlGWHVJaUVGaTJubWZiSG4reUJHa0dKVXoyWmhoc3E3bG5tUUFPQ1VDS3JvV09ENDI3S05sR01kQTg1SWVOUGk0WThld0toZmtYY3lhazg3alNsM2gyTzlmRi9xaThsVHhvNzAvNC9Cc2hXQWVVV0U5ejNzNHVLWCsvMHE5Y2RGYjlBVlRwMzI3dlk3QkdXNVFmRkFzWWoyTEVxdUhRVmczVlV5b2NUekdEaEs5UnBCN0lYTEoiLCJleHAiOjE3MzgzMDI3MDcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.JEJOOWSNvEtOgky7-xkuYnOWLhnUXpN6DTr4Ss0l5HY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4bc21f6b-5c4f-4c76-b867-54c7e7983cd5"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="ee4285b4-e262-4ef0-ba0f-26f8358b25a6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
   
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="f6676a6e-8080-4721-96ba-e3d72fa086f5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
   
    {
      "op": "${#TestSuite#opAdd}",
      "path": "${#TestSuite#PathPhoneNumber}",
      "value": [
        {
         "primary": ${#TestSuite#primaryFalse},
         "type": "${#TestSuite#typeMobile}",
         "value": "${#TestCase#Mobile}"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="ec0da515-5b95-41da-9c60-3ee3fd6b54f5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualmobileNumber=jsonObject.phoneNumbers[0].value
def ExpectedmobileNumber = context.testCase.getPropertyValue("Mobile")
assert ActualmobileNumber == ExpectedmobileNumber


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code




//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="704af12c-1e5a-42e2-8d6f-03ecd4bb8cd6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7csbkETF</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamen5HWwF</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5b5a0452-06e5-480e-b722-f996d8ab23e1</con:value></con:property><con:property><con:name>email</con:name><con:value>n5HWwF@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>mobileNumber</con:name><con:value>9875280962</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidn5HWwF</con:value></con:property><con:property><con:name>Work</con:name><con:value>86694207896</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3621983849</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamen5HWwF</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamen5HWwF</con:value></con:property></con:properties></con:testCase><con:testCase id="57883e79-8040-4617-a4d3-44435b6c065a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06 - To Verify, user is updated by removing primary phoneNumbers with 'remove' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="34350e5a-5275-4672-b010-5343796a6e34"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI2bzVkeTAyaE1sSGd5RzFjWXRzU3VteUd6VkdkSWxuWHhqSUMzeW9iakxtb2V4UHpmSGU2RnUxOHUzK0dGMEVrSkR1S21SWDQ2R2EzNjFVbGFPN1Z3Q2JNNEpwaVRhaFlIelRRZGVOZ0VLWEl1dDd2dzhhd2cyQ05zd2FXNzdEMDhEa1gzWkNoamduSG9MOXEyN2hvakY4QkpmeDg0eTNMUXZFTVpGVGZNb00zVHVSbkdwY3kvdXlvUlNYTksyemMiLCJleHAiOjE3MzgzMDI3MTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.j964dWhCmADZ2iLPZwx4gvXIaL-_ebqxE0UtzPhNqy8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7c0dcc9f-7886-47b1-a42f-550bc76fdce2"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="42eb2dd3-5ecc-46e1-b3bc-c52b3515d426"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeWork}",
            "value": "${#TestCase#Work}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="98190586-157b-4388-adba-d769dcce1538"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"${#Project#schemasPatch}"
],
"Operations": [
{
"op": "${#TestSuite#opRemove}",
"path": "${#TestCase#pathPhoneNumber}"
}
]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="672c534e-bf03-4fb6-91df-f43f1c70bc99"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

//verify phonenumkber should be null

def phoneNumbers = jsonObject.name.phoneNumbers
phoneNumbers == [null]
// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b83ffed1-b84c-4cda-a4e2-0903ba41e8e9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_4QW9euQr</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameDyxah9</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0097880b-6c83-48b9-a40b-b32ac6a2ba5d</con:value></con:property><con:property><con:name>email</con:name><con:value>Dyxah9@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>pathPhoneNumber</con:name><con:value>phoneNumbers[primary eq true]</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidDyxah9</con:value></con:property><con:property><con:name>Work</con:name><con:value>45601310587</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2903674194</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameDyxah9</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameDyxah9</con:value></con:property></con:properties></con:testCase><con:testCase id="0a20cbfe-8166-4258-b120-e5b3b15f4ddb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07 - To Verify, user is updated by removing non-primary phoneNumber with 'remove' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b86f98d2-52d5-4157-9c88-233915fad18e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJSYW0yTThleFlWUmhHclBqMzdCUEx4Ulo5UFBjWThNUGVCZ3A5N0pQZDZEbUdPSnpEMVIxYWhSdkpiN2pwNm15OHJqMUhDZHQ1N3pldkNBUEJ5azkwSjFRb2FGY2NhdWtyODFpV2p4M21ndDhzTWRWYkxVZ1M5YjdnNFZXYlZWc1draFNIWlV4TkFFV2VNeVBPUml5M3FKUUVZa3UwL2lrRVdJWHVqOG9ZMVV6Q0huNXViSjA4Q1dtYXBheWp0akQiLCJleHAiOjE3MzgzMDI3MTYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ZvwYbl4a_3_0mroJIVsu0nIU-nYzHlgQ-HvkBGq7gT8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="01ecf65c-cb1b-446f-bf64-a799f8b71fdc"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="189eeb09-bc2a-4435-b517-9c4150470402"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeWork}",
            "value": "${#TestCase#Work}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="be61245d-1fea-461a-9ddb-1a3a0f02d379"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"${#Project#schemasPatch}"
],
"Operations": [
{
"op": "${#TestSuite#opRemove}",
"path": "${#TestCase#pathfalse}"
}
]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="3a020ec3-3d3a-49b5-973b-ab73749a383f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

//Verify phonenumber primary false value should not be visible
def phoneNumbers = jsonObject.phoneNumbers[].primary
assert phoneNumbers != false

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0c58719e-b7a4-45e8-b8bd-d783b9b25a29"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_zxA8e7HP</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameIjRpfD</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7ab07adc-63e1-4ff5-bbb6-b93161015f28</con:value></con:property><con:property><con:name>email</con:name><con:value>IjRpfD@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>pathfalse</con:name><con:value>phoneNumbers[primary eq false]</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidIjRpfD</con:value></con:property><con:property><con:name>Work</con:name><con:value>10740136144</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2887601123</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameIjRpfD</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameIjRpfD</con:value></con:property></con:properties></con:testCase><con:testCase id="048497f1-3490-4a0a-8cd8-9549eef16506" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08 - To Verify, user is updated by removing Phone number attribute with 'remove' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0c2be79d-c674-441c-af50-5d7f5d645ba6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtSThXcXcvOGhESWNYSzBSVFRPditMazlUT3ZFTHRSNk5wQmt1YkdwS3JQd1lBb0JjTGpZeWhtd2NyS0JHTW5RKzArZlRYR3BLQWQ0eDNyNFhsSlp2cTZ0Wlc5dkRUMm1UTWxjTUVQZ2NicUkyVjlpejR3Mnc4bjFFVG43UkNwdFh5eTk0RjRCZmRWbEEzS2hjRm5BRDZwYlhpSndJZkRMbk1zQnNnaUkxcWhqcHhKZUVuYmZqY2RWVHFiaFAvUk8iLCJleHAiOjE3MzgzMDI3MjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.A6mKTugJZtZRDkZtclhtqGBd9vhJFb5DmYHu5sZzNRw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="899408a9-7801-4623-8423-5bf187aa0a2c"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="3a29dbc1-9d21-43b7-b7bf-a449052d5308"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="6a62e893-44fb-42dd-9e14-7e67e79fd3e8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"${#Project#schemasPatch}"
],
"Operations": [
{
"op": "${#TestSuite#opRemove}",
"path": "${#TestSuite#PathPhoneNumber}"
}
]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c53e78ce-53f5-4270-849a-77487b92e7bf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify phone number
def phoneNumbers = jsonObject.name.phoneNumbers
assert phoneNumbers == null


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="62df1f3d-f74c-4fad-8511-1412d2244483"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_eGnZFNzN</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameEm6m0r</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c73d19ad-7a78-41ab-ad52-de6e142ee50e</con:value></con:property><con:property><con:name>email</con:name><con:value>Em6m0r@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidEm6m0r</con:value></con:property><con:property><con:name>Work</con:name><con:value>01288908253</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0363671604</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameEm6m0r</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameEm6m0r</con:value></con:property></con:properties></con:testCase><con:testCase id="0c28688a-d4ae-413d-8701-5a94d089715c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09 - To Verify, Family name and Given name values are updated with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e5c4d874-2508-4f7b-ad4b-36c3473d1552"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJweVZ2RkRzNDJoc3NnOGlvR1g0MzdobU1NaUZwbFFGeTRtQko5SE82RElxSjZQZE4xQllYTXlrUE9PMHBsVUhaRmJyUktINW4zSkhObGlyTzlzTEo4bU1HVWhGUkhOa2xpZGZHTFhJcDR0MkdhK0c2MEVsdklvRXFRMmUwVU9JeVBuY3dNTWtoRXArOVpBblBWUVlDRzcyWnRlTWw4TlBsc1JjSWFhQVcyQSs2ODlwL3I2bndGdzRuZHZERUJOVy8iLCJleHAiOjE3MzgzMDI3MjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Gcq5oGd7ClXth3ksj1D4fRPRDPEvPhh0AvTdiLJcIfw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="70acabab-a0c2-49e1-850b-a14ddf3d4e36"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="3e33f70c-f6c8-4ea0-a3f7-8b174d408feb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="bd551081-2caf-46d2-8b8c-d2c722387d4c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#pathFamily}",
      "value": "${#TestCase#UpdatedfamilyName}"
    }
   
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="77286008-d52f-4098-860c-c82545e640c4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    
   {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#pathGivenName}",
      "value": "${#TestCase#UpdatedGivenName}"
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="59a94fe2-fd56-4ef6-9f21-adfe0177bc0b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualfamilyName=jsonObject.name.familyName
def ExpectedfamilyName = context.testCase.getPropertyValue("UpdatedFamilyName")
assert ActualfamilyName == ExpectedfamilyName

def ActualgivenName=jsonObject.name.givenName
def ExpectedgivenName = context.testCase.getPropertyValue("UpdatedGivenName")
assert ActualgivenName == ExpectedgivenName


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null




//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="82f6bdea-1cbb-4572-ab8a-916f39247461"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_YavvHkS9</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameq8RoMr</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e28065f9-18d2-4a80-9f9a-2b4a983a40e9</con:value></con:property><con:property><con:name>email</con:name><con:value>q8RoMr@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameq8RoMr</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameq8RoMr</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidq8RoMr</con:value></con:property><con:property><con:name>Work</con:name><con:value>28652623536</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3736823822</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUpq8RoMr</con:value></con:property><con:property><con:name>UpdatedGivenName</con:name><con:value>updatedNameq8RoMr</con:value></con:property></con:properties></con:testCase><con:testCase id="4c2da08f-691d-49a4-9e56-9dae45d37f94" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10 - To Verify, Phone numbers values are updated with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8ffda02f-1411-46ba-92f8-0522fbefc5ca"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJzdkJ6dFRIQWMxdll0NU5KOTFWeHJnSEJnWkRSR1JYb2JJN1RsRGp5QXNxdWlhaE1PQVBsQVRLZmlBeU9YZFlwR3lYSTVER1VmTkFLT0hVM0VmQ293MzJBcTlBZW5UVFk4bFdIbG1BZmFCTTRuWDhCdnJkYThTNGMzWVRrclR3SlRrTXIrVEMzcnhUYmYxallGZDlKUEZJdTRaQlJBRkxCLzRnUUZRb1JlVVFHUkhtc1I4UkxvTFJ1MzA1dDhFbmIiLCJleHAiOjE3MzgzMDI3MjksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.MJcGbwycKKC4e-tUm-sGoIzrD9eJOBMM2J3KUdfKJwQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c0108e07-2726-4e75-a51f-5dc648a1b50a"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="91e94ee1-5afc-4352-a0cd-2e90bb5bcf8c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="e1957695-cccf-4c0a-a6f5-18af7879dd26"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
   
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#PathPhoneNumber}",
      "value": [
        {
         "type": "${#TestSuite#typeMobile}",
         "value": "${#TestCase#UpdatedMobile}"
        },
        {
         "primary": ${#TestSuite#primary},
         "value": "${#TestCase#UpdatedWork}"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="2a874bf7-90f3-4037-b544-89f530d25a55"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

//Verify update phoneNumberMobile
def phoneNumbersMobile = jsonObject.phoneNumbers[0].value
def UpdatedMobile = context.testCase.getPropertyValue("UpdatedMobile")
assert phoneNumbersMobile == UpdatedMobile

//Verify update phoneNumberWork
//def phoneNumbersWork = jsonObject.phoneNumbers[1].value
//def UpdatedWork = context.testCase.getPropertyValue("UpdatedWork")
//assert phoneNumbersMobile == UpdatedWork

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="633204a7-e5df-48ae-b3b5-7d21d654fa39"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mgYCEUZG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamegPwuTG</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ff58dd28-3721-4e3e-b9ac-ff315b46ed0f</con:value></con:property><con:property><con:name>email</con:name><con:value>gPwuTG@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>phoneNumber1</con:name><con:value>8888666677</con:value></con:property><con:property><con:name>phoneNumber2</con:name><con:value>9956778899</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidgPwuTG</con:value></con:property><con:property><con:name>Work</con:name><con:value>5914113886</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>463876635</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamegPwuTG</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamegPwuTG</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>463876635</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>5914113886</con:value></con:property></con:properties></con:testCase><con:testCase id="9a4693c1-3fd7-4f61-8fa5-e3cfc7cb7583" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11 - To Verify, Mobile no is updated with values with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3c6d3155-f754-4e7d-b745-d1a2791aaf14"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ3aFVteEo5MzBReXVVaTBLSGVLZmhQQmp0V2pGZHZVTS9RdHUvTmhaMjJqMGFxT2hhRThDTWZtUVF3cHhDREVWbzJXbFBGM1lzSlk1a1p1V3FrQW9IOEREQU9nQ2JlTDB0b09BdkU4WHhFK1dvclFCVVdLSzA5NHE0c09MSG1CSG9NTDdVTUhSazk3OGk2a1ppQXc5WWNVaDhNdjZCUHJ4MWY5WGdFTlE2SWhTaDFpbEkvMTBmNStZZ3JzZGg1ZkwiLCJleHAiOjE3MzgzMDI3MzQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.gUXUjVQpSC-_XRqFC0Ac2Z7NFZfwjOedSjfg25gMg0A</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d2c596c6-d229-494a-91df-668bbd180a6c"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
def UpdatedMobile1 = context.expand('${#TestSuite#UpdatedMobile1}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedMobile1 = UpdatedMobile1 + randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
context.testCase.setPropertyValue("UpdatedMobile1",UpdatedMobile1)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="80c9dcce-12ae-4892-882f-10d3b2227c29"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="4f543e5a-a654-4c50-b39e-d140924abc78"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
   
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#PathPhoneNumber}",
      "value": [
        {
         "primary": ${#TestSuite#primaryFalse},
         "type": "${#TestSuite#typeMobile}",
         "value": "${#TestCase#UpdatedMobile}"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="78046564-4ade-47a4-b141-88e3575fda14"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
   
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#PathPhoneNumber}",
      "value": [
        {
         "type": "${#TestSuite#typeMobile}",
         "value": "${#TestCase#UpdatedMobile1}"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c6b6e041-19a7-4de6-a4fd-ecf065651fac"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

//verify phone number
def ActualphoneNumber=jsonObject.phoneNumbers[0].value
def ExpectedphoneNumber = context.testCase.getPropertyValue("UpdatedMobile1")
assert ActualphoneNumber == ExpectedphoneNumber

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="76dc56bc-5f3d-4bad-bac7-d93554da2990"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_FMrdz7qk</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameoA0ajR</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>bd9df333-4ce0-4530-98a5-b668fc01046e</con:value></con:property><con:property><con:name>email</con:name><con:value>oA0ajR@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidoA0ajR</con:value></con:property><con:property><con:name>Work</con:name><con:value>0913538595</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>531662241</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameoA0ajR</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameoA0ajR</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>531662241</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>0913538595</con:value></con:property><con:property><con:name>UpdatedMobile1</con:name><con:value>890913538595</con:value></con:property></con:properties></con:testCase><con:testCase id="92cb6bf1-f219-4c51-be26-96902b1e0a0d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12 - To Verify, Telephone no is updated with values with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d71ae3da-1e2b-4248-bb2d-3b72ec969bb8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJkZ1Z0VURUcWFXaUZNR1RBck1XVmhKMzJMcWpqN1BEWitCNFBJR2hESTU5TDArM1U3VUlGZXhSem8vQUZyVkN2TldKejhSckZQK25iemlyaDZIN05FNG1iZXFQcVFBMjkxdDdqb2tLSE5GYm0zZ2hGc3hOMjlvMFQwbWsyWG51a1lEaldKK3JQM3dQaXdtY3A5aFlZSlVLR1BONjcvVVk1M3AyVGtkVjkrNTNHWlprV2ZFRHM2YjFRVDgzbGhQNzQiLCJleHAiOjE3MzgzMDI3MzksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.lvrEQFiBfuprHCy8yj_o1QYNLRXMkZDJhm2Qt3TQhFg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="18218c78-2b0f-4e3f-810d-ef6bd689e4fb"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
def UpdatedWork1 = context.expand('${#TestSuite#UpdatedWork1}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedWork1 = UpdatedWork1 + randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
context.testCase.setPropertyValue("UpdatedWork1",UpdatedWork1)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c6d8e53e-0740-403f-994f-d61ee4b25caf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="a7f8c500-8b83-4fbd-aa9a-8c50aa322d28"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
   
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#PathPhoneNumber}",
      "value": [
        {
         "primary": ${#TestSuite#primary},
         "value": "${#TestSuite#UpdatedWork}"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="7dc7ef39-d4d9-4d90-980f-daacd088e300"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
   
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#PathPhoneNumber}",
      "value": [
        {
         "primary": ${#TestSuite#primary},
         "value": "${#TestCase#UpdatedWork1}"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a443b3e7-c99e-43a6-a57b-1cd61a187dcd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//verify phone number
def ActualphoneNumber=jsonObject.phoneNumbers[0].value
def ExpectedphoneNumber = context.testCase.getPropertyValue("UpdatedWork1")
assert ActualphoneNumber == ExpectedphoneNumber

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b904b04d-19ff-4658-8aec-979bf162c792"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_fm4bf0ha</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMJJoqk</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>84cb253e-ed05-47a9-a79b-075db5952449</con:value></con:property><con:property><con:name>email</con:name><con:value>MJJoqk@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMJJoqk</con:value></con:property><con:property><con:name>Work</con:name><con:value>0625098690</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>252111101</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMJJoqk</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMJJoqk</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>252111101</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>0625098690</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>010625098690</con:value></con:property></con:properties></con:testCase><con:testCase id="f9cf5416-caee-4af5-a738-f645a50459d6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13 - To Verify Phone numbers values with invalid path for Remove/Replace operations" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4a7f7906-6dcc-4498-9733-e6d322c25fca"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsZ0dibG80TU1OTjRDdEJlMEIvODJHWUdvbkl0QWtDVW9ZOThmaXVaSEhIUTc1VkR3RXdnVFdGN2J4ZUdsb3RObzJXTnlTbFU5bUZMRWkwTFpmdytTR2pGQUtRcGJBYXJXUjFIQ2UxcUM1QTBaTEV0d1ZEVjdxZUdvdE9KQkwwZXROdU1YYzFPOHRNcW5KRHJqWm80ZU53TXN5c3kwR0gzM2lNY3k4R01RZyt3YmRQQkpZQzN3REJFVW9KZ1VsR0MiLCJleHAiOjE3MzgzMDI3NDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.i6D-PIN4YyLf5JziSDF2zcDxdojcS1IuP8VaY2SreUw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bd918858-3f42-4e96-aa73-9d3b433f3bd9"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
def UpdatedWork1 = context.expand('${#TestSuite#UpdatedWork1}')
def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedWork1 = UpdatedWork1 + randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
context.testCase.setPropertyValue("UpdatedWork1",UpdatedWork1)
context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f0d70b4b-a37d-45aa-aab9-69e903998fe3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="2c8d4e14-d070-4524-955d-4e509868cdaf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    
    {
      "op": "${#TestSuite#opRemove}",
      "path": "phoneNumbers[type eq \"test11\"].value" 
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="bca72a8f-7c51-45e6-8400-c433b0763d02"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    
    {
      "op": "${#TestSuite#opReplace}",
      "path": "phoneNumbers[type eq \"test\"].value"
     
      
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==true

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="36b7d7ba-e145-4824-b67e-950e7ea4402a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="aa41dec3-7ecb-41f6-8c61-3228a570f67b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_OODNhz9M</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameeRCyvt</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>d8eea8f1-9327-4a2d-9c63-0d868aab753b</con:value></con:property><con:property><con:name>email</con:name><con:value>eRCyvt@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extideRCyvt</con:value></con:property><con:property><con:name>Work</con:name><con:value>4989663261</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>077186273</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameeRCyvt</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameeRCyvt</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>077186273</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>4989663261</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>014989663261</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUpeRCyvt</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>UpdatedeRCyvteRCyvt@xyz.com</con:value></con:property></con:properties></con:testCase><con:testCase id="a7d6a56a-14f5-4091-92ae-8cbc0fe0b2bb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14- To Verify Addresses values with invalid path for Add/Remove/Replace operations" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="aabd6190-24d6-414e-876a-2ca530b0042b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRMFU0OXkvMXlyNk9FL3dyckVMNkhyeXZKTnlhSDd0QXNSekFETFlqRkhQbElqUTBGWldaZi9aKy9TNnIxTERGRlBqbFVNaVJ1L29GRGJISHVvY3F1aHVEb0tQYzFoSmxLMDhUQ0l6UkpqeEsvYWJJNVVpSVhNNit3cWttaURZazIrNVdWQ0x0V0p1b3RXa1V0anR2YnVndkNSc1IxZjRYbVhQUXZoMzc5WHFDZW9xbXpSS0szZmY1aEZqRGw5MmgiLCJleHAiOjE3MzgzMDI3NDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.u3YcdPdSZbZ5d0ofS2a8RvVly75WntvOXqjOnPU-YGM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="dacfcb82-f232-4108-979b-b869c7c9690a"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)

</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e2769a64-4766-41a4-b0c5-e94d6737d35c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="1a4c1b37-a62e-4a9e-a3a8-5f3a429c1db6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
				
					{
					"op":"${#TestSuite#opRemove}",
					"path":"addresses[type eq \"wfbork\"].locality"
				
				}
		  ]
		}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="61131190-b1d1-4377-8f76-bd1bce181887"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
				
					{
					"op":"${#TestSuite#opAdd}",
					"path":"${#TestSuite#PathLocality}",
					"value":"${#TestCase#LocalityName}"
				}
		  ]
		}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER2" id="26df0eb6-eac6-4682-bfd8-9aa20a3c37f3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER2" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
				
					{
					"op":"${#TestSuite#opReplace}",
					"path":"${#TestSuite#PathLocality}",
					"value":"${#TestCase#LocalityName1}"
				}
		  ]
		}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="32794052-e21d-4ecc-b7d6-be22a624aa0e" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c62f7c2d-4965-4e94-8d1b-c0d54befde53"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c0b2d4f2-a432-46ab-9036-97b0eab9aff9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_nlSlopKm</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameCaTtc6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>550eb808-70f0-4033-9599-44d7fade5aef</con:value></con:property><con:property><con:name>email</con:name><con:value>CaTtc6@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>LocalityName</con:name><con:value>Gurgaon</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidCaTtc6</con:value></con:property><con:property><con:name>Work</con:name><con:value>3498658276</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>710101432</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameCaTtc6</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameCaTtc6</con:value></con:property><con:property><con:name>LocalityName1</con:name><con:value>Delhi</con:value></con:property></con:properties></con:testCase><con:testCase id="c5e045d1-8888-4936-a7dc-ec0839fce258" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15 - To verify replace operation is working for Telephone with below payloads" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8621e122-6f57-4655-bb98-46fe7fb5bb34"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzbnZHTlhoOWJkQXNOemlCVU83VmVHUGpUQ2R6ZTZMSE4zN3BCSHVIK1I2Z3BibVVOM2tHM0JkRUdCR2swaEp5ckNPN3hscStGQWI5Q3RwSkpYbFhCTFZjd2tJMnQ3SFNRTHRwWUIyYU9BcUc2ajVVWnQ3YmtSa0JrZ1hDNXNYTGMrL3I0VFhsWE1UdFcvdm5mN2RMR2hnb2xjcmNSWkN0VjZCamN0ZzJHUVZEYU5IalhKbTJFN0xYcUhRUUhrVXQiLCJleHAiOjE3MzgzMDI3NTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.cl-bi_ri5NMM6l82JorAE5T1sPpkyed-bTpG97MQSdM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f6e44b09-bcba-425d-a290-aa11461f514f"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
def UpdatedWork1 = context.expand('${#TestSuite#UpdatedWork1}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedWork1 = UpdatedWork1 + randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
context.testCase.setPropertyValue("UpdatedWork1",UpdatedWork1)
context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="91b1e3fb-db1a-41c8-889a-1d4486ca83c6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="f31c0c91-8e00-48a3-bc11-b88c5b50ccda"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#Project#schemasPatch}"
    ],
    "Operations": [
        {
            "op": "${#TestSuite#opAdd}",
            "path": "phoneNumbers[\"value\" eq \"${#TestCase#UpdatedWork}}\"]"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER2" id="a3c10874-ca6c-46de-b05b-a58f8a54a25e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER2" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    {
      "op": "${#TestSuite#opAdd}",
      "path": "${#TestSuite#pathFamily}",
      "value": "${#TestCase#UpdatedfamilyName}"
    },
    {
      "op": "${#TestSuite#opRemove}",
      "path": "phoneNumbers[\"value\" eq \"${#TestCase#UpdatedWork1}\"]"
    
    }
  ]
}
</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bbb59865-5699-41e4-a34d-a1e55bbd0c47"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="12c572b3-2507-4b1a-bf76-61d6945f4790"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_GuY8Vpsc</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameQwmEC9</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4ef5310a-5fe2-41c1-b307-3394465e617e</con:value></con:property><con:property><con:name>email</con:name><con:value>QwmEC9@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidQwmEC9</con:value></con:property><con:property><con:name>Work</con:name><con:value>3174389492</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>901172797</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameQwmEC9</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameQwmEC9</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>901172797</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>3174389492</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>013174389492</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUpQwmEC9</con:value></con:property></con:properties></con:testCase><con:testCase id="e9c24918-d148-4458-9461-96a279a96dcd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16 - To verify Add/Remove/Replace operation for multiple attributes" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ade92052-f17d-4a2c-ae82-9ba479e9a575"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJvTHFSNjhXT3hpUkNsQURUUklHcHlSMldNTjlENDhNd2NtN2xmVTVpd3lDancxL0p0dHpDclpsL0h4Q1BFUGVaQ1QxK09XVmdxNDhwRmZZYXE5d1c2UklJM0pRY2E1TWZKaFU4QU50WXNkb1ZpY25jNld3QjBCN25HbWhLVzhZUGs1SmNIYk45VUlLV0h2WjF6NmQxQWkyT05BOEZ0cEtKK2o2d3QrdUpxa2FNd1NzbjArcUlTZnZwQVA3Y21TZnQiLCJleHAiOjE3MzgzMDI3NTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.5ttlGE5lO_-RK2ivkULb6Meg4X9g7U-9VFi3WxssVBY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="29abc6b6-e5ad-4158-b38d-4ec2300e4ca6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
def UpdatedWork1 = context.expand('${#TestSuite#UpdatedWork1}')
def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

UpdatedMobile = randomGen2
UpdatedWork1 = UpdatedWork1 + randomGen2
UpdatedWork = randomGen1
UpdatedfamilyName=UpdatedfamilyName + randomGen 
UpdatedGivenName = UpdatedGivenName + randomGen
UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
context.testCase.setPropertyValue("UpdatedWork1",UpdatedWork1)
context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="d39d96cb-b3e6-4665-aef0-c12d1db933e4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="6b17c4eb-6bf8-45d9-a1f8-34fcac3bd342"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    {
      "op": "${#TestSuite#opAdd}",
      "path": "${#TestSuite#pathFamily}",
      "value": "${#TestCase#UpdatedfamilyName}"
    },
    {
      "op": "${#TestSuite#opRemove}",
      "path": "${#TestCase#PathPhone}"
    },
//    {
//      "op": "${#TestSuite#opReplace}",
//      "path": "${#TestSuite#PathPhoneNumber}",
//      "value": [
//        {
//         "primary": ${#TestCase#primary},
//         "value": "${#TestCase#UpdatedMobile}"
//        }
//      ]
//    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="60cf66fb-dbcd-478f-a4c7-583ab9a911f5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
   {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#pathEmail}",
      "value": [
        {
          "Primary": ${#TestSuite#Primary},
          "Value": "${#TestCase#UpdatedEmail}"
        }
      ]
    },
    {
      "op": "${#TestSuite#opAdd}",
      "path": "${#TestCase#PathPhone1}"
    },
//    {
//      "op": "${#TestSuite#opAdd}",
//      "path": "phoneNumbers",
//      "value": [
//        {
//         "primary": ${#TestCase#primaryFalse},
//         "value": "${#TestCase#UpdatedMobile1}"
//        }
//      ]
//    }
  ]
}
</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER2" id="0dc876df-99ca-4305-9759-8c11896e3c36"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER2" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "${#Project#schemasPatch}"
  ],
  "Operations": [
    {
      "op": "${#TestSuite#opReplace}",
      "path": "${#TestSuite#pathFamily}",
      "value": "${#TestCase#UpdatedfamilyName}"
    },
//    {
//      "op": "${#TestSuite#opReplace}",
//      "path": "${#TestCase#PathPhone}"
//    
//    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a22d4ae9-b9b8-4942-a0e4-6767a26c80fd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="590d9399-34ba-40d1-beee-8798672cf584"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_I49k45gL</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamem4JBh2</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b1d07632-ac5e-4960-b873-06706ea1fbb3</con:value></con:property><con:property><con:name>email</con:name><con:value>m4JBh2@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>PathPhone</con:name><con:value>phoneNumbers[\"value\" eq \"9916616577\"]</con:value></con:property><con:property><con:name>PathPhone1</con:name><con:value>phoneNumbers[\"value\" eq \"9874569876\"]</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidm4JBh2</con:value></con:property><con:property><con:name>Work</con:name><con:value>7472614092</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>599222119</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamem4JBh2</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamem4JBh2</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>599222119</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>7472614092</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>017472614092</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUpm4JBh2</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>Updatedm4JBh2m4JBh2@xyz.com</con:value></con:property></con:properties></con:testCase><con:testCase id="2b932d12-13e1-4f5b-91ac-fe8866fd3522" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17 -To verify that address attribute supports remove operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1019e267-46d3-4e4d-b161-8d7856e59c54"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJwaDZ3WVk5UDFMZnhadUp0M3VxS0RXSEUwOWZlSDE0ZzBjUytSY2NjNzVlcW9naUVCOS9JS2QyUyt2cDRWbDdEZjNNNVIzdDlhNmErQ2xqQ0tPQllZRXdxY2g0ekhkczVyWWUrTVYwS1BFMEpqZHRvQ29vWFcxdjZXdzNwZWlSL2FpR0dEOWNsMXhTeTNkSGlXTjBUazNuTkFoaHdsSWZBdytxc1NQM0xrQ3hOeEZSKzcwR2xocDcwVlhQZk5QWTUiLCJleHAiOjE3MzgzMDI3NjMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.8V5a6dt3tOoASeGeeckIw9LvwA053u1LXJ_M8k0lHNI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3b55d708-0e0f-4e7d-b7be-2527af3b78ff"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
//def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
//def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
//def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
//def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
//def UpdatedWork1 = context.expand('${#TestSuite#UpdatedWork1}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2

//UpdatedMobile = randomGen2
//UpdatedWork1 = UpdatedWork1 + randomGen2
//UpdatedWork = randomGen1
//UpdatedfamilyName=UpdatedfamilyName + randomGen 
//UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
//context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
//context.testCase.setPropertyValue("UpdatedWork1",UpdatedWork1)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="8262963d-59cb-4680-898b-115848638e39"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="98cac802-45b5-4cd7-b0d8-23b39717396b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>	{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
			{
					"op":"${#TestSuite#opRemove}",
					"path":"${#TestSuite#PathAddress}"
					}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="f531e163-8676-4b44-8964-0a9af0a12fd1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify address should be null
def addresses = jsonObject.addresses
assert addresses == []

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="508368cf-5006-4e81-ae3c-8ee60f3672ee"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_fJ4kMANv</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName0E02wL</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ba034ffd-18a9-49fa-a12e-ba87b02b6a69</con:value></con:property><con:property><con:name>email</con:name><con:value>0E02wL@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid0E02wL</con:value></con:property><con:property><con:name>Work</con:name><con:value>8572523709</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>631068700</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname0E02wL</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname0E02wL</con:value></con:property></con:properties></con:testCase><con:testCase id="97e07095-3b92-45bb-b33f-cfd74a47012d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18 -To verify that department attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="08124d9d-57fb-42be-82fd-e0a0c07eec64"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJxTW4wL0FZU3JNUkdXSUYzZ1djSkJPRldKVi9kV2M1bStsc2hiQnlZNXVFV2FkYjRaN2hoc1JzY29FYzJ2REZXeFFVU2piVHZsTTYxSzZhZHhXRlhQdzc5TzJCUUtoaTYxNHlFWEF5eDIyWFRlWFR2VC9lM2RycHJjQ2cvNVk5TS9BZHhxT1pSSHdRd25EcVMwaVUwS25OcklscFo4dzlJOHlnTzVxcklkWWdPcDJGK3JqUmcreU5UbWJQazlnaC8iLCJleHAiOjE3MzgzMDI3NjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.-SrttKE2Fxv9_6zbqspnw732tz-E1p6Uvltjh5kb470</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="51e90695-eae4-410b-95e1-c5c3bcb0794f"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

//def UpdatedGivenName = context.expand('${#TestSuite#UpdatedGivenName}')
//def UpdatedfamilyName = context.expand('${#TestSuite#UpdatedfamilyName}')
//def UpdatedWork = context.expand('${#TestSuite#UpdatedWork}')
//def UpdatedMobile = context.expand('${#TestSuite#UpdatedMobile}')
//def UpdatedWork1 = context.expand('${#TestSuite#UpdatedWork1}')
//def UpdatedEmail = context.expand('${#TestSuite#UpdatedEmail}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//UpdatedMobile = randomGen2
//UpdatedWork1 = UpdatedWork1 + randomGen2
//UpdatedWork = randomGen1
//UpdatedfamilyName=UpdatedfamilyName + randomGen 
//UpdatedGivenName = UpdatedGivenName + randomGen
//UpdatedEmail=UpdatedEmail + randomGen + Email

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("UpdatedWork",UpdatedWork)
//context.testCase.setPropertyValue("UpdatedMobile",UpdatedMobile)
//context.testCase.setPropertyValue("UpdatedWork1",UpdatedWork1)
//context.testCase.setPropertyValue("UpdatedfamilyName",UpdatedfamilyName)
//context.testCase.setPropertyValue("UpdatedEmail",UpdatedEmail)
//context.testCase.setPropertyValue("UpdatedGivenName",UpdatedGivenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="a9af16e6-3db7-4061-b5ae-4d5850b2ea36"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="416b1e76-bfab-4148-b7c1-58c2795657da"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"${#Project#schemasPatch}"
	  ],
	  "Operations": [
		
			{
			"op": "${#TestSuite#opAdd}",
			"path": "${#TestSuite#PathDepartment}",
			"value": "${#TestCase#UpdatedDepartment}"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="cfb93071-3655-4f7a-9b14-8e1d3d0b885a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"${#Project#schemasPatch}"
	  ],
	  "Operations": [
		
			{
			"op": "${#TestSuite#opReplace}",
			"path": "${#TestSuite#PathDepartment}",
			"value": "${#TestCase#UpdatedDepartment1}"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="9c636452-72eb-4c4c-a1d9-8dcd7a1fceca"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//verify department value
//def departmentvalue=jsonObject.department
//def ExpectedDepartmentvalue = context.testCase.getPropertyValue("UpdatedDepartment1")
//assert departmentvalue == ExpectedDepartmentvalue

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ae8186f7-d611-4562-8b96-c8abd49bc62e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_V8EbSWlO</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameUAowpg</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>68914cc4-533a-43ea-b1d3-2e1cc0a4e438</con:value></con:property><con:property><con:name>email</con:name><con:value>UAowpg@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>UpdatedDepartment</con:name><con:value>Support</con:value></con:property><con:property><con:name>UpdatedDepartment1</con:name><con:value>IT</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidUAowpg</con:value></con:property><con:property><con:name>Work</con:name><con:value>7677213470</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>667923858</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameUAowpg</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameUAowpg</con:value></con:property></con:properties></con:testCase><con:testCase id="460d2ed8-6451-4b29-b4c6-1908e3879f93" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19 -To verify that department attribute supports remove operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="02fbe925-a3fe-4bc0-9dc4-a5d0ab4c6a75"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJFUDd1QnhUWkhYSi9LYXhrWVk0bWxMVTd6N3gzOFlPSXQ3M0cvL1FvOGF6SWg1MC9JNTAvcjE5dUZuaVl3bzg1MkZhUml6anJaSjFqVjlaMlZXMlBna1Mzak9kMjhQclRNaDVReE5RN1ZnR0ZKUXJjWHYzaHNvL1EyaWtUT2dGblZQaTZITjN3N2t1Um1QbkE3NlFvOHcwamE3SWRNazFWQ0JHNDZoSzJVYWt1S0VaQkI1ZUQ4T2pkOU1yWnUwaEMiLCJleHAiOjE3MzgzMDI3NzIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.WE7u9FnG50aulqcKusAY67waVuUIWBWQv-lUcs-h1yo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="ed1f742d-25d2-48b9-b93b-9079393ff0c9"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2




//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f5897b67-c471-45b9-b018-b9a20c8ce052"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="27820855-f459-4c68-9e12-f1f098b336bf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"${#Project#schemasPatch}"
	  ],
	  "Operations": [
		
			{
			"op": "${#TestSuite#opRemove}",
			"path": "${#TestSuite#PathDepartment}"
			
			}
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="ea267d77-3989-4035-a5c3-c750e86e7540"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//verfy department should be null
def department = jsonObject.department
assert department == null

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8ac158c1-f3d4-4717-aa51-c4cb8fe5d47e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_hOn5xy4U</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName9T71HK</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>38f814ee-1bb8-43bf-91be-b146b499c500</con:value></con:property><con:property><con:name>email</con:name><con:value>9T71HK@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid9T71HK</con:value></con:property><con:property><con:name>Work</con:name><con:value>9570727957</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>425848133</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname9T71HK</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname9T71HK</con:value></con:property></con:properties></con:testCase><con:testCase id="c8249a96-6dbf-4251-9d09-2cb72dfec20f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20 -To verify that costcenter attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e2617849-61e1-4461-ba63-7c5eac63f19c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhV09aQWNhMkk0bEZKK0JCYXdDQjNrR0lUemRra2c4bDUwNitsV3BBUzFpQnkrcVQ3OGpESm9wb0dsOVJRVGZYYVRYcTlPZkxPcHNOVXBPanNKUkZvRURzYm5xUkdXSGtCcytCVTRsK0tBVGZRalg2eWtyQUtiZ0wxOFA4SEhZUWpoWVN2SWU5TDV3WWlvZkVqZjRoZVZBbnJvSXdPTEZmZFVCODhSUTZIUGFDUnBQNnc0ZkR6N3ZBREZzWExSdDEiLCJleHAiOjE3MzgzMDI3NzYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.VHsBy7h1Ygo9gA5PWqbYKb3EoP9FVKSkFzcyR2lgQ44</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="73e52ca9-16a4-437e-ab77-84d9d3f04607"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2




//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="78cd9874-dfc1-43e1-b206-56143636fa7e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="4cf84b65-70f2-4ebc-b2d3-0b2e1780cb41"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"${#Project#schemasPatch}"
	  ],
	  "Operations": [
		
			{
			"op": "${#TestSuite#opAdd}",
			"path": "${#TestSuite#PathCostCenter}",
			"value": "${#TestCase#Costcenter}"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="2a1ebfa8-1180-4555-b8f3-f00fee5613bd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"${#Project#schemasPatch}"
	  ],
	  "Operations": [
		
			{
			"op": "${#TestSuite#opReplace}",
			"path": "${#TestSuite#PathCostCenter}",
			"value": "${#TestCase#Costcenter1}"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="e2b77042-0a52-4915-8e11-d0f3140a427b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1737c832-1cdd-459b-be84-79700429cb1d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_uHwVen9o</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName9frDGq</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>11e2cfee-3c00-45e5-9ebe-67a8157d0d4c</con:value></con:property><con:property><con:name>email</con:name><con:value>9frDGq@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>Costcenter</con:name><con:value>12345</con:value></con:property><con:property><con:name>Costcenter1</con:name><con:value>11111</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid9frDGq</con:value></con:property><con:property><con:name>Work</con:name><con:value>1361218587</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>180184753</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname9frDGq</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname9frDGq</con:value></con:property></con:properties></con:testCase><con:testCase id="2458caf8-4ff5-4f2c-999a-01b407648091" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_21 -To verify that cost center attribute supports remove operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="dc68ebd2-7dc8-47b2-9516-fb6e40d782b2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI3WDJRZFJ3UUJMb1hSdlpsWW5Pakh6M3RpMmp6V09EbU54aHEvTVVWaGFXNGJDbGtwdkE2NFRSSzJlSW9tSTdDSjdjSTVRR3pTWEMrVHpSa2VqVVp1MklzdEhGSS9zYWh5b0pYMWFYTXM2ZWk1YVc1TnlsOStsV0xmR2NOK0JmaGk3Tk5iSVlNQTFtM3V6M1UrRkpXVWs1WldoR2tDTFJSVDIzRWZOMzhQMVNBRUQzalkyekJEKzN4RU11KzFibkoiLCJleHAiOjE3MzgzMDI3ODAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._04CDHdbDJuF3_Ss-HpzGyv8J3Y-Pt65gMu8PYN6a-I</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="43fad2fa-3f8a-46ec-ac26-1544ae67e705"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2




//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c87e3924-9b00-449d-b6a4-d1988c94ca63"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="94c85ca2-2c21-4417-968e-a3f1b1792cc9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"${#Project#schemasPatch}"
	  ],
	  "Operations": [
		
			{
			"op": "${#TestSuite#opRemove}",
			"path": "${#TestSuite#PathCostCenter}"
			
			}
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="53affc6c-9a10-4d5c-a341-de4497740f0a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//verfy costCenter should be null
def costCenter = jsonObject.costCenter
assert costCenter == null

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ee9725d5-14b7-46f5-a700-88d47818683b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Q5KFKEdl</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameY2J8m2</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3e96a632-328d-4e96-9f32-8471d74ae299</con:value></con:property><con:property><con:name>email</con:name><con:value>Y2J8m2@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidY2J8m2</con:value></con:property><con:property><con:name>Work</con:name><con:value>7826296537</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>192508945</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameY2J8m2</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameY2J8m2</con:value></con:property></con:properties></con:testCase><con:testCase id="b2a1ede0-c06a-4ada-a5e8-ea7694c032e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_22 -To verify that country attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8abc4ba1-2e67-4c40-94b7-6aa5fde6fe84"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJOTGhjTDIwTjJhUEtxUDBIbzVyV2t1VklIY0xydmZ3Q0wyNTRVaGFCSGpoWHZXMkpyV2wyRTBISHkwTUU0TVk3S0RXay84NXBVQ3pIVkJLQ3VCdVp6Ujh6Q0gxOEhqUms0bHRraTVzQXptZ0M0a084V2tkVzEydVhBZWl2NzdramxTUldRZldXWFF1NlIrKzZxa0xoZjVhUHFzbjhFTTQ4ek1tWXY1eTBoVUt3U3VPcU8rZHBIYkNXUGJ0VjBEM0oiLCJleHAiOjE3MzgzMDI4MjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.JQEatusdVTkWatcxvG_f7rUSYHfPrvIwwsOBRbEU-tk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9bec0f68-a169-4a76-8af2-86d3ed8de270"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2




//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="2ee27c35-7e70-4e4f-910a-9715c8ca5cd6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="69194922-7781-4a4a-9339-5e9196e2f1a9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
				{
					"op":"${#TestSuite#opAdd}",
					"path":"${#TestSuite#PathCountry}",
					"value":"${#TestCase#CountryName}"
					}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="6aba1311-3053-41e7-9448-702dcbd952af"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
				{
					"op":"${#TestSuite#opReplace}",
					"path":"${#TestSuite#PathCountry}",
					"value":"${#TestCase#CountryName1}"
					}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="118c9f49-ccb6-42ef-93e6-e3e02a7f3412"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify address 
def address = jsonObject.addresses[0].country
def expectedAddress=context.testCase.getPropertyValue("CountryName1")
assert address == expectedAddress

def address1 = jsonObject.addresses[1].country
def expectedAddress1=context.testCase.getPropertyValue("CountryName")
assert address1 == expectedAddress1

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="806fb854-51b4-4d31-9bad-ac118e8d8593"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_a5lKuU3a</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameXORWKT</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2c05570d-cccf-4071-b2e6-918caec81c4c</con:value></con:property><con:property><con:name>email</con:name><con:value>XORWKT@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>CountryName</con:name><con:value>delhi</con:value></con:property><con:property><con:name>CountryName1</con:name><con:value>Canada</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidXORWKT</con:value></con:property><con:property><con:name>Work</con:name><con:value>3114105609</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>578062745</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameXORWKT</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameXORWKT</con:value></con:property></con:properties></con:testCase><con:testCase id="9f3b446d-bb30-45f6-a1ea-105ecc24e0a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_23 -To verify that Location attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4545493e-61ea-4ea8-acc6-5a892c446045"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJjQ3R5VjBEVzdSRDBwZ3BRSzdpOVV6SmdmQlFKTk9jdHQrYnZEK3V6NkhjTlFJQ2p2NVcvYjdndlhEcmtGbDRJWGpqUVNYMWVNZWIwN2RqQ1FVVmVJOFNSVFFiQ2t1K0V1b2ZaQzRyb0VoSnJ4eVNrei9JL01ySUxObll2STBhbUc4SzZOT2VFQUFHWThoamdweXVESU9ia2E1QmI2elNxcnhMcFVxOHhBMkxCWENxenBOTDVDZk5LMGNtZUZTTDJTQ0c4NVV5dkFETTRQck9zQjNJQzJ3PT0iLCJleHAiOjE3MzgzMDI4MDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.OjhglHI5FNc7NJCd0fUYuiPjmK-Mdyxs6NSm89D_8II</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fdfe1af4-eec6-4ed3-b0fc-dfec5771d8ef"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2




//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0ec52d08-b93a-40cb-a228-aee6d36ad351"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="bcd10c6e-bb7b-4ed5-ad3e-dabccc65bb70"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>	{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
			{
					"op":"${#TestSuite#opAdd}",
					"path":"${#TestSuite#PathLocality}",
					"value":"${#TestCase#localityName}"
				}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="5c542011-5ae3-4eeb-8b8e-eafbd6ccdfda"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>	{
		  "schemas": [
			"${#Project#schemasPatch}"
		  ],
		  "Operations": [
			{
					"op":"${#TestSuite#opReplace}",
					"path":"${#TestSuite#PathLocality}",
					"value":"${#TestCase#localityName1}"
				}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="f82aab16-b0e9-4716-9d49-a137d8f355d4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify locality 
def locality = jsonObject.addresses[0].locality
def expectedLocality=context.testCase.getPropertyValue("LocalityName1")
assert locality == expectedLocality

def locality1 = jsonObject.addresses[1].locality
def expectedLocality1=context.testCase.getPropertyValue("LocalityName")
assert locality1 == expectedLocality1

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8f398cc6-f2f9-4c84-b230-ca880a89d9b0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_c9lkqZQS</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamepmbqM6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ade0c183-5dc3-4811-aa1a-dff4ffe1c9a3</con:value></con:property><con:property><con:name>email</con:name><con:value>pmbqM6@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>localityName</con:name><con:value>West delhi</con:value></con:property><con:property><con:name>localityName1</con:name><con:value>Mumbai</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidpmbqM6</con:value></con:property><con:property><con:name>Work</con:name><con:value>6060743168</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>491579634</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamepmbqM6</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamepmbqM6</con:value></con:property></con:properties></con:testCase><con:testCase id="a3637af5-bd0c-4bfa-9fed-8ed4d836bb15" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_24 -To verify that Username updated successfully" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="cdc7bd7b-e643-4028-9377-d6bd8df32244"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ4ZEFkQ21WUjFpUHNaWkpEdE13SnpZamU5R1FyRDRGL25pNTFKaEtBdXRPbVpINGV2alJWQno1cGc0UDI4bXVGSzRSR3kxUUJENlJxRGovT2hRTHBlc1lSbVl3a25TbHFodnRGM2xzS05HUi82bGFaL1NNVzNSbVZ1emhwdXpQMCtsRGdndGdWYkxaQWZCejFQd3JVZm0waFZUdUthOENLMWtxZ3R6MVZTanc9IiwiZXhwIjoxNzM4MzAyODEwLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.gwe4ar7T8nGNrPyHsvitWOGf7-7AEETaRfTGeIU3G0k</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1df17b87-2f7b-491c-825b-29c6931699e0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')
//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
UpdateduserName= UpdateduserName + randomGen



//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="bac52b07-e3fb-4b95-bd23-3640373630d0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="6c3cb62a-1e05-403a-97a8-daf4645f1d7a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#Project#schemasPatch}"
    ],
    "Operations": [
        {
            "op": "${#TestSuite#opReplace}",
            "path": "${#TestSuite#pathUserName}",
            "Value": "${#TestCase#UpdateduserName}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a868c9cc-a593-4b46-9a2f-2c157670d697"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualuserName = jsonObject.userName
def ExpecteduserName = context.testCase.getPropertyValue("UpdateduserName")
assert ActualuserName == ExpecteduserName
log.info ActualuserName

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4f17b906-b935-497b-b759-72a102a590d4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_QRfVMy4k</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamegT24C4</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>fbb09361-bda0-45c5-85b0-4a0127201d9f</con:value></con:property><con:property><con:name>email</con:name><con:value>gT24C4@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_QRfVMy4k</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidgT24C4</con:value></con:property><con:property><con:name>Work</con:name><con:value>8307584456</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>833779935</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamegT24C4</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamegT24C4</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKgT24C4</con:value></con:property></con:properties></con:testCase><con:testCase id="fa831ee4-b644-4b24-b566-6ff528c5b0a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_25 -To verify that Username is not updated with special characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3733cd69-dacf-4d5c-be1a-95347887a29f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJxeWpqZUNhRkN4ZG1GUjVKOXdybVNNYkFiZmVGc2c5UDdaQW9aZUxuRUdqZUIyWnJoSEpLejlhUGpMZU9sTFdJZlhhclZPb09BYnV4WDNtUWloWXlPLzg4M0w4cXU3M1JxaXB6c0dIYW1uSEJVTkVOTzNxWjJHUVNScktOeDFmSHFYRHhvdFdQQkZSZXNSWkZXOEgrYVBIMCs3eEphd2VRY0p3Sm1xLzAyTWM9IiwiZXhwIjoxNzM4MzAyODE0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.6yU1JAgUFToXjltNtreoHGxdx7gyxFWU5kKNj7POSz4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="259328f9-c640-43de-b8c8-24495d4040e6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

//def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')
//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
//UpdateduserName= UpdateduserName + randomGen



//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="3fa6c1d7-dc23-45d5-a033-5ddeb3006903"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="ddada559-7168-4e3b-9cc4-49dca09e91b6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#Project#schemasPatch}"
    ],
    "Operations": [
        {
            "op": "${#TestSuite#opReplace}",
            "path": "${#TestSuite#pathUserName}",
            "Value": "updatepatch$#@"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==true

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="bcdde97d-464d-4d08-9e14-106ca3d83428"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_V7hHVUXD</con:value></con:property><con:property><con:name>UpdatedUserName</con:name><con:value>Kanchan@#$</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c6ef6a5a-20e3-432d-b12a-9466265a8f63</con:value></con:property><con:property><con:name>email</con:name><con:value>LVimYt@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidLVimYt</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameLVimYt</con:value></con:property><con:property><con:name>Work</con:name><con:value>9346101910</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>321536135</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameLVimYt</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameLVimYt</con:value></con:property></con:properties></con:testCase><con:testCase id="37dd2566-04bf-4467-8831-121578f8fc58" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_26 -To verify that user is deleted after updating Username" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b80c51f6-d04f-468c-b06b-f8e9d1d123ab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtV0RhMHZaMit3aDcreEpDRkpiMFI0YTJDN05rV1pNRXhjMEgzYlNOZWltekZGMFpoUTVvb0Z5TGxFOStTSk0ycnNvSUwrOEFWZjcyajJOSWw4dkpNMUcrcFIwek1OckNnRlNRTXJZWms0OUJYTE1vYWlIN2lRUFJyeUFGMVhoQS8vNGlZS0dqYi9GbWxOQ0JnZEd1VDRWQmZ4T05TekxiSmh5T3JmSWNhb3NIN21wZUNrbVBCckxkZTBmSnhFN1IiLCJleHAiOjE3MzgzMDI4MTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.w42pkINhb2i8S3tjnXYwxiD8QBRvrTI07BTo8aLkSi0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b455d6e5-195d-4188-87cb-d9a808647cd8"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(9)
 def randomGen2 =RandomStringUtils.randomNumeric(10)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')

def UpdateduserName = context.expand('${#TestSuite#UpdateduserName}')
//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
UpdateduserName= UpdateduserName + randomGen



//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("UpdateduserName",UpdateduserName)</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="338ed310-be9a-420d-88db-f58fa62f95b4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primaryFalse},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#Costcenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="468575fa-821a-4bd3-ac2a-8b852649bcc7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a7c73675-c09d-403e-b19a-836af0f0d8dc" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="50957f6a-e323-4f23-af72-f7c746c23ce1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "${#Project#schemasPatch}"
    ],
    "Operations": [
        {
            "op": "${#TestSuite#opReplace}",
            "path": "${#TestSuite#pathUserName}",
            "Value": "${#TestCase#UpdateduserName}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="125dd120-edd5-42d8-a607-44e884ff926d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ce9acc09-c3d1-48a0-b948-43778576be79"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_RI3Kd1uw</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameWVYy2n</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b4bb4796-bdac-4eb4-bd50-feb34738292d</con:value></con:property><con:property><con:name>email</con:name><con:value>WVYy2n@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_RI3Kd1uw</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidWVYy2n</con:value></con:property><con:property><con:name>Work</con:name><con:value>1341703063</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>703501930</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameWVYy2n</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameWVYy2n</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KKWVYy2n</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>01</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>11</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KK</con:value></con:property><con:property><con:name>UpdatedMobile1</con:name><con:value>89</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>9</con:value></con:property><con:property><con:name>UpdatedGivenName</con:name><con:value>updatedName</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUp</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>Updated</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>pathUserName</con:name><con:value>userName</con:value></con:property><con:property><con:name>PathPhoneNumber</con:name><con:value>phoneNumbers</con:value></con:property><con:property><con:name>PathLocality</con:name><con:value>addresses[type eq \"work\"].locality</con:value></con:property><con:property><con:name>pathGivenName</con:name><con:value>name.givenName</con:value></con:property><con:property><con:name>pathFamily</con:name><con:value>name.familyName</con:value></con:property><con:property><con:name>pathEmail</con:name><con:value>emails</con:value></con:property><con:property><con:name>PathDepartment</con:name><con:value>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department</con:value></con:property><con:property><con:name>PathCountry</con:name><con:value>addresses[type eq \"work\"].country</con:value></con:property><con:property><con:name>PathCostCenter</con:name><con:value>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:costcenter</con:value></con:property><con:property><con:name>PathAddress</con:name><con:value>addresses[type eq \"work\"].country</con:value></con:property><con:property><con:name>opReplace</con:name><con:value>replace</con:value></con:property><con:property><con:name>opRemove</con:name><con:value>remove</con:value></con:property><con:property><con:name>opAdd</con:name><con:value>add</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property></con:properties></con:testSuite><con:testSuite id="5d6fffe2-f812-4ca9-87d9-f2fb451f6df4" name="GetUserByID"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="98af9057-99f5-438e-8457-362f304efeee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-Verify that user is fetched through User ID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c1a9d4b9-3c3a-4266-b362-84ceb3be08dc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJJUTgxNVd3eU8xdldnL1FINUhSY3U2N1E2UXYxcXBVSnpRYWhVczM5dVVmQ2g3bGRtbG9kMWU3WGhDelpaNWVraS9qNDBxazBKd3JobVgzMFRxNmdHMjZ0cnAzUlhVSmlXejJiOWJ5Y3YwVEM1SS9zRFltcGRRNkhLU1JaTXhyWG1Xdm5ua0ZIbWVCK0daUllxVWxPZC9XRmQydm1ZaDVodjM5cXhsSkFxQ3FqT2FMQ1pnKzNrTW03cHg4c3l5bU4iLCJleHAiOjE3MzgzMDI4MzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.TiBveXC71UdMwJYQz2aEW3zE-gSGC3guHdAD4EkXppI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="6fb335d2-852c-4949-b5aa-8aa1e746498f"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f5d2c032-a125-47e4-824e-caebb0148aa7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="0125577e-942c-4d44-bdcf-4f5b3e19e1e5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3af52745-10eb-4979-8f31-2db379d5991a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2c480417-2659-42d6-8bb7-6ddddbd27146"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_LVsCwUoY</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamegxlj62</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gk</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ftcne</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>66ad04e6-eee6-4045-ad9b-5520b2f5fe8a</con:value></con:property><con:property><con:name>email</con:name><con:value>gxlj62@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidgxlj62</con:value></con:property><con:property><con:name>Work</con:name><con:value>27443320394</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0022330092</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamegxlj62</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamegxlj62</con:value></con:property></con:properties></con:testCase><con:testCase id="8b15c701-442f-45e1-96c1-b2f40426b46a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02- Verify that Inactive user is fetched through filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7ebb108-c074-4c4f-be62-51c1e095136a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJlcEtLMlNrakNUajNGc2pZcW12WkFLemd1anp3S0NUMW5oMFRrcENHbFNGNXZRMENaZ0ZEK1lvQ1RKNk5LbFEzdDRlalh1RjFOQmdBWUtpeVYxODZ2RENJN1F2UUMvM2NDL01yc2E5ejluMml3dmxjY05nVncvTWxHL2tlU0UyTEZsYkJaM0d0OUFJNW9JRkxLbmxBc1FTUHFmbFdFUmRBWGNLRUxpVGtPU1pGVitISlZWL0l3dm91STg1K0tPTDIiLCJleHAiOjE3MzgzMDI4NDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ptHrabMlLKF3YB9h7U1hd0KuWbzcUQH1X5XT4ChQ27Y</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="ea2f1f94-f882-4331-82c3-47051fe099c8"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="04f71091-43c2-4ee1-b41b-8e4325b4ac7f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#activeFalse},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="4504dbb0-ca8e-44dc-85b9-d88adec36509"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3af52745-10eb-4979-8f31-2db379d5991a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

 //Verify active value
def ActualActivevalue = jsonObject.active
assert ActualActivevalue == false
//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="includeInactive" value="true"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="90e3b161-fc94-4854-98e5-393af26406ef"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WbojsxDb</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamepfJQnp</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gk</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ftcne</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5bc42fe2-a46d-4ee7-8cbe-81819ec68318</con:value></con:property><con:property><con:name>email</con:name><con:value>pfJQnp@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidpfJQnp</con:value></con:property><con:property><con:name>Work</con:name><con:value>49997611652</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3623397333</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamepfJQnp</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamepfJQnp</con:value></con:property></con:properties></con:testCase><con:testCase id="e1a8f1b0-8140-4e59-aeec-7a9b5234d57f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-Verify that Deleted user is not fetched" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="efb417ab-e357-40ec-b6ed-fbf2f301723b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIvZHhOcG4ySHUzb05EbjNUeU1VbHRZR0IzYy8xVVJrbmVoMnJmRkNzbFVQRnBFNk9GTm0wME5LZ1ByeGxqODI5cWhWUUpLZTlzK29MM08xRW1kd3VTdURkMDJmNmRXZUwyajFGUVF3VUJnTGJjalhZaHMvN051K0RhaGU2QkFlbnZUUGtVcHhuUG94Z2svZCtXbXZybWVFREFNWVlla2JPYXFHYXJUanNqQ3BkamhsVmozQktDOHdJYk1RZlkxc2oiLCJleHAiOjE3MzgzMDI4NDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.El5nqijJqL6S7FP882ctuNOWwVX0vsT9MlfgCeNl_Po</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="0c68915c-961f-4f5d-911c-b68a86b64589"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f6117bf4-c5b3-496c-ac4f-d0f180283d54"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="5bbdbe98-5c27-4bc0-938e-88fbcfe03001"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="7eb4e040-4cf1-4310-a2ad-2108893a4ce9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3af52745-10eb-4979-8f31-2db379d5991a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="e85058e2-1d98-477a-b6af-adc7be566bbd" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6c999950-0594-48d7-b386-de3c9a3f1db7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5nHl7Qkk</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamepvbqqP</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gk</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ftcne</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8ab1b37d-6bd5-4972-814c-078e093e1075</con:value></con:property><con:property><con:name>email</con:name><con:value>pvbqqP@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidpvbqqP</con:value></con:property><con:property><con:name>Work</con:name><con:value>15624613094</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2853641128</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamepvbqqP</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamepvbqqP</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>activeFalse</con:name><con:value>false</con:value></con:property></con:properties></con:testSuite><con:testSuite id="34aefde1-3122-45f8-ba12-27e9349893a3" name="GetSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9d43953d-b363-4ba3-83d2-ede95b07ff53" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify SCIM User by valid UserID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8b24a999-2848-4a90-a4f1-6118070287c6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJDaEk5ZlZTcFYyRHpUa0MwaDdIUHhpMjZqRVBNRU04bC82dFJPMUQrRFdmaTJGRUh4ZmVwVUxZbkQyT0xzanR4MFpKdlExM1NjdVMwOWhpRWdhenlKMDNkTkhUVkV6UE56UlJsSFoyUFJ0LzMybldtTjV4OWhKNEl2cy9wejczayt2YVdDVlBXVURpRnI5dUxRRFJPOEpXSEZUVng1V0pqT1VyQ0hhTlZ4eXc9IiwiZXhwIjoxNzM4MzAyODUxLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.kmSwkPRaNyIKcrnkijHB0zbPa6bgHokhHtKQCd0tFEU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c561c37d-c64f-4f8f-91c0-53b35a4890c6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="47eb4052-1803-47ea-bde2-e29506bed004"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="9cc9a376-6750-400f-81bd-77d174605444"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="68b8132d-0757-40a8-8a01-94f5377fbf05"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wLwju5Xx</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName38lYw2</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>56212696-38cc-48cf-b588-791efe63c239</con:value></con:property><con:property><con:name>email</con:name><con:value>38lYw2@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid38lYw2</con:value></con:property><con:property><con:name>Work</con:name><con:value>51822247705</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8310291271</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname38lYw2</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname38lYw2</con:value></con:property></con:properties></con:testCase><con:testCase id="345a65f4-8d0f-4b66-ac7c-14b0f7ae863a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify response for attribute &quot;userName&quot; with valid Operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4e312a35-3cf5-4260-948a-a2f12ac1c620"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJZSUFCWms0dUR0enF1akhiUjFqcmNUNnJ1QmdCcjk1SHNrcDlXeEltWS91NG5CNWJ6Q25aMWN2aENzdE5kTlRyNFF0LzNCZC93MGFta055bnY3Sm90WnpNeEp1aTVMOXg3d0hPbnROa0FXcnlSS1NDYmhzekJERUphdlkwZUdKQzlFQjJ3M1d1RVNiSVhxWWE1cGpaRlJXUjB5aE9mN3haZ2NzcDVxQk83TUlIWmhDZXhWTVlOQ2tYeUN1L1ZyaEwiLCJleHAiOjE3MzgzMDI4NTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ycfgiUn37IrICLB1fGMgalg17US-8Id8wIhccHvy7mo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="51420576-429b-4e13-8998-a98d5298b446"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="6bacd9d9-635d-4f08-9c19-25e55adc1d38"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="74c340f7-f21f-4fe8-8007-ec288b4b208a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTEREmail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify email and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualUserName = context.testCase.getPropertyValue("userName")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName==ActualUserName
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage


//// Verify Country,Location not null
//def country = jsonObject.addresses.country
//def locality = jsonObject.addresses.locality
//assert country != null
//assert locality != null

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="49ec7a9d-4cd1-4305-b820-a6d3ec0a93cf"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_6oswI7Od</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameSkKAkd</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7fb8b5d5-c34d-474f-95d5-d3eba8c07428</con:value></con:property><con:property><con:name>email</con:name><con:value>SkKAkd@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidSkKAkd</con:value></con:property><con:property><con:name>Work</con:name><con:value>09692964671</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9506663425</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameSkKAkd</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameSkKAkd</con:value></con:property></con:properties></con:testCase><con:testCase id="8b26f663-50c1-43f9-b710-2e8a5b11d46b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify response for attribute &quot;userName&quot; with valid Operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3b751a48-8d41-4d59-b900-9dce90a2e97b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI5MzZ1VkdaZnFLYXF6aG4vY1kyblVBNDdzcnhQczJzeFNrNDEwVjgvbWU2c01KZ0k2TVJmby95a2R5T2NvTk1RdVJqLzR0UnI0V3R1engvMGdtdUpXNGdxaXM1VXNuaEpvQk9QVXJhZVpkWGlXMWp2cFRyTTFhK0tpZmpxaXZrTDc5dXFzY3BsZnhnZm0vM3QzdDRyS0dsd0dtZVlsNU5jTVVTdy9zS0p4WjdBRC9mYWl6RENUWE1mQ0docGI0T0MiLCJleHAiOjE3MzgzMDI4NTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.5aX15jX1x1WIG6LIt51TKilkG6e2IE1GeM1O7UQGBn8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9270579a-3a07-4ece-9850-d491d2dfa8a1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c8092d4d-bc25-4ff8-8132-808dadd185fa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="fcde83de-46eb-40b9-9014-346b9b0107f6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName not present in response and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()

def ActualuserName = context.testCase.getPropertyValue("userName")
for (int i=0;i&lt;ResourcesArrayLength;i++){
     assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=ActualuserName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName ne &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ce1f25fb-029e-4e1a-86b9-5cf3f682b352"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_4WUY89rS</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamePJMRyP</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>55812faa-2a63-4426-ac63-88ec103a4000</con:value></con:property><con:property><con:name>email</con:name><con:value>PJMRyP@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nl-NL</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidPJMRyP</con:value></con:property><con:property><con:name>Work</con:name><con:value>97983119869</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3192224861</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamePJMRyP</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamePJMRyP</con:value></con:property></con:properties></con:testCase><con:testCase id="9d10c33c-e3ea-43df-b891-a3ccf46b8ba5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To Verify response for attribute &quot;userName&quot; with valid Operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7d43e37f-223e-4fbe-9636-1716484e3b7b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIyY1FRTGljZytwN0lrM2JiSXRHTHVtNFoxckJheHNyK3dwUTZXUWJMemY3ekRRNXpMMFBXNW9MZkFOUjF4cXk0RDJzNUJhcFZTVnN5TERGbHE0TTNBVUplRDV5SkZpMWxXTTI2SmJ6YnAxUndvZ1BaUDZpYXNEUFhCdmxIT04vMGtFZUNFOUJFZ0NETmgyTXRheDhsamh1TmxBSEtvbE4xVkN2T0M4TXVJbHpVZko3WTFTNTVUQzJZRjl4N2wzT0EiLCJleHAiOjE3MzgzMDI4NjMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.HcK91j9UOqpr7teDGw9-yKHkpz4afWf2MfLWkkkV6E4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a2ea8a2f-f282-4e2c-96b3-69ade5d8d8d2"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="13f11fb9-0afc-4314-9660-4a95dd081aaf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="f955e573-16f9-49ef-a55e-e6214e219a4d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualUserName = context.testCase.getPropertyValue("userNameContains")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName.contains(ActualUserName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName co &quot;${#TestCase#userNameContains}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a4d28e01-1731-45da-9bab-cb4a14326525"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_iPpdg2pE</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamePg4qSe</con:value></con:property><con:property><con:name>userNameContains</con:name><con:value>UName</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>927c43a8-1e53-416d-bd18-3c94fc40d8a9</con:value></con:property><con:property><con:name>email</con:name><con:value>Pg4qSe@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidPg4qSe</con:value></con:property><con:property><con:name>Work</con:name><con:value>74046222049</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4670702850</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamePg4qSe</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamePg4qSe</con:value></con:property></con:properties></con:testCase><con:testCase id="341f80ec-0c72-4a53-8c35-934fd5c84622" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To Verify response for attribute &quot;userName&quot; with valid Operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3d879584-22e7-4cc3-b059-ee1b461c97e3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5bXlRZ2svMXZ2eG9IM1kvZHFudmUvdkh0N2NRNFRTY0ViV3p1RitIZVpZL1QwYzFMdU96dURRYnBQTXNTTWhwZGxidm1DcUQzNk5QZ1hyM012L0p5VTZPQzJIVmloNHJ0eGFiOEt0dEh2VjVDN3doY1lNVDBzVDVlb2trUEhYM1FQNENEUlVEVUNxeUJPbWdIOUhtSkl2NkFsTUR1WG9EcjRFQXViREY4QjF2akJEQklndEdJKzJ4T3ZXZ3VCQm4iLCJleHAiOjE3MzgzMDI4NjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.MD3dfpznxkFY4Qj3DHQAc3RPQ7pLYdYCu1sy_s1GmWs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e2261263-2a5c-4d2c-b9fa-da56252adfd0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def userNameSw = context.expand('${#TestSuite#userNameSw}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
userNameSw = userNameSw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("userNameSw",userNameSw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4a0866a4-7f4c-43e9-9998-8849cddde066"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="bd882b75-1bbc-4b98-89b3-20d4733b9868"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def ResourcesArrayLength = jsonObject.Resources.size()
log.info ResourcesArrayLength

for(int i=0;i&lt;ResourcesArrayLength;i++){
	
def ActualUserName = jsonObject.Resources[i].userName
def ExpectedUserName = context.testCase.getPropertyValue("userNameSw")
	assert jsonObject.Resources[i].userName.contains(ActualUserName).toString()
}
////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName sw &quot;${#TestSuite#userNameSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="3"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d91cadab-d08e-4c2c-b244-35f89a73932c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_RKL3iGwF</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameJ1viJh</con:value></con:property><con:property><con:name>userNameSw</con:name><con:value>UName</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e4983c15-aa68-4d68-88ab-ad8f74bef65d</con:value></con:property><con:property><con:name>email</con:name><con:value>J1viJh@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidJ1viJh</con:value></con:property><con:property><con:name>Work</con:name><con:value>43633773655</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2648668931</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameJ1viJh</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameJ1viJh</con:value></con:property></con:properties></con:testCase><con:testCase id="30f72948-7796-445c-a6b6-938466a63ce0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To Verify response for attribute &quot;userName&quot; with valid Operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e87baad4-ae44-476c-a21b-a178dd3dd40a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIrZHVsMFRnN1poN3NjUWlDaVdDRENWb1hTSWZWVkROdVVheWFoVGlGSmZGY1lUQXpTM1JKN3RTRXg2aHFHempjRTFJd2x2ZUFJL1hsbU1ZbjBsK2tiQS9TSHNwNTFtZjRyTVdzblo3M2M4Ylh0OXhVWkZ6VDYrM2U3V010N25tdGZla3V2K3RRdUl1dVBVOU9mbk9saDRpdGQ2cU0vRURlc3pHejhjbDI0b1RRckVRMVBac2F6N0VwSUlxVFpBSjIiLCJleHAiOjE3MzgzMDI4NzEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.3U35OBBCCHTQm_TCn2NIUWB0Q-JwtZ9LqZEAm2dRDeo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="29f96a1e-2820-4614-ade5-b7db0b6d9e70"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def userNameEw = context.expand('${#TestSuite#userNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
userNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("userNameEw",userNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e50664dd-b4c4-4f38-8d0f-0eee1f4a01a4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ca1ec872-c351-4dbe-8a74-c4f652ae2209"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User name for User
def ResourcesArrayLength = jsonObject.Resources.size()
log.info ResourcesArrayLength

for(int i=0;i&lt;ResourcesArrayLength;i++){
	
def ActualUserName = jsonObject.Resources[i].userName
def ExpectedUserName = context.testCase.getPropertyValue("userNameEw")
	assert jsonObject.Resources[i].userName.contains(ActualUserName).toString()
}

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName ew &quot;${#TestCase#userNameEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="71efb6b3-8452-4443-8c33-a63ba0af9e1f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_00bIwgv9</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameB4t8Xv</con:value></con:property><con:property><con:name>userNameEw</con:name><con:value>B4t8Xv</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>a4df3d26-fa04-41c3-8793-06f4a2cce5c2</con:value></con:property><con:property><con:name>email</con:name><con:value>B4t8Xv@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidB4t8Xv</con:value></con:property><con:property><con:name>Work</con:name><con:value>08881051096</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0792093354</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameB4t8Xv</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameB4t8Xv</con:value></con:property></con:properties></con:testCase><con:testCase id="bdb93e9e-f42b-499e-8b36-4886f36f15ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09-To Verify response with Invalid UserID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e4567c9b-b10d-418c-a85c-3412bf2be3c1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJJaksrWERsT2FiN3RYQ1hKWDlHQ1ExNmFvY3k4RkZ4WXh4bEV1L0hMV1JMR1JLd2NJWCtpeTErdDlZWXI3TFM4eGhRVVhRSnV2dVI3dUx6ZEF3ajZ3SEQ1a2dNRUZlWE82UGRSQ1JJeDREV1JtcXE0eFJrUk4xZUtxZyt3NnE4OVlPc2pwYjA3aW1nbERmNVo5SkNnK3dSUjBVQ3J4Rko5WWZpMFpEL0dxb0dTcnEzU0NuRVF3OVI3TURhZlZTRXUiLCJleHAiOjE3MzgzMDI4NzQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.2o-jxo_tXWm8xpo7PAxVz_Gng6aKVl5VZLsmSG4svsw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bf56def8-254b-4474-8cdb-9f1c5e54c8cc"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(10)

tC.setPropertyValue("internalUserId",randomGen)

</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="4aecdf1b-7159-4059-ab89-a63bfbe39981"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.meta.resourceType
//def userLocation = jsonObject.meta.location
//assert resourceType == "User"

// Verify userName not null
//def uName = jsonObject.userName
//assert uName != null

// Verify First/Last name not null
//def fName = jsonObject.name.givenName
//def lName = jsonObject.name.familyName
//assert fName != null
//assert lName != null

// Verify scimType is null
//def sType = jsonObject.schemas.scimType
//assert scimType != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "null"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9b6fbb46-ac26-4b3d-9baf-fa2516c24d79"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>mNwwk6zsxr</con:value></con:property></con:properties></con:testCase><con:testCase id="96944017-fc67-4308-8051-db358d8efda5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To Verify response when Invalid Operator given in filter for userName" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="931d6cd6-f0de-4d81-ab19-c2902b2973c4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJMZ245UUVaSmFOQXAzWS81Y2xmMCs2cnRBMVZvMklZZllnS3Nza2JGdW9xOXlSd0tEY2JCMDVwYjg3REFOSi80Z0piSFBsRWVwLys5aUtPS0JrZkhLTGxCSlFoWmR1dTcxVEdYRkFVb3l2cU9NRGpuenp3aHJGQ2M3RWhKVHRpNkxqU2oyVWVoenlhSjJocC9pV1p6QTNMYUtKNE0wc2JRT0sya1cyNnNXdVZzL3N0RFpMQmtiUGRnUGt3RC9JajkiLCJleHAiOjE3MzgzMDI4NzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.WN5clXNWXFyePThPIJddVi9AAoz9o7vWwizYxm-YW6o</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3c45608b-7424-42e6-93c6-6f22d390ebcb"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="b60072f3-a471-4aab-8d2e-08a8e2d3a285"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName re &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9df10d98-4ed4-431b-aa07-cfc438ee6a3b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_sAMBo9jf</con:value></con:property></con:properties></con:testCase><con:testCase id="130cfe08-c4cb-4f43-a26d-dd5e31f0100d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12-To verify the response when negative value is given in start index" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="64146255-b738-4eee-90da-4d59a9bbc0ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJOdjRIT0RJZitxQnZHc0dTNEFwaG1nc0VwTmVEeVBIaWZWakphOUVCeHNVeldDN0lVNmZBU0l1SEtRdjZyYWQ5cm92d0plRnRyS3M5dnBIQnlZYWl5SktUNHBSREdKRW0vVTFrTXlqTnBDQzBzdENnd0t3c3dRUElNRzhJWmZTcXZTRkdxMExoaTd5SHFzc2pkTDRzNVc5R2pOdm9ZUE5ta3d5NHZIOElsOExjbzJuRzdBWW1EejhtUllIZFp1a2MiLCJleHAiOjE3MzgzMDI4ODEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.nCgHD7FsDzGgORVNZAz7R98TSAxUWAf5suyhcBMojLA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="697be66e-b846-4096-82e2-a144acb0ceaf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion" disabled="true"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="76aeb954-16fc-45ba-aa41-98538876746a" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName ne &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestCase#startIndex}"/>
  <con:entry key="startindex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3d02092d-7738-48ed-883e-c1d65c63893a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>-7</con:value></con:property><con:property><con:name>count</con:name><con:value>262</con:value></con:property></con:properties></con:testCase><con:testCase id="3ce63204-5aa4-46f8-8a6c-d01a1547b4c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13-To verify the response when negative value is given in count" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ce10518f-4adf-442a-befe-c5628eeaa639"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJiOHpDeGI4MXY3L3JyWk1WRWRzK2dFcDdXalRHdzdBSDFQMW9MdWdObWFDMWRROUFPakN0L0lIM0xiSHI1VFd1dkc0UG03QjZjb1B6aXY4bTVzS20wNlByRkxqa3MzTXM0c2t2VUFSejNEazVhTFBDQ2NCMjNkcTgybWp4Qk1URnYvZVZZc0xjckl4SmxDczVoMWgxdThMemNtQ2V2T0NNT3RBRzMza0ZhQTg9IiwiZXhwIjoxNzM4MzAyODg0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.NfTZdbRHn-4fMCLX644EQFIfXgZ6Xymk4GO2kiAJh7I</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="d69087c8-ccac-42fa-b605-c11e6f424ae0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion" disabled="true"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The items per page is not equal to null and must be zero
def itemsPerPage = jsonObject.itemsPerPage
assert itemsPerPage == 0</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="20ab7415-0b38-4cdf-a2a4-499b76b23bd9" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b1c91951-6d68-4d95-84d7-dcf428c745c2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>8</con:value></con:property><con:property><con:name>count</con:name><con:value>-06</con:value></con:property></con:properties></con:testCase><con:testCase id="a69242d5-7df7-4f7f-9224-517d0e88e127" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14-To verify the response when alpha numeric values are provided in start index" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4002c688-3ca0-4e4c-b52e-fcd4e64acd7d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJaMnlxTjRWRjZzcUhDMTZUMStoU0VjVmNJUjRDdzVrcHNMUC9Hem0vTjh2TlZMajA1VFRsbXZRVUdZYnV2dnJxempWaWxaUUFMaXMwRnBBMXhydWh3aWUwNWtzWGIyaTM0dHlIeWxZMUVIK3l5RDZaVGQzTzNKRXo2Y0Z5cEd3UDk5RmtCL1FCOGt2VTBkb0pYS0oyMEY1OFA2emF2TWJzZkpYdHFUbGRRSEVlYWh5NVNOSSs0bW96R2xheFMxZksiLCJleHAiOjE3MzgzMDI4ODcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zMc14mqFpFWPfrN87PXZlj81uUnFyffnkisIOhDcPBs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ee259e37-fa9d-4625-a7a8-2907a301a79a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
//def ActualMessage = jsonObject.detail
//def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
//def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailDataType")
//assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2c43d70b-8103-407b-b1b7-a1ea571ce8ea"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>kkd</con:value></con:property><con:property><con:name>count</con:name><con:value>973</con:value></con:property></con:properties></con:testCase><con:testCase id="98ae5051-37ea-4112-8431-3e403ee9825b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15-To verify the response when alpha numeric values are provided in count" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b9faa8bf-e438-4b68-a777-fe75f415b174"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI2bnZaVmtJbmJJU2l3NVNyVXZ2cnhsOHFISEZyREs1a0IvWWJGMlhzbUtzSVBQa0FmYWg1QzMvZUxTS0VKMHhPenE0QjBhSXgxVXFHTTZLVENWdkVuM21CV2dPY1RncjU1YjZGYWVUODJERHl4eTV5S1F3akptV3lRY1NreXk3VzFwSmE2dHJnd0pRbGRBSktiYU84aGQwNWYra3R2M29hVnVCR1VLTlhoTGRUNlgwYjRGdjI2dXRzQTNZN3E4WXEiLCJleHAiOjE3MzgzMDI4ODksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pp0qPMKIvzk2e5tvsTMWT0lduLD6Y82h4jAkVqh506A</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="6a9bac1d-220e-44ed-884a-8e109d4e7b95"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

////Verify the Response Message
//def ActualMessage = jsonObject.detail
//def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
//def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailDataType")
//assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3a741cff-111f-4d0d-a30c-6fd6a361c80f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>6</con:value></con:property><con:property><con:name>count</con:name><con:value>m84</con:value></con:property></con:properties></con:testCase><con:testCase id="2e3de93c-0eb5-402e-936f-7a5413f532f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16-To verify the response for attribute &quot;givenName&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ce35f6ef-0641-4bf9-9eeb-710316bf6efb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ2eUpZeG5CbWZmSUpUMENWQ0Z1RTVMQVhWRENXN1JxMmR0dGdBWnlQaTA3MndsQ3Roc2ZFUDR3MWJyT2NLNTBmVTNQZC9WVVU0YmRYSmFCWm9WOUc5WlpnSTNYY2lUTHBPYUlmZ0FMZ3VjZ0lPWkN4OVVtQ3FUN3hVSTFwa1ZCbmpaMmdUWTczWE5QdDBuMStZbEdSVldLKzl2cWpOTDlobk9Lb3dGQWEzdWs9IiwiZXhwIjoxNzM4MzAyODkyLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.rQ5csy2_LhYl8SWr9X35Ejd4nUaWSoqeDhJf2dPuuvk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="56ae852e-4371-4063-ab5a-e0cf95e8cf2f"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def userNameEw = context.expand('${#TestSuite#userNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
userNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("userNameEw",userNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="cb2f4142-2294-44ef-a92f-1ceb709cd5a0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="07c933b3-2550-4a2b-a59c-b9b4a381cc82"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = jsonObject.Resources[0].name.givenName
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName==ActualgivenName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName eq &quot;${#TestCase#givenName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2d720e04-c647-4ae3-8d27-27ff7d13be0b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_cG9KqNpS</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameBN70Ld</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>841d8cba-1c00-4cea-8b32-3b503d34e51e</con:value></con:property><con:property><con:name>email</con:name><con:value>BN70Ld@xyz.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameBN70Ld</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidBN70Ld</con:value></con:property><con:property><con:name>Work</con:name><con:value>08004997439</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6399815750</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameBN70Ld</con:value></con:property><con:property><con:name>userNameEw</con:name><con:value>BN70Ld</con:value></con:property></con:properties></con:testCase><con:testCase id="d24f84b7-1cd4-4eee-b809-27cc97177b7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17-To verify the response for attribute &quot;givenName&quot; with valid operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6f425aa2-bb59-4d71-a0c1-aab871d32e41"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI1SlJUdTQ5K0pNdHkxaHBjaHU2ZGJYSXU1Tm5BK0E1UVo5S2hNOVJJeTQwYm5OV0YvUFNQcXM1Ti9IbWYrR2RHbkFiVHVWYzZRRmhqWDRDSDFpVjlaTWZlR3N5U1VUMHlveWV2a3lLdXkzKzB3VXBuWkFJMTlDRzcyS25iUXZzSEs1cXgrbmkyUDJkNXBFVXMzQTRJTUswQkRKSnNQazhHSlllRnZEb2hPQmVzVkVGMjN3aHdNcUU3SFkvblVOMjIiLCJleHAiOjE3MzgzMDI4OTYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.uiGFlxMt7AXwjAOsSnQVHv4edwtf43hVfSFP7zxBwh4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="237f72dd-1263-4ffa-9b1d-cc57ba937fbf"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def userNameEw = context.expand('${#TestSuite#userNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
userNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("userNameEw",userNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="8ed0eb0e-71ca-4ba8-8d7d-d064349c2d60"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="83694955-d3cd-439d-a872-b68089a23005"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName not present in response and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()

ActualgivenName = context.testCase.getPropertyValue("givenName")
for (int i=0;i&lt;ResourcesArrayLength;i++){
     assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName!=ActualgivenName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName ne &quot;${#TestCase#searchName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1c839530-0893-489b-93e5-11b929f945b7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_kKAbfZEu</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamenfqcgd</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0d7a4785-1229-4d95-ba52-597e87d3f4f3</con:value></con:property><con:property><con:name>email</con:name><con:value>nfqcgd@xyz.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamenfqcgd</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>fr-FR</con:value></con:property><con:property><con:name>searchName</con:name><con:value>kanchan</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidnfqcgd</con:value></con:property><con:property><con:name>Work</con:name><con:value>84888083578</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>5976602970</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamenfqcgd</con:value></con:property><con:property><con:name>userNameEw</con:name><con:value>nfqcgd</con:value></con:property></con:properties></con:testCase><con:testCase id="aa013748-5380-46d7-a016-54a7044215a4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18-To verify the response for attribute &quot;givenName&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4d8448e2-af6c-4103-9800-a7f293bc3843"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJISzIwRWw1K0VTdXV6dE9zSENPeGxyaHo3REdHcVlzWVlUbXhnQy9rOXZST0FyY0dmVUhHVlpUZGFSTzArcE1pU3RCL0lxdnZRZnlPa1BzZ0xSTHlSUktseTNVMmNRdmFIYUZWd2RlbVh0STJiY1ZtRnlTdlpKaERvVkMrT2d1QTZic291Q3Y3N1dJREt3OVpuTzNSM21TbUtnOFF1ano0cEYxckFuZGZwKzNranlzSzVQSlgzTEVkeVZwb1Y4OGwiLCJleHAiOjE3MzgzMDI5MDAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.xuQW5sWNUlsEiZ-Ye7IIXi8LPSxcd_PHPW6BhDUqlz8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fe5293b1-9fd9-42ce-ab11-95968fc9cfa3"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def userNameEw = context.expand('${#TestSuite#userNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
userNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("userNameEw",userNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="eb2aaae6-84da-49f1-ae4b-9b6668ef604a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="4190ea93-0191-4683-9231-29bb16a9c489"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = context.testCase.getPropertyValue("givenNameContains")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
     assert jsonObject.Resources[i].name.givenName.contains(ActualgivenName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName co &quot;${#TestCase#givenNameContains}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="72fe4b0d-6ab9-4ad8-8f2c-944755ede26c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_uN0d8219</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamepSIzob</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2c4438ad-40e6-4660-aec0-72301b042d76</con:value></con:property><con:property><con:name>email</con:name><con:value>pSIzob@xyz.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamepSIzob</con:value></con:property><con:property><con:name>givenNameContains</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidpSIzob</con:value></con:property><con:property><con:name>Work</con:name><con:value>72829496705</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0541386342</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamepSIzob</con:value></con:property><con:property><con:name>userNameEw</con:name><con:value>pSIzob</con:value></con:property></con:properties></con:testCase><con:testCase id="4efd8f81-b6b5-4448-b3c7-c9a1238d82f5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19-To verify the response for attribute &quot;givenName&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0e22e1cd-3e4d-4238-8061-8f4b1da3cfad"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJYL09vZHkwdjVqNmk5VWhnenk5a1NIOGMzM3A0bkJvTjR5VmJQNEgvbjJhSEhLQXFldU5IYWdVV1NpRm1OYy9NTm16TnRlbnFFaFVIYXhJTmVBczBKei80YjFZdWU5UHMvRmhBa3ZVUFVhSkJjOXpDSDdXTGdHdytGN1pBT1g2ZDBSRU50SHVNRlJBbXJvaVBqanhmaGJWRjMxRGMrdHBrQjBsRlV2UTZwR21uU1NJZWxEU3d1UzM1dDRNRFpmSEciLCJleHAiOjE3MzgzMDI5MDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.OYw-8AGTGMmAum4Vu0YCxY0zyUf1fckvTZL7HRNbFzg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0a292690-20f8-4e5d-8ae9-8948b555eaf4"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def givenNameSw = context.expand('${#TestSuite#givenNameSw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
givenNameSw = givenNameSw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("givenNameSw",givenNameSw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c66d0342-8f45-4455-9884-5cb3b9586c65"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c50a23cd-2233-4b81-8c9f-8660897b48a2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = context.testCase.getPropertyValue("givenNameSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName.contains(ActualgivenName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName sw &quot;${#TestCase#givenNameSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e2ae80ea-bbfd-4b15-bc51-acbeb1fb7312"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_brDtxcwg</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameJSoMkG</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8dbedae9-0631-44e2-b258-9c80c51ac8b2</con:value></con:property><con:property><con:name>email</con:name><con:value>JSoMkG@xyz.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameJSoMkG</con:value></con:property><con:property><con:name>givenNameSw</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidJSoMkG</con:value></con:property><con:property><con:name>Work</con:name><con:value>08740723214</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2890183900</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameJSoMkG</con:value></con:property></con:properties></con:testCase><con:testCase id="c26f3add-dcd7-40df-8cc7-c168e2e5638c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20-To verify the response for attribute &quot;givenName&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b318d9df-8170-4bf5-a415-30e4a3757540"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJYcWkyNzUwK1RZOTVoRnZud0QwdTluN2NVNEwzY1BON1JuVTdtOWJmUXVxTjVmUEwzQ2xqZURTZTVYdUhtUEpvdXYyOFhOcURqaGhrM01UZTM0RVFXalhHUFNPZ2VjSW1uZWtnZk0zOC9GYk5YTHRDckJJN1hIMGdPN1l6SjhKbzhjM0RJSEN5MkhJcktVclhTd25DS3VMem9tVmZHTDNnZXNMU2pyZjFiZTloWkVZYzFiNk9QZytsUVdZc1FJSy8iLCJleHAiOjE3MzgzMDI5MDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.mhLOTIonv8k_0JsiF9VBEYX-BRZ25_6fG7vwSgMWam4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="02078549-ad32-4024-8152-541b108b5448"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def givenNameEw = context.expand('${#TestSuite#givenNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
givenNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("givenNameEw",givenNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="75aa425d-e938-426b-b29f-7304768be198"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="b2d3e9ae-f2fe-4dfc-97b1-05b7ea0ffbbf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = context.testCase.getPropertyValue("givenNameEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName.contains(ActualgivenName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName ew &quot;${#TestCase#givenNameEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="24e5e60e-8b41-4488-aac7-32bd2c41e6bc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_gBYM4kYk</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameqOIsnP</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>58b4452d-2444-48af-a7fb-90052335c660</con:value></con:property><con:property><con:name>email</con:name><con:value>qOIsnP@xyz.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameqOIsnP</con:value></con:property><con:property><con:name>givenNameEw</con:name><con:value>qOIsnP</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidqOIsnP</con:value></con:property><con:property><con:name>Work</con:name><con:value>75106474186</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7632233007</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameqOIsnP</con:value></con:property></con:properties></con:testCase><con:testCase id="899bbf85-ca2a-4296-9a8c-7f3df2f0491d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_21-To verify the response for attribute &quot;givenName&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="cb5b3f27-e666-46ce-9e81-349bcee40921"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJmdTlvMzdHMi9HWEJnRHN3SjE4ZDFleXJ4c1hrSGp0aW5nNHY2bG0yVkRxcU1aR05KdEdqRnE3S1BCekdORUJiMllxaFhmUVo2angvb0tMVXo1S25QVWdJbEF1c3UxakxtL25NLzBhNElkL291Z3JPb25lYzdpL3VSYTJhQml2a1VFaUs3VWZkZ0xhRThJYjFYMENmc2JZRmNvMFJhbS9jdC9FTE5FRE5Oc2ZwMmVxeUQwK0R2amFadVM3WWRWU20iLCJleHAiOjE3MzgzMDI5MTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.QPb0zRQGsJuEBRRQwGc9wKZx50uvTjjn1jLgqp4L67U</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="417f141c-d21e-4467-8308-11ab53bdc349"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("givenName", "name_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="41ffb6f5-97ca-4ef5-aadb-86e4a5f53b23"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName rr &quot;${#TestCase#givenName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="33197c04-69dc-4f27-ab6b-deeb9485ea64"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Kr7RjX7V</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_Kr7RjX7V</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2555</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>name_Kr7RjX7V</con:value></con:property></con:properties></con:testCase><con:testCase id="8ba1273b-3d58-4ba4-83ac-cd2d4f3303c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_22-To verify the response for attribute &quot;familyName&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9db0f9f9-6e9b-466a-97ac-7e76f7551d1c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzODVzMjRIM0JndldGU3doYXlTVXF6Nk1Hc0UwOUFQbXhqSTRnSHFEMzNHdHJDWFJ1OTBhS3BkRnZmdG1QNFRGRTdvVE9WTVY3QVZwaFNlOUNkZVphS2U0VXEwWitST3ZscnJRSjM1dkR1M3NrelZCbG80d3hwNWFDU1ZKS1lWcVZJSmc5R0FDWHlCeUwwN3p5Q1Exa3VHTFFqZ0V0cWxheDNiY0x3S2tYVXgybTN6MnFWdjhmYjNmM1NCckZXTEciLCJleHAiOjE3MzgzMDI5MTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.0nZT01H07os-Dy1GNHR09-WejoBTZJPTEH2LcD7W6u8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4b3bee77-a70a-46c2-8694-eb0c3079f7e4"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
//def givenNameEw = context.expand('${#TestSuite#givenNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
//givenNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("givenNameEw",givenNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="b867e215-c7ff-4321-8553-39e869efa3a8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="388d3bad-258e-4b2e-836f-0ab18c228029"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = jsonObject.Resources[0].name.familyName
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.familyName==ActualfamilyName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName eq &quot;${#TestCase#familyName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="02957637-02ee-4a8a-85aa-542fefd83797"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_gBXf7veD</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameGpib6D</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9ad68247-85a9-45ee-9fb2-66395f30c079</con:value></con:property><con:property><con:name>email</con:name><con:value>Gpib6D@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameGpib6D</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidGpib6D</con:value></con:property><con:property><con:name>Work</con:name><con:value>54457397345</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2750182398</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameGpib6D</con:value></con:property></con:properties></con:testCase><con:testCase id="c7d1e287-e6f1-496d-8977-c9267b6cc3c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_23-To verify the response for attribute &quot;familyName&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e16dd3d3-27db-4dc7-b78d-624b18fa861b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJoK0pIYW9aU1ZGTjk3ZHg3bU9JV1RXeHRxb2ltWXJLaEUvb2ZUbDFtb0V5aElaRVRNK1FVRCtsQ2FQaVFvQkZHOGN6TDZjQ0QvOEJmR21iQjJGMys4akRIeXE3VXFGNVZaRWdudVpTVHVHNjFNVnhOU3hXUG9rcFl2L2crZ1FhODlEU01VQkUvRFFYejMrSUorQnc3L2crM3B0ODJ2c1VLcFM0bzlSMUdIKzJpWDh2QlZkMTlKZVc5MjNsOUJna1giLCJleHAiOjE3MzgzMDI5MTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.MJaaJJnxJq-AN68JJsQQIiTbcEAe184JbxtsGQDFEHo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c234c72b-d04d-4270-b5d5-e27993ab55c9"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def givenNameEw = context.expand('${#TestSuite#givenNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
givenNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("givenNameEw",givenNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="28055705-06e2-4f9b-91a9-d123a82b66fd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ccc7b823-e649-47c6-9afe-4d2c8a8995a2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify familyName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = context.testCase.getPropertyValue("familyNameContains")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
     assert jsonObject.Resources[i].name.familyName.contains(ActualfamilyName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName co &quot;${#TestCase#familyNameContains}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6f1315f3-1b45-4943-a4b8-a7482345ebba"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ydnNIo0k</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamePggr6L</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c686feee-cd68-47be-9aeb-3fd93856f96e</con:value></con:property><con:property><con:name>email</con:name><con:value>Pggr6L@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamePggr6L</con:value></con:property><con:property><con:name>familyNameContains</con:name><con:value>Lname</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nl-NL</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidPggr6L</con:value></con:property><con:property><con:name>Work</con:name><con:value>34897744449</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3839256734</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamePggr6L</con:value></con:property><con:property><con:name>givenNameEw</con:name><con:value>Pggr6L</con:value></con:property></con:properties></con:testCase><con:testCase id="72470bf3-4427-4607-9e79-96c1edaacc25" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_24-To verify the response for attribute &quot;familyName&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e0b77dba-b594-486c-957a-199e5523cd68"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJISGJYVVpabzZ4eWlGN2JKc2JZL1Z6T20zQ0dadkpmZHpFSnlWa0xDQUhJWXg4clp5K1ZhaWxrQzg0TGJ3VHdNQWtLQjhXNlhHRlA2TVpqeUdwOW0vd2hGNTYzVjNHTjBUeDJKdGJoaHZTZmJhMGdUSEowRmdsSVNLNC9VRzZuOVQvZE54YVk5clZBN00xN2hzeDRlN3pYMEFUSE4zNDA4a2ZBYXE5dHQ2VHp3REdPQ1hPOHpMWm5Cbm5HL0FpNloiLCJleHAiOjE3MzgzMDI5MjIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.CugzVLbNlCsejTVt63aoB2aGZnX0TPFGVkSs19uPkoM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="5ae5b0ff-26d7-4223-9bf4-eeaaa4c189ad"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def familyNameSw = context.expand('${#TestSuite#familyNameSw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
familyNameSw = familyNameSw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("familyNameSw",familyNameSw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e0171e99-f88e-4e07-92c2-93750f027f09"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="5313e175-57fb-4248-b62a-3384f3cd0130"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify familyName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = context.testCase.getPropertyValue("familyNameSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.familyName.contains(ActualfamilyName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName sw &quot;${#TestCase#familyNameSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="4"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1f101dba-abb6-4a71-b910-ea7f3d4e9c7d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_0AlX8yph</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameyWR6ER</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6f610a23-cd5b-4694-a9d7-cdcc18dfd743</con:value></con:property><con:property><con:name>email</con:name><con:value>yWR6ER@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameyWR6ER</con:value></con:property><con:property><con:name>familyNameSw</con:name><con:value>Lname</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidyWR6ER</con:value></con:property><con:property><con:name>Work</con:name><con:value>18658628736</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8736650856</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameyWR6ER</con:value></con:property></con:properties></con:testCase><con:testCase id="f983e8b0-90a8-48e2-8dd8-b437bec8b5c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_25-To verify the response for attribute &quot;familyName&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="73629107-a103-43fb-942e-a3c3600c412d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBK0x6SGJJTjNwS3VtcGxwMnBGOXhTM1ZLczRKQksvRFJLc2tQSzloWHJETGF6V3N2SUorSWhidzJFdENLSm5UUlBkQWpFeitqcEo1UVQ2TE1GWnozb2krd2N2bk5qSzlyUy9pWU1walZFcnpUeFVEK0I2aWNsOE5iQU5FNVNqYzlvZUlzNi9TMk5xYUJOVElFbTBpbDFYeTI4WDB0WldwWEZPOXNPUlAwemJncTUvcHViblZWQkxlZkk1bDNtZGsiLCJleHAiOjE3MzgzMDI5MjYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.wcpua0JP6Ri8NlPM1G0JRA_I7AcREkWM62tfpEvhSig</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e19163b1-7480-4ad8-887f-b326ab356809"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def familyNameEw = context.expand('${#TestSuite#familyNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
familyNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("familyNameEw",familyNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="6c53f7e1-cfbb-4c24-a35a-d278eb0c1fde"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c1c4748c-3cef-47ea-a52f-bf08acc6fe5a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify familyName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = context.testCase.getPropertyValue("familyNameEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.familyName.contains(ActualfamilyName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName ew &quot;${#TestCase#familyNameEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3fb59718-d652-4b8d-9116-8362bbf7ea25"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_yPYYGQIp</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6TlBKJ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>efd3af5d-dc8c-4cf5-8215-e7dc4aca41a6</con:value></con:property><con:property><con:name>email</con:name><con:value>6TlBKJ@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6TlBKJ</con:value></con:property><con:property><con:name>familyNameEw</con:name><con:value>6TlBKJ</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>es-ES</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid6TlBKJ</con:value></con:property><con:property><con:name>Work</con:name><con:value>50540856747</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9250626164</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6TlBKJ</con:value></con:property></con:properties></con:testCase><con:testCase id="863a61d9-d12e-4d34-8d49-80b1a67385fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_26-To verify the response for attribute &quot;familyName&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="fe71236d-c731-453d-b740-2cd742c257fb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJIQldrWmpFS1U3RnNBSy9senNUWEY2bWR4NEZGOGpXN1lIRUVPazlWSW1jdi9KVEFKbDh1VGFhYXNUdEtCR2I3TjlNQzFnZEdUZ1pJK1Q5Zlo4NnFrYUxsTjhGaVJJeldoRXRuemZUREZUeWtTT0JhakdSc2Z1OTBjeWlzaFl2TTN0UUZTeFVZa1plaXd4bGkvZC9sNmN4Um1RV0RMcGp0a3N3dk52bjMvRGgxL0Z4SUhyTE4vN1J0S3hmNGFiVlciLCJleHAiOjE3MzgzMDI5MzAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.9MF76bLfT7GrAPF7FPNA8_MrXOORCJovee-BoxtMzgg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="9757f2f0-2108-47cb-be47-09ca35a51efb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName pk &quot;${#TestCase#familyName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d42f9835-9084-4ec2-8cf5-cb321ad17cb7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_33532</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_xdecr</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2497</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>oykab</con:value></con:property></con:properties></con:testCase><con:testCase id="f43ba974-a21c-49e3-881c-606103230f20" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_27-To verify the response for attribute &quot;active&quot;= true, with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="630516cf-ae78-4720-91c9-52ce9e60dd0a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ2dlZ0VTdqOUhMSUpyVzUwVmZyanZINjEzRjV5Q2NEMFRrT25TaWFtNGE0aWx6blVaY3BSVXlLUVpuZ3BPSWhweHdMUmxLcVJ6WUFIVi9GeU9PV0czbGZvUUJicW4vNzRmNUZYUFZVdnROSzgyb1dTMFYyWVExRmFycmU3dFlwUHJVS2NCTEZPTnpDMko0NUFqYkJOcy81Z1J4Vnc4UEdsV0lteElnblNQNHhRcm5MaURqUDcxY0J0bXZwd3NIQ3MiLCJleHAiOjE3MzgzMDI5MzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.YFcmhH0TQnJplyCeIJiHYa2AwwKMsIItzOG4d2_OiRw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2d14667d-fa9b-4348-a2fd-133095538d5c"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def familyNameEw = context.expand('${#TestSuite#familyNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
familyNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("familyNameEw",familyNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="732abe6e-30e5-4bf6-aa40-93bdaf9dd862"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="10190c49-cb17-4da5-aed7-60422aabbdfc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify active is true and id,userName,familyName &amp; givenName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].active==true
	assert jsonObject.Resources[i].meta.resourceType=="User"
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].name.givenName!=null
	
}

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="active eq true"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="22dc37e8-37d2-41ca-9314-e68bd82ba0af"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_783848</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameS0VuR6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2119b0b4-9bc3-4de4-8506-84f9ba44029c</con:value></con:property><con:property><con:name>email</con:name><con:value>S0VuR6@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nb-NO</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidS0VuR6</con:value></con:property><con:property><con:name>Work</con:name><con:value>05262631830</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7531298258</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameS0VuR6</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameS0VuR6</con:value></con:property><con:property><con:name>familyNameEw</con:name><con:value>S0VuR6</con:value></con:property></con:properties></con:testCase><con:testCase id="6ac3457b-7f9a-412d-9ebc-07325e076e11" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_28-To verify the response for attribute &quot;active&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="471557cc-ce4c-449a-ade3-0e6e9b16aea4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJMREJsTkUrSGs0REpiaS95aXI5KzRSZml6enN5dmdWNkp4ZjV5UXBjZGpxWE1zYTB3cXRmWTc2RmNGdkJ2R3AxRHVNd2xaOFFCUldzSlJlVkUyMXBlcjdqUThNanJ3ZGlmb21INTYvTmdqcnk2S2hLR3hWNGZnc0pjbU83eTdYdGc3ZmpMblJZQnA4NjNQUjlOdXlualRDRFlDM3k5a1RTRG9ab1NNdk9jOEE9IiwiZXhwIjoxNzM4MzAyOTM3LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.3cH6r2zGAqFGg9B38w_KloeYr9op-7M5Mf7EXP8_-mE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="930378df-89d8-4c51-8e6d-e43c265fbc8d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="active yu true"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="07c0c161-25c1-4eeb-9dc5-dcef9627a5de"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_67670</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gjevp</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2567</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="2497137b-9431-4581-aa47-d4354b48af97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_29-To verify the response for attribute &quot;externalId&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a74a22d0-df2e-451b-b1ec-e75f6387fbee"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ3Wno2TmFlSFA5b1dnemRGUUc4aHgrWmExMFU2Z2xnTUtHTkxaNmF2Ky9Eb0l1ZS9DMkRjbEh3Znc3Q2JzN28rYlByRU9RUkVwdGw0Q2ZEUEIrcTZaUXVYOW5QZGhDMzhrNGRmaEFUeE9CcVRXZHNpSXNORDlzQXUwVmRvNnJKdm03K3NsUVRjWlVRQ1VPdWtwTTZLS3NhbXZuNSt5aW5HNlUwbHJZVnpxYno5MEZ4WUc1VDYwWVFqUVBUQ3lXYTkiLCJleHAiOjE3MzgzMDI5NDEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.fbr1BPI50D57tIuLcagDl_v2MXUsf5krYP9amC_YpsI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="37de218a-075d-49ad-a394-febb75f0afb1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
//def familyNameEw = context.expand('${#TestSuite#familyNameEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
//familyNameEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0dbe9901-12b2-4438-9eee-299c32799e47"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="dbad68c1-7fef-45fa-92f1-8198fcee6f11"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify externalId and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("externalId")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].externalId==ActualExternalId
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId eq &quot;${#TestCase#externalId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d6689766-8278-4ad5-8cb0-c46da67454da"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_AdTNH8fQ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameTzNQCU</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>372f30d4-d63f-483a-962d-d373ca3c1688</con:value></con:property><con:property><con:name>email</con:name><con:value>TzNQCU@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidTzNQCU</con:value></con:property><con:property><con:name>Work</con:name><con:value>71568568393</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9130776275</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameTzNQCU</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameTzNQCU</con:value></con:property></con:properties></con:testCase><con:testCase id="af301e25-c28e-479d-b0b6-11794c035c2f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_30-To verify the response for attribute &quot;externalId&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4f363c92-b9cd-41ef-af27-138d298d74d3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJCK3orSXliVUpqL01wTUkwbGRHRnBJVkZNQmlOcGpIUTlyVXlZcC9JR1lZNWRxWk16QXJVZyttYzRxemprdHl3Yzkzd0FhVUtwR3NnSjh2ZnZWdXVsRk0zRTVUTG5zU3N2eGhSUHMzV2RxVmUxT0NQdXRFLzBVVkl3WFpBWitZOWNTd0hxSGcrazVScTZrWTZicWRmQ0RQcnBEUGZxUnFSUzZabDF0YUFwWXhPM1ZHKzNnblpQeHp2SDlMT1labjciLCJleHAiOjE3MzgzMDI5NDUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.iLJ80tHJxFB06ENDW82HDMu5Agiha3B-hmncbSCcSxI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="50b0f112-066b-405e-8ad6-96146b931491"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def externalIdContain = context.expand('${#TestSuite#externalIdContain}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
externalIdContain = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
context.testCase.setPropertyValue("externalIdContain",externalIdContain)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e7cf9da3-72c5-4c74-9904-1c64cafe7948"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="9bfebc85-f606-45de-83c1-c1c78cf93fda"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("externalIdContain")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
     assert jsonObject.Resources[i].externalId.contains(ActualExternalId).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId co &quot;${#TestCase#externalIdContain}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="77767b15-4b6f-4f4c-8b44-7e392cfe106a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Gf3OYS78</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameOHpMuR</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>815c8a37-6a53-4e4f-8eab-926b9abaf9d4</con:value></con:property><con:property><con:name>email</con:name><con:value>OHpMuR@xyz.com</con:value></con:property><con:property><con:name>userExtIdContains</con:name><con:value>Gf3OYS78</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>ja-JP</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidOHpMuR</con:value></con:property><con:property><con:name>Work</con:name><con:value>17023194294</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9750199733</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameOHpMuR</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameOHpMuR</con:value></con:property><con:property><con:name>externalIdContain</con:name><con:value>OHpMuR</con:value></con:property></con:properties></con:testCase><con:testCase id="5db61572-23d8-41f8-9158-88d70b4cb3ea" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_31-To verify the response for attribute &quot;externalId&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ffdbd91e-4ebf-4408-a890-91d7656ef0f7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI5blBORmlnbi9hVFZsK20yQzF2ZUR0V0t5dWhZVHZHajlOZ3RKQVhzeE16Y1RITC93VEhkVEtRL0ttcTFTQlB2UHdEWDF3UFQ1QktNRW1ReXJTa1ZWMzNrNmlNUHk1bjVtZWxsMlZBY2M5djZPRVgzb0xjN1J0akw3dWhydzVha05kRWZmdi9GcklkaGFETmRWUjR6UFNBTHFUUTdRY3FzK1ZpQ1JBdEFiUVVoUC9jeE1jZWZwZ2VkYkxoVXN2aVYiLCJleHAiOjE3MzgzMDI5NDksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.d0MZ4DzcBEql6UYHIdNVhxousoQTJbVsUGEvoXcgh3s</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="51dd3ceb-0282-4647-b39f-1c48a41ca3cd"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def externalIdSw = context.expand('${#TestSuite#externalIdSw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
externalIdSw = externalIdSw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
context.testCase.setPropertyValue("externalIdSw",externalIdSw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="936f77ee-ae04-40ac-91f6-77598de730b6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="52c07f05-0b1c-47e5-af2d-d5e8523d08d9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("externalIdSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].externalId.contains(ActualExternalId).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId sw &quot;${#TestCase#externalIdSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="2"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2f4318c3-d313-48f2-8d09-0654578d7f19"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_xvTS4CFWS</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameXLqJsF</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f32adb14-32be-4d22-9bad-f7f5622b0f92</con:value></con:property><con:property><con:name>email</con:name><con:value>XLqJsF@xyz.com</con:value></con:property><con:property><con:name>userExtIdSw</con:name><con:value>extId_x</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidXLqJsF</con:value></con:property><con:property><con:name>Work</con:name><con:value>11027913899</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0973791505</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameXLqJsF</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameXLqJsF</con:value></con:property><con:property><con:name>externalIdSw</con:name><con:value>extid</con:value></con:property></con:properties></con:testCase><con:testCase id="fdf5e8e9-5fa7-4fe6-b1a3-0344006a9657" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_32-To verify the response for attribute &quot;externalId&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="135f3bc8-a29c-40d7-8fbd-8d2be00d5b60"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ0U3JyRDdZUnQ4RWN2eTBlZWhTM1pXU3Vyb3NDbUtYcXFmTmUyKzVKTlJLVWEzUFNVN0RLcmd1U0pXVVBzY0FBOHUrVUtVSUIxWTJlcEN2SWgwSUVjRktoUkJyTzVYVU4vU0dCbGFQbEdkMy96VkpjTVJ1SnZsNk85Z1NaQ1lKbjltT2ZoK2ZzNEdkQnRNTlRreGYvRCs3SzdwTEtMYzNCWFhoOGlwWFR1K2cvcHFjNGtRd1E4V1lib2srYUNtbkUiLCJleHAiOjE3MzgzMDI5NTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.aEwOJYMvWiHn5ICFTUV_OzfS5VytrqrcjGyoOFC6yg0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e59728f5-ac9e-4c7d-a4ed-49f5f8fdfa09"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def externalIdEw = context.expand('${#TestSuite#externalIdEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
externalIdEw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
context.testCase.setPropertyValue("externalIdEw",externalIdEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="a7be5e9e-8fa8-40a4-8884-e68458c355ba"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="2047105e-005e-49a2-b449-bec6b34f8587"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("externalIdEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].externalId.contains(ActualExternalId).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId ew &quot;${#TestCase#externalIdEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a4d5950a-d265-41cd-9649-3991778c9062"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_IXfxoq1w</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName9T5Lgy</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>377d727a-b71a-4b4d-8518-08f7a58a00d6</con:value></con:property><con:property><con:name>email</con:name><con:value>9T5Lgy@xyz.com</con:value></con:property><con:property><con:name>userExtIdEw</con:name><con:value>IXfxoq1w</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid9T5Lgy</con:value></con:property><con:property><con:name>Work</con:name><con:value>20722127045</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7291463923</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname9T5Lgy</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname9T5Lgy</con:value></con:property><con:property><con:name>externalIdEw</con:name><con:value>9T5Lgy</con:value></con:property></con:properties></con:testCase><con:testCase id="9ccf2b48-7109-4c18-83f8-4028c9d59964" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_33-To verify the response for attribute &quot;externalId&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e86170c7-33db-42d3-99c2-e6186303d527"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJTM3NZdlBPQ08wMWxEUE9VcTk0RGVFT3k3MWlnSlRhTUhSU05aMWpLa1hLYlhqcWxtcnlzdzRJV01IaTdSYmdGNFB0dGtXWU4vVGsvWW56TDRXYnovWUZmU3plOHM4cGhQVkdtWWpSdlZraEtxRzQ1U3Y3cW5aTGZoVXl6VWUvd1NIa1Nmam5uRVZKSUNZY2tCVkVmR3lIVUxWM2pLT2RCdGZWQ2JOUE0rb3hRd1p0U2tDdTFKbzdDOVk4Vm5zOTkiLCJleHAiOjE3MzgzMDI5NTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.MVsRbDVoFAwARU9GeeoH8REpmxablWeD311JjRTEjwk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c2ea0c3e-7018-41b1-8232-66c390c4b28b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId op &quot;${#TestCase#userExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="72db9f17-6628-47a5-be54-30848d6df0b8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_73298</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_fmnax</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2506</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="72c28532-403a-4bb1-b61b-6f511c46a8f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_34-To verify the response for attribute &quot;emails&quot; with valid operator (eq=equal) where primary value is true" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="fe204318-a17a-49ce-9ed8-5fd1eec6ff46"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJEMHAxQVFZNXA2bFpqcVV6ZHJ3STBvV1BiYnExRUZycVNkQ3dVcVpqWEJwL09WWkNrZXdVc1d5Zk5BTlF6SlMxMWkrMU9JcUVZZ1hWNERVOUVpSjNXY3pXTU9VQWw3M1ZwQ0FLK3EvYTdhRG1UdzRrS245UjNhVDNaTVFPQnNIbTBSQ1RXM1dQYnc5ejVvbnlOY0VDcHdrL2x4N0NXSXhoYnhlditJUnBMbmt6OTNBOEFJKzBkMkozYzh1SDZnM0MiLCJleHAiOjE3MzgzMDI5NjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.edsss0mw3wssZUVTYktJTgNWVUvnqW4r61SkHYvCj_A</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="645c23db-0423-499b-a056-8a20841efff5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify active is true and id,userName,familyName &amp; givenName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	//assert jsonObject.Resources[i].active==true
	assert jsonObject.Resources[i].meta.resourceType=="User"
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].name.givenName!=null
	
}

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[primary eq true]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3d448dd6-39cc-45a6-8112-73b318307f41"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="8a729107-2c69-4c67-b1a2-478b64fb2628" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_35-To verify the response for attribute &quot;emails&quot; with Invalid operator for primary" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="688d70be-ba87-42a3-b1b6-1b90c5cdbf46" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="0ab44ccd-0464-4391-8eae-bcdd4c784b9b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJoZDh0U1diMDZFcHROcU5McGNHOFZSNWVSTjBKZlhoN3ZrRFA3UlRYUlJxWEtFUkI2Q01CSHI5bERlbkZVa1hMTmZGNnBCemV6SDNCdlBpd0x6Z0hKVVlFRk5qK25xc3NhUXBPeXVuK0VuakZjYXZTMEYwc2RqcWNUeTNPaHRPRlg3U3RJN2RlOXBzSEd3NFk5R3lQNWtwNVBWaG9nVmo1ZFVLdTh4QTVMeXN6VnlpOUlmazhSSDJ5MFNoZUdpY3IiLCJleHAiOjE3MzgzMDI5NjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.luKJV5-Ss3LXywf__VHjRxpJ9VBy9ZfQde_7jqAGP8I</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="04fba1bd-cd32-484d-af41-d4dae3ae4a32"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[primary uy false]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="16504638-d475-424d-84fc-67782ae67d07"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_60388</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_bqhoi</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2578</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="7e5f8a52-1ef7-441a-a1a9-66a9ddbe69c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_36-To verify the response for attribute &quot;emails&quot; with valid operator (sw=starts with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="cafe95b9-a55e-4759-b2f6-84db91264854"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJpcE5UeXRyVGZES2ZuWkUvSHB3RkhPU2JtdVNHQmRZSndaRi9sNlF5VlFTK1poRnBxT2t2MktxeXY2VXpIZE1KZUZzOW45ei94akJGQk8rbVI2UVJuTnRFczc3ZVpHTStwZExLeE9hQWpuRHBHOGtMOEs3V015enUvVUQrVUFSRlM0UTd4dEtMSWx2RndQVlgvdFRZellVVXJyRWcvYVgvUkpYNU41S2FTbmxhY1hOdHJ6TDBDSUJnTnFlOGdpazciLCJleHAiOjE3MzgzMDI5NjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Pb6hRvrv2qg6ULKMC3w9QheGutqw4vA8xnbp2CY6c-Y</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="21114c04-c081-414a-8fef-98df7467095a"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def EmailSw = context.expand('${#TestSuite#EmailSw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
EmailSw = randomGen 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
context.testCase.setPropertyValue("EmailSw",EmailSw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="d921ad6c-9301-4403-b5bf-73342083c591"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="a4e84c0a-f7ad-4af5-af0d-4372d32f16fa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify email and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualEmail = context.testCase.getPropertyValue("EmailSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].emails[0].value.contains(ActualEmail)
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[value sw &quot;${#TestCase#EmailSw}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="63d3844a-5f2e-4824-b8a7-aeee5ec835eb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>email</con:name><con:value>MT0388@xyz.com</con:value></con:property><con:property><con:name>emailSw</con:name><con:value>MT0388</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_MhbyUAB6</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMT0388</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>83d5e2ad-30b5-43e0-8f97-3b4fa527f80a</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMT0388</con:value></con:property><con:property><con:name>Work</con:name><con:value>27829687688</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6292949980</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMT0388</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMT0388</con:value></con:property></con:properties></con:testCase><con:testCase id="765d1183-a642-4570-9906-f9be9c07a6f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_37-To verify the response for attribute &quot;emails&quot; with valid operator (ew=ends with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="10667f25-7889-425b-87d8-3d22070fd5af"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIyU3JvM3pURXA1aklQZ0hlT1RwYUFOckxVbnc0ajNOblBMcGdZV0x2Q0pJYWw5UHVKOXlwVitPMFVKMVRtUFRTSUhSUGI1NHd0VktqamFlWi96MWZHQXFKNDVwRW12enR1bGZvQ0ozOTZPa2NsWC9pUVZYeUxWVmwzRkRRTXdnV1ZEMThXSGNSYTZRbGtZemd5aXNsWGxLZ0xFZUVJdVh4WnA1Sjgyc1drUVBic2xCWCt5QzBJUTA3OVFsaFdKQ3kiLCJleHAiOjE3MzgzMDI5NzIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.DRXTNZqggU91TtfDSpZUymNLRSfCFKd1bChzHUiQQ34</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d27e8ad1-3d83-4100-8445-7fdb23300b19"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="d4f55527-6082-4764-9d27-93a8156bcc4f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="21053ab0-c4d4-452c-8ea3-8cba0c834cd2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify email and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualEmail = context.testCase.getPropertyValue("emailEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].emails[0].value.contains(ActualEmail)
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[value ew &quot;${#TestCase#EmailEw}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="82e8e391-9819-4d1b-a49a-959ab78c8018"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>email</con:name><con:value>CHljl9@xyz.com</con:value></con:property><con:property><con:name>emailEw</con:name><con:value>xyz.com</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_KJAnfToM</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameCHljl9</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6b98b2a8-02d1-4913-a737-1bbaaaf311cc</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidCHljl9</con:value></con:property><con:property><con:name>Work</con:name><con:value>06203936553</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8487264369</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameCHljl9</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameCHljl9</con:value></con:property></con:properties></con:testCase><con:testCase id="a30f9439-45c5-4215-935c-5bfbf891d166" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_38-To verify the response for attribute &quot;emails&quot; with Invalid operator for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="85033b13-95be-4db2-8c77-7208b62bad7c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIxcUJSSVJ1VTdzR0xHaHdFUENsKzZRR085ZW56RklXQzJrRVhLY29JWktpY1lzYklBczlIWWJCT2ZYRkhnSmJVOXBZUVpHNnJDemptUmMxV010OEVzR2ZTYnNMdVJrbDlDdGkyaXdrVmN2bVRSZk1HWWd5RGNsRDdjN2hFdWZHRjg5aFdRR0xYd1R5V3J1Qlh2ZHRCRVBBejYxTG1DNnE0OGZxM1lrL2dMZklCSzBEbDBLRU9Semdpdmt4OHRqRkUiLCJleHAiOjE3MzgzMDI5NzYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.eF8saKI_oaw2JKBJhjDSuRAVR9bRlL_heCLLgg8gEO8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="a4198129-7c3c-4f13-a7ea-ade318310055"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[value we &quot;${#TestCase#email}&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="25584775-0193-42df-8e91-94eb9013e89e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="7a8928ba-7ccc-4032-996b-13e08ce4adeb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_39-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (eq=equal) where primary is true" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ad1425b2-17c8-4e58-a828-380668f2af26"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJIWk1kcTBVb0JFWHJDNG1PRTFEcVpwck03VDNJVnZzcTQ5ZW5DdmhSNlFlTG5wSlR0cjRkL0wzQkhTckluc04rZHhtMmplU3M4VXFXS3BaRVVFUEpNL1U4QzJoQUx1eVdXUTFlVEs2TEFBZUpOVEtCU2tlVDBsVHNUbWV3ZUxHT2ZQRDd1UHhCamtDZnhLTmZpbmxPa2dZQjlLanJ0bGhibXQzS3lnSmxBZm1nclQ0elA0RS8vT1o3anlXOGZnUWUiLCJleHAiOjE3MzgzMDI5NzksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.kVKI5n8DwQiSJvf-gyN4gAzb-94jhda78iXPbtzOSrw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="12838e0a-d283-49d2-ad47-6a73f7d60c3d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="ab6f853f-470d-46a2-b508-d2e46d43733b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="40fb86d7-23f5-4ad4-89a6-f5705b640f37"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[primary eq true]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="71866d0e-e2c3-439a-894f-a5a400b6b984"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamenbcXxR</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>86f49cc6-7333-40df-bbb2-4ff9e3b1825f</con:value></con:property><con:property><con:name>email</con:name><con:value>nbcXxR@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidnbcXxR</con:value></con:property><con:property><con:name>Work</con:name><con:value>66962794005</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6916364392</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamenbcXxR</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamenbcXxR</con:value></con:property></con:properties></con:testCase><con:testCase id="935eaadb-3bc0-4c95-a629-3c7a96acf74f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_40-To verify the response for attribute &quot;Mobile&quot; with valid operator (eq=equal) for type" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="27dc70fb-4b21-44ba-817c-ebee14aeb611"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJqUjJ1bDJjK3BFZ05vM0d2azVQK0hLZGpJdGRDdjNuVlpIc0VaOTI0d2JMOXBpVEhvYU4yVWVpSk5LT1FyOUVjUmxiUkN1TEF2ZmRRRTR4SkN3V0lwaks4QkNZWklCMUZ6cjVMZnFKMmR5aHl0QXlLMDA5U1AyKzRYRzdDS0d1Ykl6WHhJN0ViYjh6VTkyQkRMM0ZDMW1RdERyVFJHbUlTc1VDTDFMaEk4cndkOTNpcEk2NEtoWTRUelNPSnhYSnIiLCJleHAiOjE3MzgzMDI5ODMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.29MALZhh7hFS5i9OBotz2T1ZGYio62JWwTBuB1WhKEs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="7cab32df-1906-4981-b7db-cd73bd55f2c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[type eq mobile]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="77c67550-88a2-4f0c-ae6f-a63e7b217a8a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_16250</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_hnqfs</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2517</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="597c2c4a-8664-43c7-8f24-78343886e20a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_41-To verify the response for attribute &quot;Mobile&quot; with Invalid operator for type" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="eef402d2-1260-4123-acf5-acde7ded074c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJXWFhzaW5YZ2JPaEFpVVhvTXh0UlpSd0ZHVUdCYUFNNnE1TUFxMjhZSUxTbmhHTmZVcDh6UEU1MXpyaEJ1WittL3JERk56d2g3VkE4QWI2VzFyUkg2VEhLYS9wVVhTNGZIMVFjK0pKaDVxckZ0eCtvZUdMNzlFa3FHOGhDL1AvWFp3Sk5JZmRSL01zMWpndnB5RU1ZSkFFUnRlMGJacGEvaHczdlprK1l3T0tTZ0ZxWmNDaEdMMGl5eVRIQ3lWRHZMeVN4NWE3NXFHaHhnVSs1dXZZSE9nPT0iLCJleHAiOjE3MzgzMDI5ODYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.QlRoJx2qqzLOHbiBzEvvu4i4Q60ukk5FllRMtCHhEFw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="132ce207-8181-49c4-b744-0f7340eff1aa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName eq &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4ab872d1-32a8-4f2c-ab45-8e69c58dcb15"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="aa39fa2c-cfb6-4121-9b64-21b2e8f74d19" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_42-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (ne=not equal) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0924f073-8b57-43f8-a3c2-2a9863e93693"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI1UXhWaElrODJlSytLSjV1MjVjMnZVcnNiWUZFem1GaDE5a1VuSWJ6b1lHV2NDb295bWNTU0JrWmJGcHNuTDEwakY5ZmVGRFRtbVlaT1k0dEZxREQvSW9mVnlGQnZhUDFPaFdXbTBXa2ZEbzNKclRhSm9ENDF1SjM1MGZpVTR6VHFwVDZaTXBHN2QzNWRqRkFJVW40VkZWbXdYNnhQZk5xOC9QNTc4VjIzMEFtM3QxREVRbDB0TWxhU2FFNHVLM3IiLCJleHAiOjE3MzgzMDI5ODksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.2-QVY5jpPTaMkDIouOz0bJcrIB8YAKqbbgd-LauGlF8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="caf87406-66ec-47c8-bff6-ae98df402c1d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="40c371b8-d4f6-4e97-bdc3-8379663a0ec9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="96a7cbb6-8292-4de3-bc3a-a5b8888d9d27"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value ne &quot;${#TestCase#Mobile}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="dbc8bb7f-dc76-4225-8c29-7646ae77d69d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Lkgy8MOH</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameVENSD2</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>d9449024-3e55-4266-b937-569262b3cb53</con:value></con:property><con:property><con:name>email</con:name><con:value>VENSD2@xyz.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>3305062527</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>ja-JP</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidVENSD2</con:value></con:property><con:property><con:name>Work</con:name><con:value>02500377038</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4146481796</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameVENSD2</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameVENSD2</con:value></con:property></con:properties></con:testCase><con:testCase id="697902c2-9bc0-4da3-9e32-a7281ceb3055" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_43-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (co=contains) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="56aec22a-e373-4123-9c08-d9cfc12b8f58"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJXcFJ1R1BZTmZpWjh5a1VZZ3RxcE1BZzBOMnc3dHVrVklxbTk3RjhZajhmOVNHTDBZc1RLTDRIYW5zSUQ3a1ZTV2Q3TGNqRDMzV0RnTUFIRHJXWmtBUmNQbEJiZ28zTEo4T0FBTWV4Z0RYZUlyOEdPNFdDbkFsSTgza2JFUXEzaTZPWHIxU0pKMVducXViVzBqSmtuaDhCQTdLaHY3TS9iNXdIaldiYnAvTmY2SmwxTlY5aFl3cWJxeTN0cG01VXgiLCJleHAiOjE3MzgzMDI5OTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.1g_fZwIgCbqGYZPMbtBIiD3_59rBbtDXCqXABBhJLSw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0f300cbe-2a8a-4df3-9594-17d869f13d33"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def phoneNumberContains = context.expand('${#TestSuite#phoneNumberContains}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = phoneNumberContains + randomGen1
Work = randomGen2
phoneNumberContains = phoneNumberContains 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("phoneNumberContains",phoneNumberContains)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="a957bb8e-cef0-43b6-a714-ffb1165ccea2" disabled="true"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "${#TestCase#phoneNumbers}"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage



// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="af450cd1-0e11-4809-ad8f-c721e3c4da23"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET__USER_BY_FILTER" id="158ed381-bbf9-4fae-ae5c-1d6517b49b9f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET__USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value co &quot;${#TestCase#phoneNumberContains}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7255b3ba-b4cb-4315-8e94-c93aba6dae6f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_qeukHtxG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameD27YWd</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2230910a-28be-4aa9-bfe2-e3e845c901a3</con:value></con:property><con:property><con:name>email</con:name><con:value>D27YWd@xyz.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>8009151</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>zh-CN</con:value></con:property><con:property><con:name>phoneNumberContains</con:name><con:value>915</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidD27YWd</con:value></con:property><con:property><con:name>Work</con:name><con:value>59945979653</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9158578968191</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameD27YWd</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameD27YWd</con:value></con:property></con:properties></con:testCase><con:testCase id="df55741b-d7d1-40bb-a9d4-5901b33abba8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_44-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (sw=starts with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6b1a8b18-61cc-45a3-88d1-582c0b16b113"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIraXIxWWxNcXpJYzIyYldvU1EyenhNcWU1QS9lWjhpYndrZUZSTzNmN3B6TEtRTjhralBoV0hQSm96d2xFeGUrYjJDbVkwZnhscEZLdUUzVGJVU1pJcHpvRjc2aWZ3Zk0zWjREOFBQL2JvT1REbXRSTzlWeU9YejlMZDEyeW5kQXp6amowbXYzUDlycTlTRGhZd2prZ3ZBZHYrV2JvWVpLMllNRERlSTZYaFEwTk9DeXJKY2M3L2N5T0IvTGZlOTkiLCJleHAiOjE3MzgzMDI5OTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.AbDvwMzmBguqMoWc6MaOgVUqSl2wtZb5vxIuSbPLyac</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2b89d3a1-7027-4282-a311-99de4bb10370"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')

def MobileSw = context.expand('${#TestSuite#MobileSw}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = MobileSw + randomGen1
Work = randomGen2
//EmailEw = EmailEw 
MobileSw = MobileSw

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
context.testCase.setPropertyValue("MobileSw",MobileSw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="211ae8c1-d8f4-413f-87cc-811cc5206b4f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET__USER_BY_FILTER" id="89c5f58c-8dc3-464f-93c9-2d27d4379b3a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET__USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value sw &quot;${#TestCase#MobileSw}&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5a4ca684-ad31-4ba8-8fd6-d99544fe2004"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_QG6J7dOv</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameJOjH6K</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9cd2fc67-e1c3-495b-b7d7-9eef176adf5b</con:value></con:property><con:property><con:name>email</con:name><con:value>JOjH6K@xyz.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>80091511</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property><con:property><con:name>phoneNumberSw</con:name><con:value>800</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidJOjH6K</con:value></con:property><con:property><con:name>Work</con:name><con:value>09134607464</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>95873134557</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameJOjH6K</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameJOjH6K</con:value></con:property><con:property><con:name>MobileSw</con:name><con:value>9</con:value></con:property></con:properties></con:testCase><con:testCase id="23003cb0-6227-488a-ba7b-d84240cb1249" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_45-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (ew=ends with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3f5b1cff-4314-42f5-8873-092ed0b88032"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJNWnFVMCtmakt2UDBEd2ZWTFlJZ1E1WjVLOFc4RGc5SExXTGRPSlN4MFpkZi9BNVI0a1A5VE9jcTNUUUo4akN0a2Y5MTVjaklRNW9mTmxmUlMvMDRjaEFlZU1rd05JcU0xOFU1akRUcFhTY3E2UHpmTjZhRERyQmZaenJFTm1OYXBleVFwTWpoZUkwdDBCQ2JBWVlzNXBBMzF4dHY4VjVaUlcvOW4xdGxWcFZmWlFQbFB4aVdYQXVHRWZTblRvTVMiLCJleHAiOjE3MzgzMDMwMDEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.varRiobpXsdl2OwAq49QD1gs_IgpRr-Un0XNBvGqpH4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="908ef267-8f4d-40a1-b6ee-b8c3280ea886"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')

def MobileEw = context.expand('${#TestSuite#MobileEw}')

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1 + MobileEw
Work = randomGen2
//EmailEw = EmailEw 
MobileEw = MobileEw

//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
context.testCase.setPropertyValue("MobileEw",MobileEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c12a9a78-36ca-44c8-8afb-c7b4829c926c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="9b721514-2964-4e46-86bc-16db867ffad6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value ew &quot;${#TestCase#MobileEw}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="59bed79e-2945-40d5-994a-394d439fc1f6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_SN1B5twR</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName4dHO9m</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4f4e2e24-667d-489e-b5bc-fb3d414bb66d</con:value></con:property><con:property><con:name>email</con:name><con:value>4dHO9m@xyz.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>2184025608</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nb-NO</con:value></con:property><con:property><con:name>phoneNumbersEw</con:name><con:value>08</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid4dHO9m</con:value></con:property><con:property><con:name>Work</con:name><con:value>61062232486</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>77904105818</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname4dHO9m</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname4dHO9m</con:value></con:property><con:property><con:name>MobileEw</con:name><con:value>8</con:value></con:property></con:properties></con:testCase><con:testCase id="fd56ecdc-0094-4bbf-9224-4fed69cbc8e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_46-To verify the response for attribute &quot;EmployeeNumber&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c3fed5bf-960f-44c9-8b46-1f2e07937b75"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJGa2pEUmxKUENZMHZPZ0tIdjFjS01XRXdUQWtuSiswUzZmT2dYK1cvQlZBTXFWU3pyYzgyRUNNZ0RtbHA3RkZBRWp6aytoRzJRT1N0UWdrdlJlSy9naXdRS2F1OFRkRktHMnBHNDVtVEduN2wyck5ySm9QRzBlMXFqUlpoTzBSQWl3ZDJ1eSs2WWFMKzRFOWhPN0ZUUzl0TTEwM2Y3V1NYUTlSVWtFNnhqMC9QRlVkV1hsMFBMVStjejZsNHcyM2wiLCJleHAiOjE3Mzg3NTc1OTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.WZ6Euu40ktG6F0oA6TV03-29bW4GSwyRrYqGthVu5BI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4213ab1e-0071-4c4a-8ecf-e7fb29bfd656"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def employeeNumber = context.expand('${#TestSuite#employeeNumber}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
employeeNumber = employeeNumber + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("employeeNumber",employeeNumber)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="9c208f25-f8f8-4931-9af9-bc90f7f63c9d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}",
        "employeeNumber": "${#TestCase#employeeNumber}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="34d84dcf-cf88-4f0e-b59e-8e1165308821"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.employeeNumber eq &quot;${#TestCase#employeeNumber}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5350ec15-86bc-463e-9c76-6fa6040cf4ff"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamexhRGcy</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>be5c66a5-e974-4b42-aa0e-21d83b80eea4</con:value></con:property><con:property><con:name>email</con:name><con:value>xhRGcy@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidxhRGcy</con:value></con:property><con:property><con:name>Work</con:name><con:value>40052369204</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0097646918</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamexhRGcy</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamexhRGcy</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property></con:properties></con:testCase><con:testCase id="e1b398e3-57be-4a77-81f2-9fa1d4f520ba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_47-To verify the response for attribute &quot;EmployeeNumber&quot; with valid operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="acee21c3-dc26-43a8-98f9-df60f46de709"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJDS0wxbm8wRkdTSHNMQ2QvTXdBdnFPS3lQUURGUm93WHVnUGhrTzk1cWhIL0U0NHBBQWRDWllzc3B0Mkc0ZkNSejh1MUo2anhZUU45N25nNDdpY1lrZ2RYUXE2N3RHMlpwMm1UenV1TGxSQWFudVdTbEZaQkVPUFZ2VkZIelQydVM3TzJteG1hRyttL29wbkpYVFV4SThwOHEwWnhpOWFOVHFHNy8vVTBwbFZleE12dGpDTi9MZk5iSnBMeDV1blIiLCJleHAiOjE3Mzg3NTc3OTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.VqTOcS2aY_b1mm1VTrGteQmjTIM5b8BtWMi8Mplb7VI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3bc21d73-763d-4eab-8ddd-9dd1af18a31e"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def employeeNumber = context.expand('${#TestSuite#employeeNumber}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
employeeNumber = employeeNumber + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("employeeNumber",employeeNumber)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="afb24f5a-fe88-4802-af58-4623ca469c6e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}",
        "employeeNumber": "${#TestCase#employeeNumber}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="dc2d2db1-ca86-4704-a9ab-76d5927e2be6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.employeeNumber ne &quot;${#TestCase#employeeNumber}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7d729000-a8ee-4036-b3ab-08463904d268"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameEVSNYA</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>edec006f-2b12-4c22-bdc2-777cf50008e1</con:value></con:property><con:property><con:name>email</con:name><con:value>EVSNYA@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidEVSNYA</con:value></con:property><con:property><con:name>Work</con:name><con:value>04661699223</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3898656343</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameEVSNYA</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameEVSNYA</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoEVSNYA</con:value></con:property></con:properties></con:testCase><con:testCase id="01621371-2378-4d5e-b56d-5577accc7a17" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_48-To verify the response for attribute &quot;EmployeeNumber&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0b951a00-b8c3-4e7d-85cb-5f2f97abeb92"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJUM2lUUUNMamEzWGV5OGpnbEN3dWxCUVZNM1ZzbkhOSHVYcUM5ZWwwa1A5U1c3S25QWndoTmd1R3YvMFRBUEJQdmtJS3MvcUVwVksrTFpEUlpKK2o5Q3MrdFF2TmwrMVlPM3BzdU16aHpKZHNLL3Q0RmNGTUFYZEZhRkhtQTh1RUdXRTc5dUlNMWRuVXV0MmJkNWRFTFduTGgrZzRFKzhPOTYveGR0Y2YrK25pZ1ZERzkzYTFyVUtvRGVUNW9SbEIiLCJleHAiOjE3Mzg3NjA3OTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.1PT1CplAhGQKPhpkaHQoqS60eeOORT3p9BV-OwSg2XY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2648e4ef-c5a2-4d8e-956f-05596d77b662"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def employeeNumber = context.expand('${#TestSuite#employeeNumber}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
employeeNumber = employeeNumber + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("employeeNumber",employeeNumber)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f6f747f9-9fad-45df-91bc-0e1834e8b86e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}",
        "employeeNumber": "${#TestCase#employeeNumber}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="0f55824b-5633-441f-acb6-9347f2ff870a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.employeeNumber co &quot;${#TestCase#employeeNumber}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="be42bb90-1aa5-41c8-a962-6e3f2ee02f82"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameZpKMGU</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>013825e8-68f8-45bc-b15e-2a7bcd94237b</con:value></con:property><con:property><con:name>email</con:name><con:value>ZpKMGU@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidZpKMGU</con:value></con:property><con:property><con:name>Work</con:name><con:value>74014913323</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4822841803</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameZpKMGU</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameZpKMGU</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoZpKMGU</con:value></con:property></con:properties></con:testCase><con:testCase id="5b66cdd9-39dd-42fd-942e-b94ac0a0a240" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_49-To verify the response for attribute &quot;EmployeeNumber&quot; with valid operator (sw=start with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="52ce502b-c700-428a-a338-61ea574d919c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLUldSR3F4ZWlHLzViZnZBcElwNUhvRDF2SDJ1dGllcnYvNkFqSGhNUXFqL25IbkhFY0xwNVdsR2t0WGcvbitIaEltNVBFelRScTA2ZFptaEt3bFRxR0Q2d1NyQlNUT1M0aXM3NkM1VnVyempRS0NzaU5zZ0RBc0s0YTNLS1VYbVJKbzZRc25xNmVoZVU1QlVOMVFVKyszUVZxRXN2dE9mUlZEQzdoNXUyQk8zajJuOXllR0FEZCtDRkgwRjMwVWEiLCJleHAiOjE3Mzg3NjIyNDcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Y1P6-8Mpgl2OR9JoLB3PCHpwzLtbjAxcVVyTspbUhRo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cbc3234b-da1d-47d8-83eb-1969a28744d1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def employeeNumber = context.expand('${#TestSuite#employeeNumber}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
def employeeNumberSw=employeeNumber
employeeNumber = employeeNumber + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("employeeNumber",employeeNumber)
context.testCase.setPropertyValue("employeeNumberSw",employeeNumberSw)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="b5de4bf2-07da-40be-ac25-210d73536626"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}",
        "employeeNumber": "${#TestCase#employeeNumber}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="d34adcb6-434c-4998-8969-34811326fcb1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.employeeNumber sw &quot;${#TestCase#employeeNumberSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b80fee97-739f-4455-a56e-c507eb9888f3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamehshWUO</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6409f199-964c-4392-a78d-8ba2c0b11ffd</con:value></con:property><con:property><con:name>email</con:name><con:value>hshWUO@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidhshWUO</con:value></con:property><con:property><con:name>Work</con:name><con:value>79572269118</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6554222987</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamehshWUO</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamehshWUO</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnohshWUO</con:value></con:property><con:property><con:name>employeeNumberSw</con:name><con:value>Empno</con:value></con:property></con:properties></con:testCase><con:testCase id="4c216b2a-efca-484e-a005-7b85ff50b505" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_50-To verify the response for attribute &quot;EmployeeNumber&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a69c6a66-2ffd-4242-9a95-c55a23c31510"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJTSFFKSjBDemx3U1loSGhVZlZWV2FaODcyTXF5bXVxMnJmNG4yU1Z6Y0Z1UzdjNzlyWldHVWNUb250akpYZURzNVg3Z3J6K1AzUnMvVndMRXNBVGRaQ2JrbTdMVEV3c2FvU0owaFpoQ0ZMOEtiYi9LQng3aUd3RzRJelBoSFAyemsvUDNUL2twZWpCcmJ1VUpTSWhWSHpiRG5ZM2hmekFEUE1LeUtVT0hydCt5S0VLQWN0NkFOOHVQeEo3RDVJWVYiLCJleHAiOjE3Mzg3NjIzMTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.rNFD9eq_Uf9dwL_269b_Duy9R2B0zfmLZcaPseXpxcg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9246902e-781e-4f99-9529-7a64d33cc7c0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def employeeNumber = context.expand('${#TestSuite#employeeNumber}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
employeeNumberEw = randomGen
employeeNumber = employeeNumber + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("employeeNumber",employeeNumber)
context.testCase.setPropertyValue("employeeNumberEw",employeeNumberEw)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="b28960b3-b383-4aca-a537-4d0eac392e77"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}",
        "employeeNumber": "${#TestCase#employeeNumber}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="4a6e229f-7189-4e18-ab8f-8f712f86387b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:enterprise:2.0:User.employeeNumber ew &quot;${#TestCase#employeeNumberEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cfccb837-4ec5-4ae3-8718-0db2a07da597"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName1GAgoc</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c4436399-5962-47f9-8957-05778d7e30e1</con:value></con:property><con:property><con:name>email</con:name><con:value>1GAgoc@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid1GAgoc</con:value></con:property><con:property><con:name>Work</con:name><con:value>32000191251</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8630532929</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname1GAgoc</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname1GAgoc</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>Empno1GAgoc</con:value></con:property><con:property><con:name>employeeNumberEw</con:name><con:value>1GAgoc</con:value></con:property></con:properties></con:testCase><con:testCase id="5c3532fe-bd1b-4320-bb5f-bf569729e292" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_51-To verify the response for attribute &quot;middleName&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2768a77b-0924-45fd-ad29-f0d50e38c922"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIxNUsxTk9pTUozbmZvbHJQZjF4dHJvUWpQdkdLdjlxYXFDcHh4WUljSVE5SWRYRW03SHNrUERuM1RUQlBPS2R3WGRMVVlFblZickJmampKRWJUb2plckhyb29EV2t1cjhEZ1BOSmVlMVpMSW9rUktTdXVvU3FWM3FRUCtoV1ZSTUVuV2NxRDVSZGd2NnQzTU5PN055UzNsa3BtY2dBNm1tR3pGMFRJUGVYWjZVVTFDWEd1dFRSTVBVejROTyt6dzQiLCJleHAiOjE3Mzg3NjI3MzIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ILy53kqaOnHiCTIwB1TsNfGL8LBcqfqf0MTjnCn0Qig</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2e184897-2656-4369-b043-8607edeaa140"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def middleName = context.expand('${#TestSuite#middleName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
middleName = middleName + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("middleName",middleName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f6b8475a-908c-4c89-a43d-e2879e7e3cc9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "middleName": "${#TestCase#middleName}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="a335fafe-9c4d-4056-b0e2-f1b7c2837dda"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.middleName eq &quot;${#TestCase#middleName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4fc29046-6ab6-4f16-921f-c12a7bb26c6d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameni4vhj</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2069ab49-0db7-4ace-b9ab-3074e46f30a1</con:value></con:property><con:property><con:name>email</con:name><con:value>ni4vhj@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidni4vhj</con:value></con:property><con:property><con:name>Work</con:name><con:value>62076925587</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7167645987</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameni4vhj</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameni4vhj</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mnameni4vhj</con:value></con:property></con:properties></con:testCase><con:testCase id="2415ad7c-b218-4c12-929d-93add93eabd7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_52-To verify the response for attribute &quot;middleName&quot; with valid operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b0aea4f6-a3fa-4bd2-b0a3-960ab42319e3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJTNlJFelgyU0ZPcGNNb1I1dzMvT1hvWURYUWZvbTliM1kzZzh2bHlXbHdKbVk0UzhkQS9CcXo0SmN2V015TnBTMVlSMDZ6TDNMTWlKSkRsMmNUWWxDQ1FqamdXMWtxSHRpc0p1TGdlR0RVRXBMcFJZRTVnRzBaNXhMRFkrRmZKT2syUTdJclBnWVduTmlsY215M1ZKUXc3cFU3dUtxWXpRQ25LZXpUTm1CY0lHVmNnTDlhWGVDQnFzQkdkRjBZZTZtL2lLR1lqNmxDV0h2ekVKOU1sZnFRPT0iLCJleHAiOjE3Mzg5MjExNjEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Xa3GVRFdF4OonK2e6jsP9E5OEmb5Ln8vwzA4eV9Mw2Y</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b9ef7df9-97e5-455f-902d-8c07396059f1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def middleName = context.expand('${#TestSuite#middleName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
middleName = middleName + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("middleName",middleName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="7826daf7-38c2-4f1b-9e8f-a373b87c3fd0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "middleName": "${#TestCase#middleName}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="b5b41a06-14dc-4de9-aee8-4cd95de5bb32"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.middleName ne &quot;${#TestCase#middleName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a82e82c7-041b-40a8-8923-e1f82613320a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameoNkEr1</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e46970e7-4c94-440a-ad7a-2d25956ad96c</con:value></con:property><con:property><con:name>email</con:name><con:value>oNkEr1@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidoNkEr1</con:value></con:property><con:property><con:name>Work</con:name><con:value>85051516880</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9639566200</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameoNkEr1</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameoNkEr1</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>MnameoNkEr1</con:value></con:property></con:properties></con:testCase><con:testCase id="f5186e2e-9b79-438c-88f4-414045494c97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_53-To verify the response for attribute &quot;middleName&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2ec07190-70b3-4d70-8c0e-1d98cef63ecf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJvUWdHaFIzN0c2Y1hEam1UY1ZvOXE5ZjVDYnpJTzRLWUpSTEJvTXV4UVBiY2UwdFZrS3Q1elV0bUI4VzB5d0FDaW9SS2pJU2VvaldNMU5GNUF3YlVnczRRRW1QL3NxK3Bnc2VHNVBEOUlIUU5nTUVXaUE3WnMwYlZHUFZudU9UNjFyOHg1QzZjQkxCdzdidkJFaEZueDZxWEFEMk9QbTZ0ZktVcnc1ZUxJZkpjS3JCV3FvK01IdmhqNXpWS2xmSTYiLCJleHAiOjE3Mzg5MjEzMzYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.hFXzKu5Bw95_ivY49gr-g3HtDaqCQEcoLKnYDbLIbLA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="185e67aa-f552-4023-aa84-f70ade40e800"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def middleName = context.expand('${#TestSuite#middleName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
middleName = middleName + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("middleName",middleName)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="9adf6f4e-8f59-4c27-a27e-db664d20f122"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "middleName": "${#TestCase#middleName}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="4afa7cb0-4e46-4ccf-ba65-8facb11dc875"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.middleName co &quot;${#TestCase#middleName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f2c66355-53f1-42e9-b8ee-b1c872483ad0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamebgGKGX</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5fbf65eb-8607-48c2-9eb8-01eb91252c5e</con:value></con:property><con:property><con:name>email</con:name><con:value>bgGKGX@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidbgGKGX</con:value></con:property><con:property><con:name>Work</con:name><con:value>71011312123</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>5554837104</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamebgGKGX</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamebgGKGX</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>MnamebgGKGX</con:value></con:property></con:properties></con:testCase><con:testCase id="366e4902-e35d-41f9-9cf8-fb78bafe0e2f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_54-To verify the response for attribute &quot;middleName&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="dae71431-5a36-4309-848c-dd39a2cb7d07"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtbGZxMFQ4MTZMNWxBYzY4c25OSTR5TVNyR3VDTzBIVFU5UmJyWFVqKzlobzc1SWJhRGRGOUgxMmFLT1dYRXhSQWlFWEdodS9MVi92YkdpTjVFc25uRmFBcElHa0FlT3pFKzkxcTMyN1R6bWVHL2ZpNys2NXJEd2ZQZEl0T1hCaTh2NU5qdjFWb2VMeTZXMWVQYUZQNzFETllGd2pTSzhFaEpQQnNxajRESXY2eWxjVnRnK1RndEZMMnNwbFRacGoiLCJleHAiOjE3Mzg5MjE2MzIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ryZWD1wiFaRcrpz8GSSsVRKENIxy_33SGMq8y8f1gwM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e6ae3715-6be6-4274-8aea-367b8d223994"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def middleName = context.expand('${#TestSuite#middleName}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
def middleNameSw = middleName
middleName = middleName + randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("middleName",middleName)
context.testCase.setPropertyValue("middleNameSw",middleNameSw)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="917a1545-14cd-49e0-a52a-658fbd30f9ba"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "middleName": "${#TestCase#middleName}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="1c348b2c-6f46-4e49-81df-50b24cc89cf5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.middleName sw &quot;${#TestCase#middleNameSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="36d379be-cda6-48ee-bd22-11b5666687cb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName21Sjqc</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>eee16dcd-1d2f-42e8-89df-1ae87f078614</con:value></con:property><con:property><con:name>email</con:name><con:value>21Sjqc@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid21Sjqc</con:value></con:property><con:property><con:name>Work</con:name><con:value>91363864242</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7063912322</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname21Sjqc</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname21Sjqc</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mname21Sjqc</con:value></con:property><con:property><con:name>middleNameSw</con:name><con:value>Mname</con:value></con:property></con:properties></con:testCase><con:testCase id="6677dd76-b695-4fe4-b882-cc366d302ddb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_55-To verify the response for attribute &quot;middleName&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ed0ea848-7283-4957-9a56-97c10d07a46c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBMkpZa3B2VHZlcThEcWY2MEdDQUZsT080Nm4vRFNGWmFlNE9YTTBRSFVEZEIxZVMvVG9Rb3hKbWFQSWpCWVlGQUxqU3d1TEc2MDMwSmJ4VlQvZnN3c3JPU0ZXWldidEVuMjFGQ3JlNFFEY3JoekRaVGNHUGE4THdVWDNudnI0Wll2eTFkcnhyQ0NnVHZ4Wm9wcDRHclNwTUp3bFFrWStwNXFBdEJiRGhoRVBlSWVPdXQvZ1FSTzRiUVY2MFJacU8iLCJleHAiOjE3Mzg5MjM3OTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.8MjXHzUi2GV1mfr4MnfQza4ZzNsikUmoiy7lunPAuro</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="87bf79ba-a86d-49dd-9d0d-94260ac5f3c6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def middleName = context.expand('${#TestSuite#middleName}')

//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
middleName = middleName + randomGen
def middleNameEw = randomGen
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("middleName",middleName)
context.testCase.setPropertyValue("middleNameEw",middleNameEw)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="345d0233-575f-404f-8840-8d0b968122ed"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "middleName": "${#TestCase#middleName}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="a64d57f7-f6bb-4c6f-bb9d-c10d7efa8516"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.middleName ew &quot;${#TestCase#middleNameEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d925b144-4389-453f-909c-6f42e34c37fc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamenJ4uX0</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>49585d34-7d76-4578-bd8f-bd038080316b</con:value></con:property><con:property><con:name>email</con:name><con:value>nJ4uX0@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidnJ4uX0</con:value></con:property><con:property><con:name>Work</con:name><con:value>10277136366</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6456801351</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamenJ4uX0</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamenJ4uX0</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>MnamenJ4uX0</con:value></con:property><con:property><con:name>middleNameEw</con:name><con:value>nJ4uX0</con:value></con:property></con:properties></con:testCase><con:testCase id="aed9760b-3fee-43db-93db-dade234e3b21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_56-To verify the response for attribute &quot;phoneExtension&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1b371f40-2479-434a-ab66-45d6ff2bf46f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ6RmJXSE5QN3MxZGxmeFQyMzF2MkFlT1IrNUJkV1dJY1NlWE5jenB5YlYxM0tucE5PM3l3a2FMWUQrRE9kb1djNStxdHM4d09GcUpGVm4zczZSc0VZZE4vY1NSa05XNmVDaWhYMFZ6bUZYWGJsUlVvVjRtSWJKSGM3cU9FRmdqUm5JbXpQQnpHL29rUDR6alJEdXhKazNxTlBlK3dKVC9zN3BMVnpIZzJ0RzRvdE5ieEh0ZFpCMjE3UEhQUC9ReHQiLCJleHAiOjE3Mzg5Mjc4OTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.2L1ES4DEBYCY9XIg8OGIGdU8Zl6vu2NpDCl7h3Cf1ms</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="189f0eeb-644a-4714-ad26-52c3881dc62e"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
  def randomGen3 =RandomStringUtils.randomNumeric(2)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def phoneExtension = context.expand('${#TestSuite#phoneExtension}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
phoneExtension = phoneExtension + randomGen3
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("phoneExtension",phoneExtension)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="ef0dd204-0ff2-436d-909e-3086cf542f29"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "phoneExtension": "${#TestCase#phoneExtension}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c58413f0-42c1-4815-a200-60c6b84bd306"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.phoneExtension eq &quot;${#TestCase#phoneExtension}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="43044877-3ba6-4d60-a3ba-f0ab08b01212"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameou0Zh7</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>49da45dc-5e1c-4472-86eb-38d61cc369a9</con:value></con:property><con:property><con:name>email</con:name><con:value>ou0Zh7@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidou0Zh7</con:value></con:property><con:property><con:name>Work</con:name><con:value>65829233219</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2864635877</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameou0Zh7</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameou0Zh7</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mnameni4vhj</con:value></con:property><con:property><con:name>phoneExtension</con:name><con:value>phext67</con:value></con:property></con:properties></con:testCase><con:testCase id="51b56d44-86a9-4a56-8249-c6916d464957" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_57-To verify the response for attribute &quot;phoneExtension&quot; with valid operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a2c0efd9-daca-485a-b413-4c7fad5ddc1f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ6RmJXSE5QN3MxZGxmeFQyMzF2MkFlT1IrNUJkV1dJY1NlWE5jenB5YlYxM0tucE5PM3l3a2FMWUQrRE9kb1djNStxdHM4d09GcUpGVm4zczZSc0VZZE4vY1NSa05XNmVDaWhYMFZ6bUZYWGJsUlVvVjRtSWJKSGM3cU9FRmdqUm5JbXpQQnpHL29rUDR6alJEdXhKazNxTlBlK3dKVC9zN3BMVnpIZzJ0RzRvdE5ieEh0ZFpCMjE3UEhQUC9ReHQiLCJleHAiOjE3Mzg5Mjc4OTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.2L1ES4DEBYCY9XIg8OGIGdU8Zl6vu2NpDCl7h3Cf1ms</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="63df3dfc-9737-47a9-846e-e46c00f43959"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
  def randomGen3 =RandomStringUtils.randomNumeric(2)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def phoneExtension = context.expand('${#TestSuite#phoneExtension}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
phoneExtension = phoneExtension + randomGen3
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("phoneExtension",phoneExtension)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5c444e47-8146-43c7-bef9-8620f596f204"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "phoneExtension": "${#TestCase#phoneExtension}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="fa2ae0d9-6d56-43b2-bfcd-0051f657a7c6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.phoneExtension eq &quot;${#TestCase#phoneExtension}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="676ad8f9-020d-4587-b7b1-9d23af323354"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameou0Zh7</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>49da45dc-5e1c-4472-86eb-38d61cc369a9</con:value></con:property><con:property><con:name>email</con:name><con:value>ou0Zh7@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidou0Zh7</con:value></con:property><con:property><con:name>Work</con:name><con:value>65829233219</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2864635877</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameou0Zh7</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameou0Zh7</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mnameni4vhj</con:value></con:property><con:property><con:name>phoneExtension</con:name><con:value>phext67</con:value></con:property></con:properties></con:testCase><con:testCase id="20248d9b-aa05-4242-b388-341ffee8c840" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_58-To verify the response for attribute &quot;phoneExtension&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="5f242af9-3d98-42f6-943c-8c4dc82c127f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ6RmJXSE5QN3MxZGxmeFQyMzF2MkFlT1IrNUJkV1dJY1NlWE5jenB5YlYxM0tucE5PM3l3a2FMWUQrRE9kb1djNStxdHM4d09GcUpGVm4zczZSc0VZZE4vY1NSa05XNmVDaWhYMFZ6bUZYWGJsUlVvVjRtSWJKSGM3cU9FRmdqUm5JbXpQQnpHL29rUDR6alJEdXhKazNxTlBlK3dKVC9zN3BMVnpIZzJ0RzRvdE5ieEh0ZFpCMjE3UEhQUC9ReHQiLCJleHAiOjE3Mzg5Mjc4OTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.2L1ES4DEBYCY9XIg8OGIGdU8Zl6vu2NpDCl7h3Cf1ms</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6a43e7b6-ee1a-42b6-a432-d831ac1a5f16"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
  def randomGen3 =RandomStringUtils.randomNumeric(2)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def phoneExtension = context.expand('${#TestSuite#phoneExtension}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
phoneExtension = phoneExtension + randomGen3
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("phoneExtension",phoneExtension)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="7d6fd7d9-33d9-4ab3-9d39-f775c0305fc8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "phoneExtension": "${#TestCase#phoneExtension}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="71acd809-6d07-44a9-830a-18e4ead19e0b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.phoneExtension eq &quot;${#TestCase#phoneExtension}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d738cdd3-575d-4f5e-a793-daf07e8fcb2c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameou0Zh7</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>49da45dc-5e1c-4472-86eb-38d61cc369a9</con:value></con:property><con:property><con:name>email</con:name><con:value>ou0Zh7@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidou0Zh7</con:value></con:property><con:property><con:name>Work</con:name><con:value>65829233219</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2864635877</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameou0Zh7</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameou0Zh7</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mnameni4vhj</con:value></con:property><con:property><con:name>phoneExtension</con:name><con:value>phext67</con:value></con:property></con:properties></con:testCase><con:testCase id="f646dd90-fcec-4dc1-bcf1-0555ec133aad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_59-To verify the response for attribute &quot;phoneExtension&quot; with valid operator (sw=start with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c39ad6a3-87dc-48cd-b5fc-b1020c619d2f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJXUFp3cU9TZzhJdlFVWlJwMU9tQ3BSMktSZGExQ09aY2N1clN5Mk9LNGlXT1lSekY0UjFtYURWT21vT0hCZ0kzdXBRRFk1bDF4OTZvSUpHRGVXcTVQdmk0WitZUkllM052K3BQTmExMVJDRHZUaEtvRURXNkRzV1NXV2NLSGpEQWNRcmJhNVRCVEZsZXprcDhMRmprc0RoVXpVa1JKV29yc1VwdWVNSkdFVDQ9IiwiZXhwIjoxNzM4OTMzODg5LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.bdiwgH1w6LJ7tDys5-VR6MeoesBK4dyPXofn696k3O0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="389846b1-d293-4cc5-a72b-276bd7318484"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
  def randomGen3 =RandomStringUtils.randomNumeric(2)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def phoneExtension = context.expand('${#TestSuite#phoneExtension}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
def phoneExtensionSw = phoneExtension
phoneExtension = phoneExtension + randomGen3

//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("phoneExtension",phoneExtension)
context.testCase.setPropertyValue("phoneExtensionSw",phoneExtensionSw)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="093f66be-d39e-439b-9422-1b9445ddaef3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "phoneExtension": "${#TestCase#phoneExtension}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="0c094da4-8f86-46cb-8a23-aa750d72f04a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.phoneExtension sw &quot;${#TestCase#phoneExtensionSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="277dd6bb-ca26-4c1a-9689-ad5eb7c5683e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameOCoD81</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>bb04538a-a364-4d26-9c83-e0e129c170b6</con:value></con:property><con:property><con:name>email</con:name><con:value>OCoD81@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidOCoD81</con:value></con:property><con:property><con:name>Work</con:name><con:value>01866353246</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2883527851</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameOCoD81</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameOCoD81</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mnameni4vhj</con:value></con:property><con:property><con:name>phoneExtension</con:name><con:value>phext88</con:value></con:property><con:property><con:name>phoneExtensionSw</con:name><con:value>phext</con:value></con:property></con:properties></con:testCase><con:testCase id="f25b65b8-0e00-42ef-b822-e50eecb00b5a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_60-To verify the response for attribute &quot;phoneExtension&quot; with valid operator (ew=end with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a9da12b6-dd96-45f1-8ab6-110f851d7a52"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJFM0dhTkl5UEQzK2MxVjYrL0RpWUdINHQ0anlJb2dyNlZQSFZBaVRxRnR1MWc3N0QvZ1RRcGZUUjh2ZGxXSVR6bXBlWjlBbjN6bXNMK0dZTTlLdC9kTGN2Nnd6aU9MYW4wZy9POWFOVnI4NS9GNEpDT1lEeU5nRHRwa2c3dGphQnJ6WUpNay9Sbm1uYk5FN3pBVFpOaVd1ZmY3R3F4cXAwdWNBVVBMaDMzaVB3b3loeEhFR3FpOWJacTJvcG1vTWMiLCJleHAiOjE3Mzg5MzQwNjEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pRJkyhWln8IipM-sCCTm26vxvaXT7GbpmBlsm69SvWk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="993a9abb-9a2f-46f2-ae14-efff5439f467"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
  def randomGen3 =RandomStringUtils.randomNumeric(2)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
def phoneExtension = context.expand('${#TestSuite#phoneExtension}')
//def EmailEw = context.expand('${#TestSuite#EmailEw}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2
def phoneExtensionEw = randomGen3
phoneExtension = phoneExtension + randomGen3
//EmailEw = EmailEw 


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("phoneExtension",phoneExtension)
context.testCase.setPropertyValue("phoneExtensionEw",phoneExtensionEw)
//context.testCase.setPropertyValue("familyNameEw",familyNameEw)
//context.testCase.setPropertyValue("EmailEw",EmailEw)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4f0d0db1-4ba9-4d82-8183-79645b6224d7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    },
"urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "phoneExtension": "${#TestCase#phoneExtension}",
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="7cd5b7aa-b958-44de-a6dc-8d4bb031d3b7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User.phoneExtension ew &quot;${#TestCase#phoneExtensionEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b9edab60-8491-4637-967a-a18c2788aebc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameQOExSE</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1c106076-9def-4bb0-a94a-91ea0dd76aa5</con:value></con:property><con:property><con:name>email</con:name><con:value>QOExSE@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidQOExSE</con:value></con:property><con:property><con:name>Work</con:name><con:value>36936250068</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2159554490</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameQOExSE</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameQOExSE</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>EmpnoxhRGcy</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mnameni4vhj</con:value></con:property><con:property><con:name>phoneExtension</con:name><con:value>phext92</con:value></con:property><con:property><con:name>phoneExtensionEw</con:name><con:value>92</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>UpdatedWork1</con:name><con:value>01</con:value></con:property><con:property><con:name>UpdatedWork</con:name><con:value>11</con:value></con:property><con:property><con:name>UpdateduserName</con:name><con:value>KK</con:value></con:property><con:property><con:name>UpdatedMobile1</con:name><con:value>89</con:value></con:property><con:property><con:name>UpdatedMobile</con:name><con:value>9</con:value></con:property><con:property><con:name>UpdatedGivenName</con:name><con:value>updatedName</con:value></con:property><con:property><con:name>UpdatedfamilyName</con:name><con:value>FamilyUp</con:value></con:property><con:property><con:name>UpdatedEmail</con:name><con:value>Updated</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>pathUserName</con:name><con:value>userName</con:value></con:property><con:property><con:name>PathPhoneNumber</con:name><con:value>phoneNumbers</con:value></con:property><con:property><con:name>PathLocality</con:name><con:value>addresses[type eq \"work\"].locality</con:value></con:property><con:property><con:name>pathGivenName</con:name><con:value>name.givenName</con:value></con:property><con:property><con:name>pathFamily</con:name><con:value>name.familyName</con:value></con:property><con:property><con:name>pathEmail</con:name><con:value>emails</con:value></con:property><con:property><con:name>PathDepartment</con:name><con:value>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department</con:value></con:property><con:property><con:name>PathCountry</con:name><con:value>addresses[type eq \"work\"].country</con:value></con:property><con:property><con:name>PathCostCenter</con:name><con:value>urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:costcenter</con:value></con:property><con:property><con:name>PathAddress</con:name><con:value>addresses[type eq \"work\"].country</con:value></con:property><con:property><con:name>opReplace</con:name><con:value>replace</con:value></con:property><con:property><con:name>opRemove</con:name><con:value>remove</con:value></con:property><con:property><con:name>opAdd</con:name><con:value>add</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>Mno</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>userNameSw</con:name><con:value>UName</con:value></con:property><con:property><con:name>userNameEw</con:name><con:value/></con:property><con:property><con:name>givenNameSw</con:name><con:value>Fname</con:value></con:property><con:property><con:name>givenNameEw</con:name></con:property><con:property><con:name>familyNameSw</con:name><con:value>Lname</con:value></con:property><con:property><con:name>familyNameEw</con:name></con:property><con:property><con:name>externalIdContain</con:name><con:value/></con:property><con:property><con:name>externalIdSw</con:name><con:value>extid</con:value></con:property><con:property><con:name>externalIdEw</con:name></con:property><con:property><con:name>EmailSw</con:name></con:property><con:property><con:name>EmailEw</con:name><con:value>xyz.com</con:value></con:property><con:property><con:name>MobileSw</con:name><con:value>9</con:value></con:property><con:property><con:name>MobileEw</con:name><con:value>8</con:value></con:property><con:property><con:name>phoneNumberContains</con:name><con:value>915</con:value></con:property><con:property><con:name>employeeNumber</con:name><con:value>Empno</con:value></con:property><con:property><con:name>middleName</con:name><con:value>Mname</con:value></con:property><con:property><con:name>phoneExtension</con:name><con:value>phext</con:value></con:property><con:property><con:name>title</con:name><con:value>title</con:value></con:property><con:property><con:name>userType</con:name><con:value>userType</con:value></con:property><con:property><con:name>workMode</con:name><con:value>Wmode</con:value></con:property><con:property><con:name>managerValue</con:name><con:value>manager</con:value></con:property><con:property><con:name>image</con:name><con:value>www.eimage.com</con:value></con:property><con:property><con:name>organization</con:name><con:value>www.eptura.com</con:value></con:property><con:property><con:name>usageLocation</con:name><con:value>usageLoc</con:value></con:property><con:property><con:name>officeLocation</con:name><con:value>offcLoc</con:value></con:property></con:properties></con:testSuite><con:testSuite id="75132bf1-8686-4adc-bc2a-b92f15663a91" name="GetSCIMUser-LogicalOperators TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="46434443-a0f0-4b66-9a39-06f942268ee2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify that attributes will support all filters with logical operator (AND)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="398ae0de-a776-49a1-84fe-b579f4bec9d8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ0RUZKdTh6cm94amY0OERteGhnWm42WC9JSW5MVkpNaWNrNjI5bnJzV0M4Wk43Ukd6TGJISVUzR1ZBeFJ3VjNqaGlURkpEK1NaNXZSWlU3czFFejJHYm9KT1JlVkRnL21jRmQ5YzNISUhtM08raklsd2JGMHhJdE1KSTk2elU5bXF4cmFKZVdvU2ZiQjVZWExXREdsc1huTzdKeTBjTzA5VmpEOWJXUGhydEpjUmlaYnJqdUVzZ3IwOHgzMlZKQmoiLCJleHAiOjE3MzgzMDM2NTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.kawAO1VWQdKZW_z69IgBu3y7b5uyqCVUSnqF4I39LeY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bd72ff48-9993-4010-990a-ca8839d1fb0d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0e43fb8a-f07e-494f-b728-60a0759db622"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="cb1083a2-b418-4765-bc4a-8bb94cf4e26e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the userName for User
def ActualuserName = jsonObject.Resources[0].userName
def ExpecteduserName = context.testCase.getPropertyValue("userName")
assert ActualuserName == ExpecteduserName

//Verify the lastName for User
def ActuallastName = jsonObject.Resources[0].name.familyName
log.info ActuallastName
def ExpectedfamilyName = context.testCase.getPropertyValue("familyName")
assert ActuallastName == ExpectedfamilyName

//Verify the firstName for User
def ActualfirstName = jsonObject.Resources[0].name.givenName
def ExpectedgivenName = context.testCase.getPropertyValue("givenName")
assert ActualfirstName == ExpectedgivenName

//Verify the email for User
def Actualemail = jsonObject.Resources[0].emails[0].value
def Expectedemail = context.testCase.getPropertyValue("email")
assert Actualemail == Expectedemail

////Verify the phonenumber(mobile) for User
//def ActualphoneNumber = jsonObject.Resources.phoneNumbers[0].value[0]
////log.info ActualphoneNumber
//def ExpectedphoneNumber = context.testCase.getPropertyValue("mobile")
//assert ActualphoneNumber == ExpectedphoneNumber
//
////Verify the phonenumber(telephone) for User
//def ActualphoneNumbers = jsonObject.Resources.phoneNumbers[0].value[1]
//log.info ActualphoneNumbers
//def ExpectedphoneNumbers = context.testCase.getPropertyValue("telephone")
//assert ActualphoneNumbers == ExpectedphoneNumbers

//Verify the externalId for User
//def ActualexternalId = jsonObject.Resources[0].externalId
//def ExpectedexternalId = context.testCase.getPropertyValue("userExtId")
//assert ActualexternalId == ExpectedexternalId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

////Verify The Internal ID is not equal to null
//def ActualId = jsonObject.Resources.id[0]
//assert ActualId != null
//
//String input = jsonObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (name.givenName eq &quot;${#TestCase#givenName}&quot;) and (name.familyName eq &quot;${#TestCase#familyName}&quot;) and (active eq &quot;${#TestSuite#active}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c2791348-95eb-4dd6-9032-07f859538abf"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CEIo9re</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_zN0ZXVQh</con:value></con:property><con:property><con:name>email</con:name><con:value>EIo9reXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>2661333045</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>de508521-1dbd-429a-a684-5b59da02b3f7</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CEIo9re</con:value></con:property><con:property><con:name>Work</con:name><con:value>66918069089</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CEIo9re</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CEIo9re</con:value></con:property></con:properties></con:testCase><con:testCase id="bc4151eb-a9d1-4063-892e-f78d664e6251" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify that attributes will support all filters with logical operator (OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f591a107-7a23-4bc4-ab64-b17dc5b164b3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrWkdwcmlUZm1BU0tmQXlWT0ZIUk5OR042Z2Z3VmNIQUtwSmt4bU80QkhacmNXSzFpZzV1YUlyQVp1Y1M4Zmh5ZXhUSm5KZ1pvbUZSVGUwcHpWL25YZEhDZHJsUHVSa0doRHNJUjNrTXMxU09SVjRmVkdnbCtQZCtuV3ZJa3FOVFU3WjVZM1pZL25VUDh1Rlk3WUR4WlA3NUc4QmJ4alM0S1hpWitscUkydVR5UE04UXlReFBxN1BzUjlNS3lRaWYiLCJleHAiOjE3MzgzMDM2NjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.oyhw8_TFAJorXWqEEyLWDLv9XzyXIWku57jfQXNocmI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9256e502-fe28-49af-a1ff-16b05873ba01"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e240509f-747d-4c56-a4b8-0e176d6352be"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="629832d9-8fdb-4f9c-b667-b03ec2d9a5c2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>()
List<String> list1 = new ArrayList<String>()
List<String> list2 = new ArrayList<String>()
List<String> list3 = new ArrayList<String>()
List<String> list4 = new ArrayList<String>()
List<String> list5 = new ArrayList<String>()
List<String> list6 = new ArrayList<String>()
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) or (name.givenName eq &quot;${#TestCase#givenName}&quot;) or (name.familyName eq &quot;${#TestCase#familyName}&quot;)  or (active eq &quot;${#TestSuite#active}&quot;) or (phoneNumbers.value eq &quot;${#TestCase#mobile}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a2ea774b-076e-47e1-837b-0c157d688c87"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>username</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C67P3fz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_J1I8falA</con:value></con:property><con:property><con:name>email</con:name><con:value>67P3fzXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>2915898403</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>527a008c-3a93-4642-aea7-8d08db184b2a</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9C67P3fz</con:value></con:property><con:property><con:name>Work</con:name><con:value>82789868963</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C67P3fz</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C67P3fz</con:value></con:property></con:properties></con:testCase><con:testCase id="35ab04cb-7618-4a63-8ef7-d43c982c6ef6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To verify that logical operators (AND,OR) are case-insensitive" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ff9440ce-2e20-4ba2-aa16-ec811801c8fe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJIK3dIYVE1anVCZGF1czB5TmJsQmhCL1plZ1JXL1ZsajgvdFNoWXYxUmV6S0tqOFpTMHUzUXdsMWVRc1FWcXFtQXRTclF6VHYzUzc3TUxZQVZlNHpYL1IzRWkvbzBxR1NZbFRPNmpWcDk5SWhzUXdpdEg4RVR6WWw1YnFFM0ZSeTQ5dHQ1RkFMUlZpOHdvWSt4Y0xydzZuQWw0THBrWVd0b2ZZbXRPbW5yVWdUTEJuOFhuQ1pqUUlOQXVuRXBJUDYiLCJleHAiOjE3MzgzMDM2NjYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._NoUekJy8riA62oLD2dqyjGRb8m-BW7ZEag7jjV5sT8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a16f6b6d-77c5-4861-a957-15ad12e9d85e"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e5855bef-43a3-42af-b474-1a28e7a86abb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ae41d1e6-61d1-49cc-8c7f-41450501eb81"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>()
List<String> list1 = new ArrayList<String>()
List<String> list2 = new ArrayList<String>()
List<String> list3 = new ArrayList<String>()
List<String> list4 = new ArrayList<String>()
List<String> list5 = new ArrayList<String>()
List<String> list6 = new ArrayList<String>()
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) Or (name.givenName eq &quot;${#TestCase#givenName}&quot;) And (name.familyName eq &quot;${#TestCase#familyName}&quot;) or (active eq &quot;${#TestSuite#active}&quot;) AND (emails.value eq &quot;${#TestCase#email}&quot;) and (emails.primary eq &quot;${#TestSuite#primary}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b9362c0f-64ce-4284-952d-318cb76f9406"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_sBG8ezd9</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CqX7AoI</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>2322840927</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>qX7AoIXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>293b5d4d-7248-43e4-964c-992b40ccb11b</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CqX7AoI</con:value></con:property><con:property><con:name>Work</con:name><con:value>80888010886</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CqX7AoI</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CqX7AoI</con:value></con:property></con:properties></con:testCase><con:testCase id="159137b0-8a11-4f3e-ac05-56c95147c13f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To verify the response when no space is given after logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6a641dd7-2450-4bde-a392-910d55c9444c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJYOVdTWlBDc09BWHV5Vzc3OEJBc0c3YnpSdlVWY0VPWU5lcXBnVG82T09ReFBzVS91YWRRSWxQZU9aM3FxVjRKdjRodzhlMWlWT0V1bzErR2xTcU95dmdjWGhoRDBLT2ptQkFlcnByTjAyNThIbUZhQm1Ja0h2WFdwVXdyalc1UFN6RzE1Q1RTU09zSHZ1aXJZK3RXOFFQZTY2RnZRVVA2UkwwYkZSYzdNUUpJTHY0U3l4bWhVcXpUZS9Lc2NOd0kiLCJleHAiOjE3MzgzMDM2NjksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.eFpXeYlMpgA4LwCjkjgr3SBxxIFLCMgP_2ZdnZS16ww</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="e5f0c49f-5d20-475c-a1b3-272f22b072f2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) or(name.givenName eq &quot;${#TestCase#firstName}&quot;) and(name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;true&quot;) and(emails.value eq &quot;${#TestCase#email}&quot;) and (emails.primary eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="26529f04-1826-438e-b310-932894a0e251"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_44182</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="1cdfd821-17b1-4072-a3c4-bbcf45eeedec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To verify that &quot;userName&quot; and &quot;givenName&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c003a56a-ab94-41dc-ba00-985d079e75eb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI4ay9CT0o0ZHlhZDFHS0RRZ3JBZC9seGtZRTd6c1ZhWjBYeC93MGlXcjljVkF5MHpFakRyOE1LWEFOUnhqU0RETktyMEZZVkY4V25SZDVJVlFBT1hjOFowTTZ3S04yQjl5SFRKVnpQamlZT1NRRHZiQlFiOEdUb2trVm5XRER4WERiclZ6SS9NMHl3VlBEN0F3UzFJTlViRE1CSU5lT2VLUUJKNmFyZ2p2My9UaHJ0MXByZkM3TS95YWxtczZJaDMiLCJleHAiOjE3MzgzMDM2NzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.cuUA2JEEX1bAdNUepEMLeGyFgmIX8DmKPZBAoIw_3qc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="160d3226-4997-4fa8-82ae-4b8600ff10e0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f7cbb42d-6f98-45db-9256-9b0ed920f9e3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="7a40fb7b-83a0-4283-87c3-1fb17c3801c5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (name.givenName eq &quot;${#TestCase#givenName}&quot;) or (name.familyName eq &quot;${#TestCase#familyName}&quot;) or (active eq &quot;${#TestSuite#active}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="67afb044-90cc-4658-bcd1-f226f5061298"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_nSvaZ5g2</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C6HWx5E</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>1425180873</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>6HWx5EXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>22ae1c2e-0b0e-413e-a522-3a4527215ee7</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9C6HWx5E</con:value></con:property><con:property><con:name>Work</con:name><con:value>33252834930</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C6HWx5E</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C6HWx5E</con:value></con:property></con:properties></con:testCase><con:testCase id="79aeba8d-fac3-494c-aebb-ba0ddbbeb7d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To verify that &quot;userName&quot; and &quot;familyName&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="fdfac2f4-0168-4275-ac40-bad28e9da79b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJJYW1XL3MxYXFDaEYzZlVzbVN5UXlpU24rc3l5NjgvaDJ2OTFUazlUenlycHIvYVNUdlU2SE1TaUpWQUhmcE1oNG5QcDVZTFozQmxUVTA0ZCtzb3NoUzdYZDJOUHpQazFhejZ0Z205YTA1UThwNVA1WC9VekJ2ZTVrRDJuMTBsZHFLMXdtdlVZVVpMbmk1dUdNUEthNUxZSzV5ek00TVkyUmYxclFMVHdvdjdXbVd0TjFrajFoN0Y5WkZ6b1lKS1kiLCJleHAiOjE3MzgzMDM2NzcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.sV-pAGOWXognaLFtA_U-giBMhg8gBY4Hsck-7XozzWg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a03bbdc1-4f76-47be-af89-ad3e2fa5983d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5e055f08-5ba4-4d56-991d-ee4acc39b347"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="dd360ae1-6eb3-4534-a640-32fd22566d78"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (name.familyName eq &quot;${#TestCase#familyName}&quot;) "/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ba6deca0-f1c1-48fb-bb77-7ec43fde3430"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_AHoecDYz</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CkprAMN</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>7012905685</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>kprAMNXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8325b0a6-66e8-45ba-8f77-856fe81b9bfe</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CkprAMN</con:value></con:property><con:property><con:name>Work</con:name><con:value>53681284247</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CkprAMN</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CkprAMN</con:value></con:property></con:properties></con:testCase><con:testCase id="9a841a4f-6265-4bde-a314-35466bd3b12b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To verify that &quot;userName&quot; and &quot;active&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3f112c75-ca72-4a93-8b97-da1ca577cd12"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBcVl0SzhRSmk3VTJOa29qSURWa0tiNUh4UlQwMWlDUklKWlFuQVA3NEV4VXpPQVFLWjhDa0VyTFM4ZXBORWR1QkliR0l6WG9Ea0VOWitSeGU1TWJjY1JoM2FUUWVxalBwYnJ0VjdSRzFqNkJlWTl3U3Y2enhBZU1iRnFJVnErV05ucjdnb3d2cGFkVFVyWGRaVDBZZDlqRis0VnR3dG9RQ3dudHFuUXBuQ09NcGpuTDJaTHg3Z3ppUzhXSFJ2YVYiLCJleHAiOjE3MzgzMDM2ODEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.V11D8Bn0QWMBWiKegrM0P9OqOqBcqG9D5ZQM3GyF1Ic</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7d61bbd5-d3fb-49c6-8687-647664503692"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="ff04cb37-1d38-4c6d-9a06-a9c96f736743"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="4a0051e7-854f-4a9d-9305-a1d4e579ea52"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (active eq &quot;${#TestSuite#active}&quot;) or (name.familyName eq &quot;${#TestCase#familyName}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cd4af15f-3059-43b3-b10e-4ea17c4b652c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_yomK3s0z</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CWQZm3e</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>8635930173</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>WQZm3eXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3e5eaf43-9f79-431c-b18a-253eb86f7111</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CWQZm3e</con:value></con:property><con:property><con:name>Work</con:name><con:value>16577654951</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CWQZm3e</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CWQZm3e</con:value></con:property></con:properties></con:testCase><con:testCase id="2c3df8f5-c226-4007-845a-14d17646487d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To verify that &quot;userName&quot; and &quot;mobile&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b09091c8-051f-44ae-8dd0-baefd45bdf2e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJQbWRvdWdWQWFuY0JhWlNGdTBEeTBoY0pkV2NoQjdtOFZZTndxUHU2by9iRjR1blV1SmdvSDJjMjMxWS9oamFvNHFSR0FIUVlJK0JzSDNsMU9oTDBIRmJlY1dKV0IvUVBENkVuNk1SZ1RGUlQ4NjRoaDBuSUpYOUpTbGNUZWVWY0hWc2RoelJaSVNtZTh3NkpxT281cHpCaUNqckIyYi83Y0RPM0IzejMxdnB3MkN2YnB6N2FFY29NcyszQ3JqaE0iLCJleHAiOjE3MzgzMDM2ODUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.l8esDRHWulZ6QYJjiym8RAVMpydxxGywhn7jCZOEiAo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="894e1600-2293-496b-8d79-c9b7aec3d596"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="9745c5af-0d08-47f9-9b1f-c56a15b612d8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c447e1c7-e24c-48fc-997c-29a1cad8ed85"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (userName eq &quot;${#TestCase#userName}&quot;) and (phoneNumbers.type eq &quot;${#TestSuite#typeMobile}&quot;)  or (name.familyName eq &quot;${#TestCase#familyName}&quot;) or (name.givenName eq &quot;${#TestCase#givenName}&quot;) or (active eq &quot;${#TestSuite#active}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="21861a85-64c7-488d-8128-4b5c5719db60"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>username</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CeCQtwn</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>eCQtwnXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>1464895599</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_gLjMfLHG</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9d9de181-702e-4679-9a35-4edc74ca6a9c</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CeCQtwn</con:value></con:property><con:property><con:name>Work</con:name><con:value>13492370760</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CeCQtwn</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CeCQtwn</con:value></con:property></con:properties></con:testCase><con:testCase id="0749c76e-4142-46c8-a589-1171f697316a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11-To verify that &quot;userName&quot; and &quot;emails&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="81fa764b-2cfe-40b5-adf2-32c07391847a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJYaHhwbGRaY3h6NXFyQ2M5VlNTVElOVDhTSG5FVlQrRlRXM0xubXFnMmltRk5WcGYxOEEwMXJrbXl5Skl2Q1dUVjZiSEZrblpPSUhLMDU1Zno4bFgyc0NYRWtXMTVBMDFSUENVQ2grUERrSXdnR0JTZ0RYVGdHeC9ZTnd6ZkNkSHBMaStEZ2t1Nmpud25OUHhVSGFWNml0UVdKa01VY1J6djRKQ2FkNE9EWWM9IiwiZXhwIjoxNzM4MzAzNjg5LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.LbVxJmL5EN9JyZThpNkBGA0e8AiBAQ0DhVAMnQJ3cLw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2d1aace3-43bf-4297-84ae-18f59368689b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="fc49bc27-e757-4dbb-b4df-24cfe248260f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="be77d2ba-07ac-4fb8-85b5-04a43052742a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (userName eq &quot;${#TestCase#userName}&quot;) and (emails.value eq &quot;${#TestCase#email}&quot;)  or (name.familyName eq &quot;${#TestCase#familyName}&quot;) or (name.givenName eq &quot;${#TestCase#givenName}&quot;) or (active eq &quot;${#TestSuite#active}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="08f18de8-208c-47cf-b194-5f9958956a04"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>username</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9Cx7Y94j</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>x7Y94jXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9315193232</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_FnvSy6Na</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>08b0559a-1c73-4836-8ce0-12ac042b650c</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9Cx7Y94j</con:value></con:property><con:property><con:name>Work</con:name><con:value>35212916656</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9Cx7Y94j</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9Cx7Y94j</con:value></con:property></con:properties></con:testCase><con:testCase id="9995d20f-4715-44ba-b2a7-69123cc61f31" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12-To verify response when inverted comma &quot; is not given after first filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="960a5b12-24d5-491e-9716-1f0e9418d31c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI2dDVndTk1MTFtcGpURVZ6dWN5MlhKc0UvbnVzYVp5d0JpKzBlREpOREdxZGVrbVg0ZGFxMEk3NlNORE55YXQvbk5iZ2NXZWhiY2ZRRXNyWUNoSVo0MGtGUU9WbVQ4dDIvdC82RTROd2NiT0FWZzJheG9oNDdMU09melk2MWI5NmVNUWZ0cEZneC9JTkJzdTIyTjlJYjc0YmF0VDBDcUJFNmp5bFBROVRjTW8vb1RKNjEydy9nVXZQSndyVEZsMVciLCJleHAiOjE3MzgzMDM2OTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pfAjsRh17osVqwo5KaF-Fae3jb_ffkNbOtF8Ly3nvpw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="5bf425ab-c5ee-41cc-b543-2705d41ffd18"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="d43ce3da-7045-4ef7-a663-548d0fb47707"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (userName eq &quot;${#TestCase#userName}&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) and (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;${#TestSuite#active}&quot;) and (emails.value eq &quot;${#TestCase#email}&quot;) and (emails.primary eq &quot;${#TestSuite#primary}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="65074276-f0b2-499f-86ec-fc11afa577aa"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_FdtiwPRh</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_FdtiwPRh</con:value></con:property></con:properties></con:testCase><con:testCase id="33359010-1e5d-440a-9f26-3506da0f5dbd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13-To verify the response when invalid logic operators are given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="05b3fab1-2b89-4cb4-9e04-004ce2be2923"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhSWdTRU05U3g2ZUExc2UvN1l0S0dPUWhPY2QzcWExR2pEc0lPTExYS1VQSEMrWjRRTW5jWkpLR0ZTd3FDcVZJcmtrWFZDR2FabDNiL01CWmVPZGFDNHU2SlppQW5mVUZiVlpzYkxudFBPWkZkUkg0WTdvVkxDeHFQS3Vxcm80SjRWZHdBcTh4SDhVSnBuSjJ3bFhObW5zYXJ4VENiM3hXUnJzQnQ4SUpzR1ZTYWtTbE9LQWxYZ28ya25wdHZaMEkxZzRYWGR3UGQvNE9ZbE9PZUY4SFlBPT0iLCJleHAiOjE3MzgzMDM2OTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.IkbzsRcGRUvB3ANAPDmUZaDOkXtemr_n4xmlShMPS7E</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="2c31ea75-8f57-4a1c-b062-868feea3dd87"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTEREmail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null
//
//// Verify First/Last name not null
//def fName = jsonObject.Resources.name[0].givenName
//def lName = jsonObject.Resources.name[0].familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) tyj (name.givenName eq &quot;${#TestCase#firstName}&quot;) rty (name.familyName eq &quot;${#TestCase#lastName}&quot;)"/>
  <con:entry key="Authorization" value=" Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="19828b0b-7bed-4c02-90e0-31f9dfd96d11"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="445d5891-6acd-444a-b2bb-11c5e20609c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14- To verify response for attribute &quot;id&quot; with eq operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0d32b22c-6b35-4fc7-b5ed-dfb83a0a70fd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJIdEVmdWh4TlNYNjhVT3pQYW9qM3pIeFYvSjBWVTRsQURkOEhlZFlHZnI4b3VQMWFoT2pDUDdFZHF0S0NiM25QZm5pNFZoZmFGdS9YTkhoYVp5aXU4b3B0cEVkQWg3eTMvKy9Hb20xejczSWN6cUFTY1FGemlVTmtiZ2ttUlZlRStaZFE0aDcvcEhMMC9WM1hUWmJnYUNldFVFaXptd1NENHB6RVhxM2pYK3RheGM1WXhwQWlsYmc0SmluaWxiUmoiLCJleHAiOjE3MzgzMDM3MDAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.bgyls9xswfvFXSsNNV1VN_AuW7bvpxxlG9sBqsRZHS8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d95f3a83-1232-41a0-8dc7-6875f755b585"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e39272f4-f1e6-463b-aa5c-0d38dc5b3430"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="42a5c600-b94c-4be5-ac4a-4f8a07aee677"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#internalUserId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e0d8946e-65b1-490e-bc28-2828f81912a3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WKeQTD43</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CTSBnRG</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>4750544164</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>TSBnRGXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>id</con:name><con:value>267f8d2c-442a-40cd-b0e8-146f296df294</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6b2fcf6d-cb50-48f6-855b-1b0bbbb99066</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CTSBnRG</con:value></con:property><con:property><con:name>Work</con:name><con:value>19038065572</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CTSBnRG</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CTSBnRG</con:value></con:property></con:properties></con:testCase><con:testCase id="904e723d-7574-4a5e-b58c-670c8a4c2ceb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15- To verify response for attribute &quot;id&quot; with operators (ne)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0022c1bd-3e86-4b02-be79-752ebcce49a6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIydTh1dUM5MGNvOFI4Ykg0S1l6eDl3OFlkRHZoZGVZbEJWR1pnM1g1UnliTGdjMHg0OG5aZDhxODhlNnJPRWpjSjY4TUNNTE40VHREb2MxS2hXRmVCMC9FT1ozbnBobDBaM2FXMzVCT24xeXhmWlM2aDBUSmkwNmpIM0ZONjQ0OFVCWUtSckRQR2VrMDJhS1FJSzNVb05nYVZnazh4eFRGQm5FcGJhUG45Rk5CalZvY0U1RUQ3ek9Na3dFVEhrNmUiLCJleHAiOjE3MzgzMDM4MzQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.K29qi0VQ8qjh1wDTDwThgTP5DUEHoEVOMf3nDt6vq4k</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="82fefbe6-23ee-4a4a-91b4-1a93b23307e7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="35520ade-7e61-4c66-b54d-a1cb79672e55"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="6f6e190b-2064-471d-b2bc-f38f950bfa8b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTEREmail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a50ae6bc-ef91-4169-a3a6-77f99e89af4f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id ne &quot;${#TestCase#internalUserId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="2"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b6508213-c07a-4fb8-bf20-36acd6ec9f55"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>username</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CeUrVPt</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>eUrVPtXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>4123260344</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>id</con:name><con:value>7ffb795b-743b-4de7-957e-a783fe4528d2</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_EpGUeNdu</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>99b20477-042a-4ee4-893e-78bc375c9858</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CeUrVPt</con:value></con:property><con:property><con:name>Work</con:name><con:value>93326483209</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CeUrVPt</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CeUrVPt</con:value></con:property></con:properties></con:testCase><con:testCase id="e1e64822-9603-4d85-82d4-25277f65676c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16- To verify response for &quot;id&quot; &amp; &quot;userName&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7ca4d52f-0d09-4f00-883e-d31394ab9616"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWOC9pUGk0N2dYS3pOSExtT0RNVmZvUG1qVmRFRjNlOE41NDEwNEx3Z0tWbXlvdGR5a1lSUTYvWEFNejAweWsrMnJqdVorM3ZNUm5KWkxwY3VqWmNqeHBiTlFDM0xsa0tZTEQ5V09DQm1BcytSd0U5MHZ3RFYwRFVDQmxacVdRWDBsdVhUR1BtZFBJZTV1MWVrVVg0dGFUWVFGNk9OLzc2bzRmVVZSZWNFeGMwNjdjbWxnVU1MSVJWUGQ2RlRPWTNLZlozakxNMmVpaGV1Wm5JK2JwUU9nPT0iLCJleHAiOjE3MzgzMDM3MDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Mzfs7wKi1eWeHZJXz9O45uqaZHl7CPSXRsYWvE0_fnY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="00321f8a-0f26-4291-916d-5b911d4b609d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="39d66df5-9f23-4371-ac6c-8b0bb122eedb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="34c88e6e-3b26-4076-9466-360631eb7e46"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (id eq &quot;${#TestCase#internalUserId}&quot;) and (userName eq &quot;${#TestCase#userName}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8d5d9be8-e4b6-4977-98f2-489e55f09024"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZE7aGs8C</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CXmE6dQ</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>1461675203</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>XmE6dQXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>id</con:name><con:value>17aa35ae-ee53-4156-b60e-b0aaf29d59ab</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>00227cdc-ac86-4113-afcb-d2df091d7b90</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CXmE6dQ</con:value></con:property><con:property><con:name>Work</con:name><con:value>73235449044</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CXmE6dQ</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CXmE6dQ</con:value></con:property></con:properties></con:testCase><con:testCase id="8ebfc2fe-59d7-47b3-bb44-64adcbcd61ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17- To verify response for &quot;id&quot; &amp; &quot;givenName&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="86bf70ce-aeb2-4f08-96a8-32ad48a29c8f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJIMUdmeU12d2ltaWZkRHJJY1hjTFlGcW40QWxMSEovZ2grdm9JTjAwY2JzdWdISWVmY0thRUM2THJiNWNyc0JaY2o0VTdJZWkvVWJCNHhRek9DZ3F4WVJjeEU4VFE5SGNqUWJGOFIxT2ZRdElBNi8wbjZZWk1mcDd6WThPaGlxMWc1blpaK2FFdUYrSU83TlN2VjRwbnZGUnUxZ2NDdEhWdzBCL0xMQ091MlNzVlJDUHJpUXFpRWVQNlhQeDl5TmgiLCJleHAiOjE3MzgzMDM3MTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.19A-Y3RzN8C2tidcEO8gqT9rtxZzh7Y38Xu1wBpF5j0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1ef7b60c-302f-402e-8e37-17559ee4ff80"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="7ff8383e-3cff-4f04-a73b-967f51f24b1f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="fc86f7d8-26ea-4d6f-bd00-b8b1f424f542"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (id eq &quot;${#TestCase#internalUserId}&quot;) and (name.givenName eq &quot;${#TestCase#givenName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;) or (name.familyName eq &quot;${#TestCase#familyName}&quot;)  or (active eq &quot;${#TestSuite#active}&quot;) or (emails.value eq &quot;${#TestCase#email}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a97f2449-2f54-4f21-a4e9-3280a54117c8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wLkwUnWm</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CZ8MPbf</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>5120838917</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>Z8MPbfXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>id</con:name><con:value>8f496a0e-7cf7-4886-b773-eaf57efb7633</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>561b375e-ad5e-4f00-b4ae-a8dffe948c3e</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CZ8MPbf</con:value></con:property><con:property><con:name>Work</con:name><con:value>43256443527</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CZ8MPbf</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CZ8MPbf</con:value></con:property></con:properties></con:testCase><con:testCase id="555ebeff-cae9-47ed-bedc-7b86aa0ad148" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18- To verify response for &quot;id&quot; &amp; &quot;active&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a8ff6e19-fcad-4103-a4a5-cb9606e392df"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJHMk5ucFVlYk1CdzlySVpSUzAzRDlIdnF0ZmVuaTBvTXVMUHRpSFJOaFNWdnp1Z1BSUFVONmozVTRrdEpMUHd4N3JkM2l1TjR2Q2hrcjA1Mkk0NTZqdURuaW1UaFlkZCsyUFZKODU1aW1jb1dseE0vUllvQUtIVUNtNDhVYzFWS0hOY0xMRS8xd1NXeWlnN0NmZnRhcW5TalkzOWtYTTI2bUFVMzNlRlB0aFc4VnZiUlNGektESUhBUmlITEtMRnkiLCJleHAiOjE3MzgzMDM3MTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.mKvfd4Wf-xhgskI7enQ7XztX2QljdOinlVArbdkrZMM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b2d25b62-10b9-40d3-8d52-8abef3e27d1b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="8ed54b1e-c759-450f-9561-d801034a0e3f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="6bf74b06-64df-4790-b92f-fa2775ebb152"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (id eq &quot;${#TestCase#internalUserId}&quot;) and (active eq &quot;${#TestSuite#active}&quot;) "/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="04efbcae-ef92-42fa-831e-7156425014c5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_xABQZqNS</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CJxOCld</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>3487114697</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>JxOCldXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>id</con:name><con:value>edf43f70-81ea-44d3-9202-d8b3118efb1e</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7f28d100-edea-4026-936f-ed81792e1054</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CJxOCld</con:value></con:property><con:property><con:name>Work</con:name><con:value>54986263074</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CJxOCld</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CJxOCld</con:value></con:property></con:properties></con:testCase><con:testCase id="e1574c46-cafc-46c1-85c4-7904740d6768" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19- To verify response for &quot;id&quot; &amp; &quot;familyName&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a997788d-676f-46cb-8ce8-03ec8ed5aba0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0MmN1L2V1dXFHUFY4VFByMkZXUm1ZQ2c1eENMSUxoaTBPOGRYTXVvVFJ0Ym5vcFJFcXEvOStrTWtPc1hpMUhJK294S0xYNG5SMEw4RHNWU1R4T29rY1psbUM0M25IQlRsMTA4akE0ci9EbThKZXp5K293cWZSa1hGd1B4enlSNVZkWmFjK2pFM0MrVm51NkgvMm1hcmQxcjk1REZrK2FZUG9DdkRlQWdGOTBFdnFFcmg5cDkvVXVjVE1GOVZhZHYiLCJleHAiOjE3MzgzMDM3MTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.EMN2zM0f7PJ57by6PP33ZHc8QIHpZBPNFyGwSR4yGO8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="dd041272-06b9-4262-8cd8-49c5bc2a7736"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5a3e2bd1-9bf4-429e-b9be-8aa0ce9c6785"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="1f441a02-c0bb-4ea3-880a-a5fa043cea3b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (id eq &quot;${#TestCase#internalUserId}&quot;) and (name.familyName eq &quot;${#TestCase#familyName}&quot;) or (externalId eq &quot;${#TestCase#externalId}&quot;) or (active eq &quot;${#TestSuite#active}&quot;) or (name.givenName eq &quot;${#TestCase#givenName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a3546533-6c8d-4f69-a5b6-ed4e687d4f88"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7SH5GjU1</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9Cxn9NoG</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>3333952040</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>xn9NoGXVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>id</con:name><con:value>0d054c3f-82a7-4ac9-80da-3af6998cf6cb</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0828d5af-0ded-4c55-8554-f9104c295360</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9Cxn9NoG</con:value></con:property><con:property><con:name>Work</con:name><con:value>86138712529</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9Cxn9NoG</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9Cxn9NoG</con:value></con:property></con:properties></con:testCase><con:testCase id="ba95fa5f-3e6a-4558-b934-58c1fdf72000" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20- To verify response for &quot;id&quot; &amp; &quot;emails&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d6ca81f6-f977-446a-8dfa-8aa8de405699"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJPQUVDYStHamlLZ2todVdwUnJvU0hjRkh3R3cwYVVRTXNnVGRUTlJlWkVCNHd1bXZRRTVnc2I3cE45Wk83NXdydW9HSEpTVWcrbHNha3VPTFRuUmlQTUVEVzZYL2x0T0REWVhtK0Zaak1HRnd6eGxDekdhbml6MXJMSm1yYitpSWZJZVVQK20zUmpub0M3WjBCRWZwSGcwakxkZ1ZXTFVVLzNaTy93VXlsRFd1K1o3TmpLc3g2Mk05c3N4cExHOE4iLCJleHAiOjE3MzgzMDM3MjIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.SuUIeIdOMD22Bm-CymRREpaJiwIRn8kHPvm6CoPiZsY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="73fe0745-a444-48be-aa1b-d7167de6b206"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="3c755978-415c-49bd-a5d2-c545f54567d4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="5c5330c1-e84f-4064-bd25-9a05bfe3251f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (id eq &quot;${#TestCase#internalUserId}&quot;) and  (emails.value eq &quot;${#TestCase#email}&quot;)  or (phoneNumbers.value eq &quot;${#TestCase#Mobile}&quot;) or (name.familyName eq &quot;${#TestCase#familyName}&quot;) or (externalId eq &quot;${#TestCase#externalId}&quot;) or (active eq &quot;${#TestSuite#active}&quot;) or (name.givenName eq &quot;${#TestCase#givenName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3093dcd8-76fe-41bf-b7ab-9c522b1bffdb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_44182</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CKVQru1</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>1734830256</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>KVQru1XVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>id</con:name><con:value>4061</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9CKVQru1</con:value></con:property><con:property><con:name>Work</con:name><con:value>63088590906</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CKVQru1</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9CKVQru1</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1f160ec7-2f51-475d-a899-9cb5595841cb</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>extido9y2DaO4GyVAjYVTEvGgk4YKlb1UrNbnF3VB6iJBFWj4dMwApS8BsP9RBrkGi2JaS3OgxcqTN7PaQMCn8bevHX73s2IzYCtH6hJmpgXVGF9C</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C</con:value></con:property><con:property><con:name>Email</con:name><con:value>XVGF9C6hJmpgIzYCtH9RBrkGpS8BsPj4dMwA6iJBFW@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6iJBFWj4dMwApS8BsP9RBrkGIzYCtH6hJmpgXVGF9C</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8298535514</con:value></con:property><con:property><con:name>Work</con:name><con:value>16014317027</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property></con:properties><con:setupScript/></con:testSuite><con:testSuite id="95df0f6a-7690-408a-9b19-42753599ecb2" name="GetSCIMUser-Parameter Name"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="83c7c489-35b8-4fe7-9259-efabd55a0bc5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify the response when &quot;excludedAttributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fdcf7c99-96a4-4b3b-ba0a-e1f7620884fd"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GenerateToken")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

//def headers = new StringToStringMap()
//def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")
//
//headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME")

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="2264939f-e147-4062-94be-86cb334a0440"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJFMU0vZkZYeDhTRXF1UElRL0RtMmVEbTRxTmRlUTFHWW5ONHIvUXVUZUZRZGFNd1dhek9Qb1d3WnBrWjFlLzdPRXVzc1k4a3liN2IzOXBKU0dBRXBBdDE3NThmN24xTE5tSGdQMVl1czY4aWRXNGFJeUp1eWJFWG8xQmNuazhKTFFEamZCTlRmbU1PMEtYZjMxdFJ1c2pJSHFFSklFZTZ3WnpBZktMNTh6Wk81eEd6Y3NTc2RRalNoQThQZ0tIZVkiLCJleHAiOjE3MzgzMDMwMTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.UC_jnl7Lpo8Lx0EzBEMwFX7mkKOsO-pepOg_AI7dvzQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="02dc9b79-8ba3-436e-911b-95f02a19e11c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info JsonRequest

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cfce1932-7a91-45b3-ad34-92e99a2843f5" name="Not Contains" disabled="true"><con:configuration><token>userNamessssssssss</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestSuite#startIndex}"/>
  <con:entry key="count" value="${#TestSuite#count}"/>
  <con:entry key="excludedAttributes" value="${#TestSuite#UsernameAttribute} "/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f13a614e-a554-484c-bbd5-d9037e7ffe04"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="1e512d02-ee20-4442-95ee-44413015a33c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify the response when &quot;attributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="cb66968a-46cf-4476-b529-2469b80daa7e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtUFV6ZkxQdHlYcWl3aEpFb2piK1dFSHNlRG9vaExJS3ZDak5lTnM4ZXhKVDRaWVMxWnhuYytjcm4zY0V3QU1tRXZFN3VhaXF3NHAwNHRSQlpIMzNoSk5MUVBsV205Qml6dXB2Zm1wLzd6dUZKNWMzUzI1bzlhOGVad0RZTjhabjJJYXZEc0NRV3FkZEhMbXBtckl4YWdORGNld2hwNW93UFF2RjJ2ZWxubW1zbEhKRFNlM2lnYi9paWRRcDREYnciLCJleHAiOjE3MzgzMDMwMjMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.U-wJuXiURNObeJOS7ktv7606lWpGt73523IXGWhooKs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cdc57f65-ad60-481f-947a-18e16fedf66e" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GenerateToken")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="33b5e4cf-1e7b-4acd-ba7d-32dd085183d8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="073d1756-9b6a-496e-a4b8-383a0b617599" name="Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
  <con:entry key="attributes" value="${TestSuite#ExternalIdAttributes} "/>
  <con:entry key="excludedAttributes" value=""/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="00755f70-c638-4219-bdde-449a80776672"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="f663f054-c122-4d8e-811a-53993a059a3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To verify the response when &quot;attributes&quot; and &quot;excludedAttributes&quot; are given in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="83ae03d7-6e8c-493d-b890-261d081d44e2" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GenerateToken")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="60e39a86-967e-4ff5-8452-0d887a4e8430"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI5N0xjMmJGNU9KMWN3Y1RFMGlKMDFxbWt6QUwrREJZZGZXcVFiQkgzK3VTS1RZSUp4YWEwZGxXVHo0cGZRNnpFYXkvVHJ0b3o0RDBRN1BDMkdoakRLQjFwOGQ3bzdNWmhqR0dPUXdqOUw3b1BxTmhYcjlHbUo5UUxLakZjYXZUc2VNTTVrcnYxNWZKZko2dkVaV0hvSTBHK3JIeEdrZzZSMmEzVGlhTWNWcmVERU9xS1J5ZEwrUFlCZkxmNlBrcmYiLCJleHAiOjE3MzgzMDMwMjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.bYKsNObkPcGue9ME8uhte-aUJ9ppdZp2LKn8XsDvjCQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="991ecd89-571a-4964-8b7a-45461a0b3355"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion" disabled="true"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestSuite#startIndex}"/>
  <con:entry key="count" value="${#TestSuite#count}"/>
  <con:entry key="attributes" value="${#TestSuite#UsernameAttribute}"/>
  <con:entry key="excludedAttributes" value="${TestSuite#ExternalIdAttributes}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="525a1b63-82ef-43fe-beaa-8f06f597a3ef"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="56acd215-f06d-433b-b4b9-8b6d7bbbb73b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To verify the response when multiple attributes are given in filter for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6e35b8f9-66e1-4830-a273-b11dfc500c14" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="9b821819-2e7c-4d9e-99e6-b9472849f2e4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJQZnJGcVQ0QkxXMVhwYUpiaHFscXJUWVNyR3h2blcyQjhyV0EwSUZFWFNOa0cyR2VWdUROZGcwQVhlNG8yZ1NpYzZQNFBvYktOMm5ZVGJNWDNhTlhNbENjcFNVTHdvcG1SSkZyTEt2YjBBUjkzemhCc0p1d0NXN3lrS25Nbkh0UUlKQWRUWEVaTVJKMEJGU2xkbnFsWG5FcHc3eGVrbmVvOFJjUWtFY1RNcVhoTWxCLys3S25HamxiSE83c1Z4akUiLCJleHAiOjE3MzgzMDMwMzAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.8dt203Zw0O2KOpDVg6iUjNJOTKLwDvQkmrvHUS-Xjk4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="6ae831e7-73c1-4f7d-81d7-a40839a46d7a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="87169b2f-5f6c-4c17-bf45-7b9051e90f5c" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="aba1267d-5d7f-4b5e-995a-e868c52c5d26" name="Not Contains 1"><con:configuration><token>emails</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestSuite#startIndex}"/>
  <con:entry key="count" value="${#TestSuite#count}"/>
  <con:entry key="excludedAttributes" value="${#TestSuite#EmailandExternal}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="13ea4663-6afc-4e75-a5a3-ea19a0b693db"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="69fb8cb7-7341-448c-acb3-834f09acbb87" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To verify the response when multiple attributes are given in filter for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="980e123b-314e-4e05-8446-c922720de0fa" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="d049c354-5df6-4457-bcf3-20fe9d568a63"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRNU9uazN1TUsyMkV3S3dMQmQremk5R0pSak9OZTV3RGJBRlVScUFSU1RTNG1OaDBQVDE0SHFSbCtpaTJ3anJnSlUzWE14NXdGcjZFWmFkWThNWWluYisyV1BoV1FFNGpwb3psd3lPZldsOUhhZ3RTSGJwVGF1MGorby9MZzZXUlVTd0RwZ1NrS3FOSE15cDE1TVpFdkI3ZGFNYjQrcVFtTUVjVlZvTFVON1BCdloxdm5sREVMWDRidEpibzVMcUkiLCJleHAiOjE3MzgzMDMwMzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.50m-XJaXGN7kN5aYL4cveB6YVGYvPnVn2_eC5Zjfqfk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="425c0fbc-0956-44a6-b1c6-71d787d71655"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestSuite#startIndex}"/>
  <con:entry key="count" value="${#TestSuite#count}"/>
  <con:entry key="attributes" value="${#TestSuite#externalI,name}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d1b6043e-2449-4e34-8130-c3ad989f5d77"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="2ad7583b-2dc2-419d-b8a2-3a7f6101d23e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To verify the response when operators used in filters are case insensitive for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d91da2ec-d381-43eb-ba1a-fbd9b3646a82" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="bb4ebd9e-c88e-4b08-bd25-a4eedd3ecbde"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJNckJRa1g0alRqRFVLNktCQWQ2b2lMRFpGT2hRcXdYL3JTWk16Vnc2cUZCNHdBUjZJWi93NkFxZUlrREhpSlk1aFh2cVdVb2J6ejc1MzVia1lUWVI0UlNoSzJwaE1pbFJDeGpTVXcySW9TV0hJVXAyTGFDVXhTdjl1a1dqT2ljSWFUOXVHUlNpeEQ4Q2JjZFliTFB4RzYxRDU3Q3U0TTRqV2VLZ0I0UmRFWC9STktUSDBlKzVCZGx1Wms3SzBZengiLCJleHAiOjE3MzgzMDMwMzYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.GjFab03GR4ztTDx9mtKU5ZZe9eqMvBsaojjNd9EQZos</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="0c3d6da9-ca3b-4a42-9175-e3f4cee9793e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="0d70930e-fc98-4314-aa1e-e7337787b04e" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestSuite#startIndex}"/>
  <con:entry key="count" value="${#TestSuite#count}"/>
  <con:entry key="excludedAttributes" value="${TestSuite#ExternalIdAttributes}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a48a4383-1340-4b03-950f-cc2bbdf9bf4d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="0c621928-01ec-4f6d-b792-11b9a4db156f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To verify the response when operators used in filters are case insensitive for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e6beffe3-b9da-4208-8eaf-d63396400c3b" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="3c06ca23-a072-44b5-a15c-766ba19998ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJxVkpaVmlsOU9uR0lZbmY5b1dBa0ZiMVNWZzVyRGdtamFUU2d1c2FFVmdvNFV1SkhuTlFhWG1aNUtjYU5ma0E5ayt5dXRVRzk1N1B3USs1QkQ2dU0xMENoWlZHUlFQem9KeDFWVGJJVVNjWVFVMUNUa0xZRS9qYzlwZ0liRTJhNm1NMDQyUUZleGFoUExQU0FkY3VkSkZIMHFsMDd5cndwUks2MU9wQjZsQy9SVk4xN3VTZ0VEalkxdTdzWFZwTk4iLCJleHAiOjE3MzgzMDMwNDAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.REBs3jusH1u_bqv8EoTzHs303D-pj5LfO_Q7pT-s0v8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="0aa12914-46b7-42ec-b383-06f03c6a2f93"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="19744aae-f136-4f70-92dc-5cf285f741ce" name="Contains"><con:configuration><token>Active</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestSuite#startIndex}"/>
  <con:entry key="count" value="${#TestSuite#count}"/>
  <con:entry key="attributes" value="${#TestSuite#ActiveAttributes}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3fc3bfc0-287f-45d0-b0b0-e321f3d603b2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="f5bc9f3d-0634-40c3-b571-f0cf6cc47be1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08- To verify that Child attributes are supported for Attributes names in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c2230fa7-8162-4f49-960d-d82d0c8a2679" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="94c032bc-97d3-42b1-8e60-3443a4a79d0a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzQmxiTEF4dUIzbEcraStrT0pyRkRWK3lKNGlqeXdJVTBOUHVvd1RlcEQ0NUZNdjNucFovUnlBRHVmaVdhaDFkSE5NNHdlVi9Wa0lPbFBHVy94SlA4Rk1xMUY5K0V0Y1FHWGlOM0NmWDhSQW55K1JyTnhRK1diU0RJSkMydmw0cExOV3pCanNWYk9rUCtCQWE3RTRnS2tJSWRaWG0xaTZsSGRVanBCUW1oU3Evb2hNU2EzOVh0SkxYekxBS0N2eDAiLCJleHAiOjE3MzgzMDMwNDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.6LlFxiF38EX2K-GrY7uYWwgZRN1g9UkKzEf08DTmdt0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="15b8efba-4417-4aba-8ae4-a9e84046c02d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ac3c1049-29d8-482a-aa09-dfcded3e76d2" name="Contains"><con:configuration><token>givenName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="1"/>
  <con:entry key="attributes" value="${#TestSuite#GivenNameAttribute}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6f581812-750f-44bc-a78c-d2d687524bc8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="f250fb45-7292-4bb0-9354-a6ef02b04702" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09- To verify that Child attributes are supported for excludedAttributes names in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d4ebeffc-0445-42cc-b3b4-4448535ad90d" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="ba66a482-290d-48cf-922f-5565ca61a8dc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLSUhSZzZoUGFzRlJTOG14OVdkOEkvQ3JvNkkweSttL21FSW1CaDJ1MXdTcGloZFRJTTBwZElTb1RwZ01aTEVUVC9TanRBcDNrUlN1TkV6dWs5cWhEaUNlQXI1eTF4ZDl4ZlYwc2p1QlBBejhtTW1jY0JZWnJaaWFYdjFZSmsxK0xnSlkwak1TSWl4N2lydlhNZk5Vd3JYQkdxNG1JeWZrS2NsK2FaaGdtRms9IiwiZXhwIjoxNzM4MzAzMDQ3LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.HtCKbgewJb83d-G03LCCarBZS4uzmqn54kAxHO3umw4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="75ae9f66-5920-482a-8b3a-291d11d34c60"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="932a2e0b-245e-4582-8d79-5f1a5edc70a4" name="Not Contains"><con:configuration><token>familyName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="${#TestSuite#startIndex}"/>
  <con:entry key="count" value="${#TestSuite#count}"/>
  <con:entry key="excludedAttributes" value="${#TestSuite#FamilyNameAttribute}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d4a6f1a5-ca04-45c2-be99-e6b0d6efc98a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>UsernameAttribute</con:name><con:value>userName</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>1</con:value></con:property><con:property><con:name>count</con:name><con:value>1</con:value></con:property><con:property><con:name>ExternalIdAttributes</con:name><con:value>externalId</con:value></con:property><con:property><con:name>EmailandExternal</con:name><con:value>externalId,emails</con:value></con:property><con:property><con:name>externalId,name</con:name><con:value>externalId,name</con:value></con:property><con:property><con:name>ActiveAttributes</con:name><con:value>Active</con:value></con:property><con:property><con:name>GivenNameAttribute</con:name><con:value>name.givenName</con:value></con:property><con:property><con:name>FamilyNameAttribute</con:name><con:value>name.familyName</con:value></con:property></con:properties></con:testSuite><con:testSuite id="ece61439-e876-4ebf-8ce2-397e2fd76c97" name="DeleteSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5945b83a-5fa5-4a2a-afd7-fff04a6d6e9c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify that correct response is shown when User is deleted" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="729b5349-8493-4191-b176-c2217a1ce34b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLZW5pNzNOUXNmb054a0FBdGh4a253TlZZb0VhUmNqV2xMdmErYzJpK1hnbUJsbEVoT09teGovdEkrUHRLSE5lUm0rODJqd2Mxbk1tVVRuVWZHNnlzSzBZWmlhbUhOeXJPN3MzMlhYZUh6Y3A4THRGYjdaRXF5dXZiODdQaU1xd2dCbzRGNWRpYUp3c0Mwck84QW1vSFE2b1MyMWtsSWdGY01QYVAxRzdvYWhRNWtoeDdSazJGTzRYV0YrWm4yaVciLCJleHAiOjE3MzgzMDMwODUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.nhH0u1gOFo-tC3zxfNWZamxwvCtVufj2SckT2oH32VU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Driver Script" id="f8d3ea31-d1b7-4871-a834-ba8ae5f24c71"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f0b845b5-7553-4d55-92e8-310e2a92b4f1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="d016732e-8cb4-49df-87f2-cc2eb68c3bb6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="08bce3a6-4e83-46d5-bb0b-0c159aab879c" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d0a1a690-5613-4a8f-aa05-be22aebf0e76"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ca9a3f9e-938d-47b5-b0bc-e98315112127</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WM6dMPRJ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamerjcDge</con:value></con:property><con:property><con:name>email</con:name><con:value>rjcDge@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidrjcDge</con:value></con:property><con:property><con:name>Work</con:name><con:value>81022405922</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3871974488</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamerjcDge</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamerjcDge</con:value></con:property></con:properties></con:testCase><con:testCase id="de7b64af-0301-472f-8c42-390816f1da44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify response on deleting a deleted User" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="817bef0c-3b8f-4c31-aa44-1886e3251ef2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJFU21lamtUeFA4bWtzdklrc2NRYWRrYkp5ekt6TyszUmh2U09qMjJmaWJwRW4yaTB2Qzhoc3hoSjVHV1pPS3ZUb3BXbUpzd1hrTnZTdFZ4Rm1NYmdncUpNMlpjWkcrRCtmN1g0bGdvQnFjK0xZZDE3N1NhV0kyY1FNb3ZFZ3FKZmduYnlCbjUyNm8rM3RhT3JMZzNkVGpuWjFBaThxaGdnZENlSENneGJQeGU1RWxYdUx6YVBnclNYWkgyL0JsVW8iLCJleHAiOjE3MzgzMDMwOTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.hEdO3I7bc6DCAncjvk_Erg79gSIOFhG56w5Yzahmu6E</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Driver Script" id="2d7a0e26-a5e8-48e1-a2a3-bcad26064d4a"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0f951a87-d3de-49f8-90e5-c24a068ca904"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="96045ad7-3c40-4944-ba30-23aa4d766369"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_DeletedUSER" id="d3ad4c0c-5990-4715-8398-607ac7087543"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_DeletedUSER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="f882f171-851c-4619-84e5-98dd22f44e41" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="582fe5f4-ce81-4be0-9dbb-247647b5fdba"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalUserId</con:name><con:value>3fa71092-0014-4e1f-a6c9-bdc9cdaae3e8</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_hSGI8fou</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6d4gLH</con:value></con:property><con:property><con:name>email</con:name><con:value>6d4gLH@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid6d4gLH</con:value></con:property><con:property><con:name>Work</con:name><con:value>96938274295</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4203977695</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6d4gLH</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6d4gLH</con:value></con:property></con:properties></con:testCase><con:testCase id="b59bd95a-d8f9-40b2-b3c1-d71ca8589ce6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify that deleted user is not shown when we fetch User through GET endpoint" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d3899801-8d7a-484e-8397-8fd65264fdc2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsUWZIald3M2NEZ1FpbXgyYnd1ay9JMHhqQjlOaDNScjN2UnkwNWd2a3FGN0FTU000T0o3RTZWS2JUOFgyc0Z4aWcrRUlmOTVZWjB0QWlkenNFdVNuNGxRL1dJSnoySk5WR2plU3NhQ2dNQUNTUVRRN1IrUUh2SWJ1OXhvTUdHZG0vcDRRMkN6UG0xMVMxTkd1VGlSeWlWcXMwdE9NODFpYWlKemxUTUliWWs9IiwiZXhwIjoxNzM4MzAzMDk0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.6idTWOrFvnZCspgNUNAkuqBEEEPpqvE2AYeIWgV9Gdw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6fbc13b9-74b0-4906-8dd6-19f8f2d60828"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="772b51be-0c9e-4ca2-9e89-3b475d2b751d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="f50a0424-9209-4acb-957d-763d7fd1bbf6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a4af9edb-f365-454d-818f-6128bfc40c31"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="1a6b3292-f564-41f9-b59e-11aeda87da54" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4be2dbd7-e5c2-4c4a-9c80-74fb9783ecde"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalUserId</con:name><con:value>93a1ad8c-6795-449d-a35f-5b693a2500b4</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZlCAClFG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameR5SSha</con:value></con:property><con:property><con:name>email</con:name><con:value>R5SSha@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidR5SSha</con:value></con:property><con:property><con:name>Work</con:name><con:value>83850690501</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8296028410</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameR5SSha</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameR5SSha</con:value></con:property></con:properties></con:testCase><con:testCase id="7080ac73-ed59-4c2b-be71-d56eaad29aac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify that correct response when user try to delete the user with invalid user ID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e6e1bbf3-7510-4fca-b1c6-5ef2ad27b681"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJZNGdVWVRiQ0lHdFNRSGUzNUo4UnpTZnYzV2huQzYvRy9XalRIemRscklqRHBZZE1lVHNrS2piQVl4V1c0aVRXMmRqSVdrSEdaS3lJOXJySVFhTytRN3FLR245RzlFUGtxV3dOd2xFVWYxOFd0dmJRUGVEQWhEdlA3b2d2NWlzQ1hWeFJ6cmhFaVRGRXgrakZWUnFzV1NqVkRHTk1HSml1Q1FpRlI2TjVJL2Q1N2hRdG5Odm9MaDdUNVJYRktXZjYiLCJleHAiOjE3MzgzMDMwOTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Q8LfhLQUbzrtZutzkcWKIProtkpbd4OmEHuN17uAEfw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7b7ed46b-fe13-40e8-adf4-01ead7a01de6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="afa232fd-b349-42d6-acf2-895c36adae7a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="4b569d26-bec9-4927-8b9b-f21e5f43f155"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc92f091-e4bb-4d74-86be-4e22daa99101" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ee0df66a-b841-4f5a-9d27-9d3a3c736bc6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalUserId</con:name><con:value>9e699f36-7bc4-4115-b1c9-7216a268e6a0798989</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZlCAClFG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName3W5tZF</con:value></con:property><con:property><con:name>email</con:name><con:value>3W5tZF@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid3W5tZF</con:value></con:property><con:property><con:name>Work</con:name><con:value>89580318326</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9750185097</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname3W5tZF</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname3W5tZF</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property></con:properties></con:testSuite><con:testSuite id="3b92d874-27c6-4c34-8b18-843d1ae45204" name="CreateSCIMGroup TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="bbbb3740-a8b4-4c65-a70e-d20920b73a17" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01 - To Verify Create single SCIM Group" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c5561774-6985-4929-9d46-176bdb1a2f3a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI3bEhIdWkwWmxPbFk4Sk82R2FJU3NlaHdjWERZZCtBREVkWWtEZG02NWNUMHhIR01YUkt6TlNVREtmYXluUld6N0FERU1vZ2c1Vk83MnR4Vm8ra240ZHQyVWxHL05ObUJnWXlpV2I4SW1pcVdrOGVpR05DSnROSkkzMG9LTXh2Nmp4WkFSUzNxYWpnc2w4Tll3RFJkR0h3Nm5wbmQrVURyVXJIeXZFbmVsamFLblpUSU5Qak9GeUNQMVlUMVMwbjciLCJleHAiOjE3MzgzMDMxMDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.EjHa-cI11h-e9ClJg3o56msP1a6h6265s4fFjydHKhk</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0d0d7c8a-7498-4610-a44f-1d96e557d921"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="185adaca-f745-42fe-9cf4-c98452b40696"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d8733a0b-deba-4b02-8a6e-5ad034bfe4ac"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_NY9lO</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_NY9lO</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>4d9e6e03-a6f8-457d-9ac5-5b5e8ffdf120</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="be815545-d89c-4b43-ba55-eafc312404f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To Verify, Group is not created with duplicate display name" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2ddf1dbe-69c1-423c-81bf-e861b143c193"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ1elY2UHpsOUxPV3UvWUZRU09NSExmTjVSZ0NIVG1Id0M4YnVZTnJiUk1WRjl4Z2V3ZkJJSjZDV1U3ZVpRcUpmTWlDR05jaHJ2ZEZrK0pPcDQ4d01NTksvZEVCRUJVRW9lekcxdUkrT3c4cXVpWkpWVTNvSkIzTnBGcXNNYXQ5Q2lXdllMcEZNYXNXc0dIcDIzT1dXajZKTkJmQnNPOW4zRzljalY3UFMrVEVwOFFTeHdvdVNQNmIxVm15S1VSL0ciLCJleHAiOjE3MzgzMDMxMTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.6TE-c9zCj68L7JqVXhph3ZS4CK6fzg6jhkLq_2RqEzQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="5abc1d52-7c5f-4ab5-b18e-1f55b9e61989"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
def randomGen1 =RandomStringUtils.randomAlphanumeric(6)
tC.setPropertyValue("UpdatedgroupName", "scimGroup_"+randomGen1)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="99382af3-c76d-4e55-a49f-6c019d105b0d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//log.info jsonObject.id.replace("G","").toString()
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_DUPLICATE_GROUP" id="9397b489-55ed-4ff8-b555-909870c8d16b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_DUPLICATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="51f928b3-867f-44b8-a478-ae7c82b87259" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("ConflictErrorType")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupExists")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("Conflict")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="033eadd3-f98a-42c4-838d-7fea59761212"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_7xRgr</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_7xRgr</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>7057144f-20f5-42b3-86c1-e147145eefa2</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>scimGroup_fe9Pt2</con:value></con:property></con:properties></con:testCase><con:testCase id="dc975a04-fd6f-4b8f-97fd-bae89ac02a96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03 - To Verify ErrorMessage/Status Code, when 'displayName' value is blank in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="5e1df054-5a04-4ff6-a704-5a2472797739"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI5SyswZ1krVzI4R3Jsd0wyTmtuODRiS1FzTkhmYjRMZklWMVpvdnUvbjNFa3BHNC9pZjUyZmlRbFBPanovTVRMYTA5VXY4cEZwRTk3ZmRyYjFFRkpnajcvTGFtU3B2VlF4clZCSnNnQkkvaHVaODhmRFBwRzB2TTYrRGp6YmU2NktuUU9kRElCQlpRWEovZUZDNWl1N0JrKzJQYXljVUdBRnF0ajM3YStId3g1UHhLOVRyY0gxbXRxYjZrck1WM08iLCJleHAiOjE3MzgzMDMxMTYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.M5TK-tdM5pV_T5XuVziNcayZbWqWjRti7bR4TrG3FYs</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a622fb66-cfd1-4054-830a-87a01c993ed4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="9076eb11-662d-4a2c-bb5c-9fb70c5f2193"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupNameMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f79a60dd-8d22-4a2d-879a-a2974d9868da"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_Hsjx1</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_3Nvhr</con:value></con:property></con:properties></con:testCase><con:testCase id="39dbc6ec-8e6c-4244-96dd-a5c4f1667727" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04 - To Verify ErrorMessage/Status Code, when 'displayName' &amp; 'externalId' both attribtes are missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6c740b4b-c1fa-40b9-b017-3e247a6c4d11"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJjeVlFcTE0UEh0WmdLRWMvTUxHYUIzdW1OanhjbDh1YkNMYWdjNG1aMnBQWHFkaWR2VkJUdTVIdXlrclQ3dmhYYlR1azBZajRWZUpDaHBLOEVKNHJJazBOeXdHbHF2K0ZYN1NSZTYrV21NQnVNY2xSMXNHRytJanlua0NmMVJSd1ZPU1htUEtmMnpWYWl2c2ZvVzIyZEdLdXlXbmJDU3FPbjdLcmVhYzVrVjFPeTNnb2JjajcvS1ZaZW1ZdUdSZTciLCJleHAiOjE3MzgzMDMxMTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Nvi5oWGhvphQizySC3wfnTG_XfNpAuGZ1lFbAKyMucQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="33e4cb09-aa36-43f8-9042-17478a835f41"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="1dd09bee-0b53-4d9f-942e-41ff1aae8d73"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupNameMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2f8899a0-11ae-4437-b248-4ca0d0f9b5e0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_u6RHy</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_u6RHy</con:value></con:property></con:properties></con:testCase><con:testCase id="c7268783-48b1-4afe-905c-3dc949cc8cce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 - To Verify, members list with multiple userID's" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="dffd3301-7839-4563-8830-7fb05b1b2c05"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhWWg1dU9JcDd2SlJpYVNqSVJtRkhjbk9nYm9oQlg5ZG82MXJmTDBJdHRGc2J0RzgzS2t3NUtjSVgrREw0anZqU3RBZVhXM1IvdU8yK2xMNTFKNjBCdldCMU1HMHUyalo3NW8vVVl4Ykx3SG5WNzhYcGpTRnN1QWtGeEU0L0dRdGxORlVOUWFNbGpsOGNjUndwaTg4dHMvUWJaUm10UG10YTU0MG1mclJ3V2N6Y2NYTnl2Y2RaS3ZOZU91TnFhbDUiLCJleHAiOjE3MzgzMDMxMjEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.mn_ynwM65doMVZUC2Gwsu0gwkh1s8GJkqvFYI21Y7UI</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e54d1a65-3ae6-4fb8-a663-5ef390510e05"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="f28e6a65-8ee2-4b4c-a364-c64a8a2374ec"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    },
    {
        "value":"${#TestCase#internalUserId1}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="86fbb2a3-09a7-43a4-af3e-440c3c490ed9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4057</con:value></con:property><con:property><con:name>internalUserId1</con:name><con:value>4059</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_M6IKx</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_M6IKx</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>883f803e-1564-47c3-9083-68a554208b7d</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="0326d82a-d65b-4866-bb0e-c97dd8d8ebb2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06 - To Verify ErrorMessage/Status Code, when 'Group Schema name' is Invalid in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3e86d15e-9d34-4c91-b49b-1f08282a7b70"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJZRCtKTUF0RU52Z2J1MmFIejJXaUl4bk9JS1ZRUXBGMlRLc2FnTFNQdWVmV0pLcnFaaDJxR0ZtUUhJam9VVFA2OGVHaWJ5a0xzMUlzTDRsWEw4SlIveWNjQzdwOEFteXNYS1AvQ1J2L01wOVl5SElrcHB4VWRNb29JdDZqdmFwUTEzWklTclVadG1tMjJmRXRkVldvSkNKNXc4ZnkrSCtqUHRZdEN5RTJKRWs9IiwiZXhwIjoxNzM4MzAzMTI0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.5M_HAUWf0elXVlSFL5UyAOFx31nBrzcgDx0R1Cw_Sf4</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="58c8e136-6905-43af-80a7-af65e0c22171"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="e8443445-599b-4868-a48c-711311b2a73b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Groups11"
        ],
    "externalId": "{#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidSchemaList")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b7ca6d7b-a7ac-4062-a081-5ae1089191d7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_NwMlf</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_NwMlf</con:value></con:property></con:properties></con:testCase><con:testCase id="6020844a-d28c-496d-9b50-9405c1129766" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07 - To Verify ErrorMessage/Status Code, when 'Invalid Schema List' is given in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="99744ee0-6cb0-463e-99a4-4b4c02cc657a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJzbjM3dzh4SWNVcWY4NEIwd05WbGw5QlM1L0gvRWFWcFBRbWdZclRhK01leFFmeTBzU1Vxb1d5RXdmWm5iRXNNQjYrZUt4M1U4TGY4TTFqY0N5U2hidmdFeFJTc1RKSXcyWGhKZWdyMS9jSHFSek54RVhqWkJGRGEvaCtmL3ErWE9FWG9vRlMzV2RZMkJ5Y211ZWdlOXRzZWtmK01VWFBIajlscldDQldjbndkSHdOSEUzR08wLzc0TFRzNEdVeUd3eUJIdm9VSkY4VzBKTk4weklqNE1RPT0iLCJleHAiOjE3MzgzMDMxMjgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.I99oVqYnqljNc7PivgVIrw8Pih9QWsKwufGaG_EVGjY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="412760cf-74bc-4268-a89c-e1a6e09de774"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="47885fa5-edac-4d92-ade3-8a3d10bd4365"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemass test": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "{#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("SchemaListMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f3762cec-2c7d-4c10-a038-f2d3d3f05174"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_77NGa</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_77NGa</con:value></con:property></con:properties></con:testCase><con:testCase id="be5f5535-be67-4137-bc76-f8b83c1b7f03" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08 - To Verify Create single SCIM Group with members list (active/inactive userId)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0f4436a9-0a94-4dca-a711-71ddae47a464"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJuUE14T1NRQWdMNWFjZnd1SGovZWczbmNnVFFFaGNzZjlVSXIzbFJJR1kxY0N6SkRwb1JlN1J4T1NHaVR2bEVFSXFkT2Jsc1diQ0RmV0VPY2d5RTRkUUR3YkZWRy9uaEpzYVEvVE03ejREZXRrN2tpUnU1ZzBuS1pMdE1GQnB2cFM1R1A2WDRkS3dzMzEybEEzSThNQ0lxMUJSazdneTBUbFBveklmbmF3dS9xbmpQZFhxVWNFejgvMmJIRlVKemgiLCJleHAiOjE3MzgzMDMxMzIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pYPw18uS45Huv5gsjXsNb-OW-DQkMB5Hdgga3QHwq1Y</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f5b1b1dd-b5e4-4d34-896d-691873f53a6e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="6254de21-fabf-4191-99ab-663329d33a88"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"  
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="49728fa8-ca83-409f-988a-06a77ac1de5d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>cbac8959-146a-4937-89da-a0822a1c2224</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_wyERP</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_wyERP</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>e230cdaf-aeb9-4d2c-a62f-5a917085800c</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="fbf60801-5a26-4696-800c-c64c84a869c3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09 - To Verify, members list with invalid userID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d0d54614-f330-42dc-997c-ef294ad5ed15"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhaTc5bk1nVGpiU0E0YVJ6SFVtd0lIL2lZTW1qRHdpUFlQUjB0RW5ZK3JuZnhrdWp6UzVvQUhMVTdQOEp5UWQ2STZxSG8rSUJ0UlpJdFFST3RIUFB4QjgwNVFQR0I1WTRpMTZObDFkd0pYdFZEL1Z5K3ZSYVEwaEJWRnhSZEhLOVI4NlZJWFFLZmEvNmhqRnFvRk81NklRbzVteWpKY0U1VjlKZUhNV3FjV289IiwiZXhwIjoxNzM4MzAzMTM1LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.BJ4iS1BHkdy8DCYPXxssOCY6cwa9XE80dQ7C8jjnso4</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="953446ca-04cd-46de-9c17-e1803010094b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="fc618a06-1b36-496d-9ea2-cccdd68971da"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="178c811d-c445-4f16-b518-b9f0dfc333e6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>99999</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_nuKxS</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_nuKxS</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>1fb1e588-4418-4b26-ab33-4eca70021ca0</con:value></con:property></con:properties></con:testCase><con:testCase id="e07ea08f-2b6e-4d30-ae92-cbe58e5536d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10 - To Verify, members list with blank userID and reference URI" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="efa6194b-b102-473a-b076-7e97d0bdc748"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJPZUtlK0ZhK2h5b2MzMTlVU01SQjd1bVVrM3k1TnQ5UXBXbXNLdy9YMXhCNmVMMXE5WVU2OWJaa0kzTGVVd0pKdTl0ZDE2SXZhNzJtZmU5T0o3TlVkMEVrRjhUVmtSWk12L2w2dzJ2U2VxS0d3ckVEeTE0cVhiZlphT1VYMEtiRHQxZFM2ZEY1YVdzUnpHMGwrM0xJbEFvMWFCcUFhS3hnYlFGaE0zejc2ZmFRcnlUVnA1a21LQmU1VERXcFVTMHgiLCJleHAiOjE3MzgzMDMxMzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.XtzQ_lEExwbPA3o5CzHFwcru2ZTnK_T7eZihdD9SgyE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="30df246c-1a4e-4f40-8a51-47fe57589275"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="88ee834e-650f-46ec-9d10-d2615ab35346"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidValue")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="203bc21b-7933-4eeb-8c1c-d65e1926a3d6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_zcZjf</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_zcZjf</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>163</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="223aeb02-c33b-44e1-a72c-1a7325806d88" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11 - To Verify, members list with permanent deleted userID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1736b27e-e75a-4241-8b60-882e9249742c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI2QWdBYW0vNVk5M2ppazE5S01hK1Zsei9pSDZOK0pYQ0I1amNkUUhQdzhkNm90OGtISGhyblUyY3FRSUkrL09vRVJYcDdMZ2hoQ1lvWXU2WlJOWjNUamhYNXgxbjZHSUgrTUJOb3A2R0Z1QklOc0JMUEVQY3QwaS9objZvTG9CTTVIVDNKeEIzeXowMmFNbnRya3QyeCtpb0d6TE91OE1udlJXVWdXdmYzY0E9IiwiZXhwIjoxNzM4MzAzMTQwLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.9SQ5cB8fB-pIoFQQYzaXgujV7GYhpsblpIcKx4ywwUo</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="43796d2e-d392-494e-aca3-b6f10ce537d1"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="c93ea435-6ba2-4990-9082-00997b2a58a6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e6fe4ada-4507-4605-adbd-c00b7ca9edef"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>02579465-1f2a-4615-885c-f8a0fee57fd4</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_FedOq</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_FedOq</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>23c79a7f-dd97-4be3-a8a5-1dd0e09204c0</con:value></con:property></con:properties></con:testCase><con:testCase id="35f1b232-0985-422d-b82c-ad2bcde61825" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12 - To Verify ErrorMessage/Status Code, when 'externalId' value is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b2bd9467-ff0a-436d-a01d-6f5c548e3b98"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhdHNLQXA5aDF3cU9iRzBqUkk0R1NleG9ZbTNIOFpYM0NLdGdvdEd5SE1LeGxzYkZBVmh6NkhuandHMHgrSWpkcWZKS2JtM2c1RHYwNkJjcDVQMkZoclI2WXM2bnc0Q2FOWU4yNFFVYnhFZGt6S3p3VFJIdjYwQ0RXREdPNE1NdTdxaytOQ0JlK3JTc3Z2OW5aYzcweHZNOW5oWW5wRjFpSU9HOXhIMUtqdjk5dmFqVjdvYUF6bWFLM1FsU0V2RHUiLCJleHAiOjE3MzgzMDMxNDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.n8ppQQd1NfZOtOuiQPg0zaMciQTBbrNAXn_reD7oZs4</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8cc5e31f-d7f0-482e-a76a-823d99e25d08"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="0f1880f7-57cb-423a-8fc5-fdff663acebf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("ExternalIdMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="419655fb-fec8-40c4-9990-729ff15af972"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_25749</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_haebr</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_8uaaS</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_8uaaS</con:value></con:property></con:properties></con:testCase><con:testCase id="eb478f90-5e9b-483f-a84f-1c507c2706e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13 - To Verify, blank members list in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2fbdbcf8-8730-4ca7-a67c-884c02849ca0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIyYnUvcWc1ZW1kcnA5RnJZM3Nud1VOL3FuVW1uNHJGNndQNjE4Y3ArZS9xcU1pUGxSSlk2MVNDNFNyZ29KY2ZjeVE5MVVwUk9VWStNbmVGVnkrNG1tRDF5YWg3Mm9sNmVPWTRJRHY2YkFPUVp4U0dadDN5d3M4Wit0TWpRSEtMSVk1YWZzc05sMDI3TWYwRUhha2UvMDIyaXJURXlMR3J6ajNEQlRhczFHNE90aVM5bkRBTnF6bVRZWWNWei9JREwiLCJleHAiOjE3MzgzMDMxNDcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Q4Y0rVGNDF9B4Mrd2wxZF-nLzPFWCZU7Ntccy2uuw5w</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d8a15eb5-66af-4b1b-ba6a-55bedcc41e80"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="44fb38e8-b75c-462b-a26e-4c3b099c590a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="bd3ffd48-8584-4751-b4d0-2917308f27c7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4059</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_8IFfg</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_8IFfg</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>6ff044b1-6770-4399-9f76-056a657a25b9</con:value></con:property></con:properties></con:testCase><con:testCase id="63b87195-1ac5-483f-a929-90916b93a4c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14 - To Verify, members list is 'null 'in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e903c242-039a-4a45-a5b0-b00df2597fa9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWWUg1ZjNvc2F6a2Y0L3FpMXdPYVJXb1dHem5xSVhQd3RGVzlpMzNRWTRuOTBEYkQzRSsyc0JubTliZ1k3SFdibUl5bjU2ci9iT1dLdjBTRHcvbU0zajdKMW4veTJRUEUyYzF4b1RRV3BiTExTOFg4M3Z1UldGMmhsMFFmOHVrbVNieXN5RTVkakx4eGEzakpFeFV5NVkyaTBadG9rYjFjajlEdjdObzYzSzZPZWhTRE1FK0JLT0N5Y0pWWTZHVFMiLCJleHAiOjE3MzgzMDMxNTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.GQ6y4hcHhdJxNbpExM8raND5tleOfSBuyEIBrY3Gjfk</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bbd32316-b4a3-4715-8b96-d6a8b90c0636"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="d808f250-ddce-4072-8d4e-c13cfe975f32"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":null  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cd4f0fcf-5714-4300-952b-761a899f0025"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4053</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_39qho</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_39qho</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>c0a58be5-2f8c-4d74-b532-38ffab8dd8da</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="88fc3fea-a78d-45c4-b134-20685e225cc4" name="UpdateSCIMGroupByPUT TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d37bb135-0de0-4535-866e-9b0a2108bc64" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01 - To Verify Update single SCIM Group by name with same externalId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="72ea916d-d39e-4727-8668-c332e1f0a551"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJYbk1jMUFnN29QZkNtN2lidmRwRGFBSFJPTEozMkxZT1MyOHpWaFpocHJWS2NUNDRGR21aVlZ0ak5ZM1ZnVFpkMHhRYTBXQSt4TEZSbUxjb2FHOE44elhKOHZNVDMwdXhzT3lFSWloYnFOQ0cwVFExQjY5UjRBaDZIYm5SdlFaQU5NSUZnYUF2M0dwKzBHODJ6MWR2L1VUUlhrVnVLcDdZdCtKMStic2JZTkM3b0N1M3l3b2RCOUh5MGJ3U0kwak8iLCJleHAiOjE3MzgzMjI1ODcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.FVt-7yFRUhNjUlR0kL-RbNfLnQLMLl8QvvsMpYI07_4</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bb9470ae-3700-443b-9a15-607200dc1e5d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("UpdatedgroupName", "UpdatedGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="08ae3dfd-8bfa-443b-a2d1-e9d3a154efa9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="427746dd-b331-44b5-86bc-9dd709efd230"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#UpdatedgroupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4b4e0303-cf49-4173-a46e-cc9a3e41f4dd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="34dc76c3-f5f2-4acf-a73f-0b547250b5e8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Es471</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Es471</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>c9b42c83-9088-429d-aa59-0ce34355f578</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4052</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>UpdatedGroup_Es471</con:value></con:property></con:properties></con:testCase><con:testCase id="af5291eb-32bf-436d-8529-252d37fe78a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To Verify, update same group with different externalID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="093f677f-5430-47fa-8dc5-71ddb373b792"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzQkV6ejVBb3lpMWtGeHhvem02RzFXUkRJYytaWW1yaHJnSUNKU1NJZTVKbTlNV1Z1Tnh2TEFnRE1LbyswallBYUMzZ0o3c3ZtelNHQkhhNm82dThOTzB0LzFVN1YzTElkTzlpdVpXWnArMGpURWxRWVd5Nm9TTHFjM0xGUkRuM0dMOTFFSHlCekdGTjZwaTZyUzNzZGNEVjdHMElnR3V4M2w4Z3BsR3h2UkRxdVVTKyt3c0NzeFFrSWt0QzBXbEciLCJleHAiOjE3MzgzMjI2MTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zLp6YAwzrRlz5vsRrbplY9nZt1Exgt-dpIvmVfnWUQM</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c14dda3e-5078-455b-9daa-0b1a1f993192"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)

// Update group externalId
tC.setPropertyValue("UpdatedgroupExtId", "updatedextId_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="e1baa5e8-8a16-4777-85da-47a61dd2b3b5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="6d70440e-6997-4a19-8afc-16f2cb686323"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#UpdatedgroupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[
    {
      "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="48342050-2847-4d19-8053-b140cf532e1e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("ConflictErrorType")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("ExternalIdReadOnlyError")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d92ffbbf-78ec-4917-8d7a-0b9eb62799c4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_Maw7i</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Maw7i</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>9dc08f07-f5db-42ea-82bf-4ca9605c039d</con:value></con:property><con:property><con:name>UpdatedgroupExtId</con:name><con:value>updatedextId_Maw7i</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3234565</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="b52f86c2-d989-4fd1-bd36-32ae4ff2add7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03 - To Verify ErrorMessage/Status Code, when 'displayName' attribute is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="06863558-aefc-49a8-a97d-4b35413b1f9a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzSjl3ZE4vTW1sZ3F1cWEvdVlKeno1RytXYlV0SU15VmxJRTIvdE00d1R1SWdxdnJld2xyRkpZSTRHaFVUenVxdnkvcmRQUUFaU0hiN1B0WDRLbVZMcVFoOWUxUE5MT0RqbHExb2VaK0IvZjgzWkx6TkZabnA2Vk5HTDFqSkFnVVo0YUQvdjdDbTV2bGZ2MEZteGh4eUMvMEVTVjBQRjZ6Nk12RGJ6VW5RWmVaQmEvaXhVS0pCTmdIUHIyNDBKZGciLCJleHAiOjE3MzgzMjI2MTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.t65l60_liZhHfFyo9jVXSFJwGN8Jfm4oSLGJuGtD4jw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4d7fb7ed-9735-4acc-b148-072bb317ccd5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="144cb24b-599f-4c20-8068-2c0c8962a548"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="4582dadf-b594-4153-b50c-71d6eaeb6ce2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d1d68ca7-5381-4254-8720-0a0e4648ae62" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupNameMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="47422636-3d08-4c41-9261-9cb87126f282"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_N6RX7</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_N6RX7</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>3c3983f9-e840-4113-80a6-c0d4b244a331</con:value></con:property></con:properties></con:testCase><con:testCase id="596da8a5-0fd7-4e89-8d0f-deb9cbc002fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04 - To Verify ErrorMessage/Status Code, when 'externalId' attribte is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a310ca70-3714-432d-b6c4-e535432953e1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWYVl4SzI4cVdWcnNRQVBxQ3JwZnk4ZEZJV1VMd1ovYWRYdUZ4N2p1VHJwbTJncnFHc0VRTmdCeW5kQ1FpQ2RVWENWQUpDR3RhSGxMdWVBYjQ4TGdwNnZKKzVnSFk4R3dhc0Jadk0zcFowMkFlalhFdmZZN0NwdVkvb2JTNTFDbWcxLzBvckx0TDZYczRrNmtVSW0wamMra00ydGd1ZHFORENuSkRjclQ0Q1ppbkx4d0xyNFM0dFA0eng5NTJKd3IiLCJleHAiOjE3MzgzMjI2MjEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.u81kGy9_UG7mYRaz8DQ12tDwIOWlvpHbBR3-Wej_dyI</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="31994759-9c01-4e51-8b7f-72d77c43c387"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="6720dd1d-c783-436f-896b-f5d86083e9b5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="0600c791-c16a-4a38-be26-798adc321624"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d1d68ca7-5381-4254-8720-0a0e4648ae62" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
//def ActualErrorType = jsonObject.scimType
//def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
//def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("mutability")
//assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
//def ActualMessage = jsonObject.detail
//def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
//def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupExternalIdMissing")
//assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0b058467-de93-4934-89f6-f067ef2ce20d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_pXmvy</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>d94da546-e574-4192-864c-fbd5ca77371a</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_pXmvy</con:value></con:property></con:properties></con:testCase><con:testCase id="3374e779-e05b-4027-ba3e-794cd52db241" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 - To Verify, Update Group with blank members list in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="35d0a6ec-799d-4e02-b858-7ca12b31817b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJyMGRtMWRtRXJCQmVRRXVoa2ZzUGJNdWFwWFlDUGMyTXBRMisremhPNlMwcGwrQXVCTmlTL0F2S0xGc0NtZlB1UGpUWGV2QTk5KzFCYWcyTGM3aVNGS25zUlh2aE53ZXZmS1ZxYkQ4MUJiMW0xRU4vbGk0Z0xoVUEyK29OUENVVmVKYlVydjVDNFdHNDBreEVoTzJsSkJtVjJyTUg5eEJTT1p1VTYvSVRPNW54SG5KYWg1ZDB6dmdzbjBqMi9LNk4iLCJleHAiOjE3MzgzMjI2MjUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.q-fZ5Yatd3jgn_FmCGItt7dTyzpv2KOieRAlaMtn__g</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="220acb30-8017-4d09-ac6f-04ce944cbbe5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="1fb11362-5597-4b06-a165-843bf29dfafa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }] 
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="fa1f8483-a057-41e2-927d-bb4eabb05969"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId != ''
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f0b7a3d4-cbc5-4c6b-b59b-922807517dd4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4058</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_qYOtv</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_qYOtv</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>d2424805-2671-4ffb-86f3-924ef95109a2</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="1c45f08e-436a-4198-93aa-7c0b87195dbc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06 - To Verify, Update Group when members list is 'null 'in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ee59146c-aea3-4cca-8789-d1b2a03e2331"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIxRnQ1L1hDbkpnc2lNSitMUGlUWVZpMG5mT3ZORE52cmFPWFRvQXZGUUdRRmU1MUQ0QlNXanhsWlJZRWVJVWFlVEp4bDY1N3UxQXdqQjEyQVZKUUE0R0JoV1JITk4zZTdLb2RQbTUzOGJSWU1QTHY5ZU9lVHhaWTlIZlVkZCt6dHhmaUFsYkVoZGxSZGNBcmFSOE1DOWxxaHJuVDRrVG1QcVZaNXlCRkQ1RFZEbVJrRnZOVlFzeFVBTTMxdnFZbTMiLCJleHAiOjE3MzgzMjI2MjksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.qaHP8EOXy8jjM4Cv93favtIV421lVtv-WjQfWT85Mn8</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3a52203f-1e93-4ab3-a137-c10025bf5612"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="506d8633-e026-4dc6-93fa-88d9e6eb90f8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="b125b490-ad61-4ed9-a57e-e9fd265192c8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":null
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId != ''


//Verify member ID is updated
//def ActualUserId = jsonObject.members[0].value
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//assert ActualUserId==ExpectedUserId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="171f7ac7-611b-4d3a-b1bf-b69a5b9e91bd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4053</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_XwaRD</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_XwaRD</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>680d9930-6701-4474-ba79-4e2dc9f31582</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="034b11e2-ae58-4f82-8c39-4794458e0ad2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07 -To Verify, Update members list with multiple userID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="55224485-1e48-47a4-81bd-2ecc02f26a43"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI3MkRvUXdPUzNrN1IzdldkcmpOaE9EbmQ0cG1RVW4xeHBZbktTMjR5RmZTS3hFS0Q0QmlmWmhza3RQbzBUTUlGWTQrMlo4clVjZTd3YndKWDl3YzFJYzZmbDVEQ0NuUHh0YlcrcW1RNWt6ZkFGK2xtRXJIQkFhRHZMN1ZqNXE3VFdXYUNEZkxqd3grakpvVnAydzV4QkZTVGswd2RDN21LWENWaEFacWhreFk9IiwiZXhwIjoxNzM4OTA2NDE0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.qwxwRxhiXNeSdiOGUo3bxgOeDGGw9LPBsQdUHc2EuBs</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8a85ce40-a965-4faa-be5a-959ea9e8b717"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="33a6eb4e-0dfe-4a51-81dc-ae358508a1dd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    },
    {
        "value":"${#TestCase#internalUserId1}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId1}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="d7a33a2c-3a9f-49d3-9a61-48d2f45c9cfc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
	  
    },
    {
        "value":"${#TestCase#internalUserId1}"
	 
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null


//Verify member ID is updated
//Get size of members list
//def membersListSize = jsonObject.members.size
//log.info membersListSize
//
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//def ExpectedUserId1 = context.testCase.getPropertyValue("InternalUserId1")
//for(int i=0;i&lt;membersListSize;i++){
//	def memberIds = (jsonObject.members[i].value)
//	if(memberIds.contains(ExpectedUserId)){
//		log.info "Member is found in response"
//		continue;
//	}
//	if(memberIds.contains(ExpectedUserId1)){
//		log.info "Member is found in response"
//		break;
//	}
//	else{
//		log.fail("Member Id not found in response")
//	}
//}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d57d59c4-4bad-4f13-afc5-6568bb13357e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>63a41d29-7b5e-463a-9e9c-70f9ce12e926</con:value></con:property><con:property><con:name>internalUserId1</con:name><con:value>22c1c2ce-4c3e-49ba-b20a-d4deb01f8d40</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_xXc1Q</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_xXc1Q</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>d44851fc-7805-4be2-a513-38920fc11de8</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="2903e3fd-4008-4ad6-bad2-02d812b4a2ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08 -To Verify, Update Group when members list is missing in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="74b8bf8a-2b92-49ad-a741-b7ab230ec6c7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRSVpMZWZVbnpZMXdHWG03WkVVNW9YKzBSVDVGOGZvZWFabksvZFlqaDUrUzFkVi9paTVxcFhVUzAydTd3TWtoNTdoNmxibC96eTJGdmZ4VUVlck5VcTRmc1VtSndUUmZJbXdDZjA3RS93SEEyc1JTUW56ZjJnQTcrZWFuemtXZzlMU0lVbnZ0NTdsamRxbGd3N0J4bk01R0pzWXpZb2JVMFBwa29mNmp4M3JjcEtMdytWMW1zeDd5REo5dHpod0YiLCJleHAiOjE3MzgzMjI2MzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.AytlsnlXm1_6WVfvD5sDD-yzFHJiIfx3qEcp3Kzwzek</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c2aa736b-cd0c-4407-97d1-d8017a1af56f"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2da8e604-4034-46a0-8620-cb412f961544"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="0e81ca35-226c-401c-be71-b2577057f31c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId != ''


//Verify member ID is updated
//def ActualUserId = jsonObject.members[0].value
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//assert ActualUserId==ExpectedUserId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9c2650cc-39b4-4faa-989f-7706bb8b2694"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4051</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_xe2EU</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_xe2EU</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>815e12f9-6795-47d7-8586-042ad6f837e7</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property></con:properties></con:testCase><con:testCase id="307b738d-ccc6-42b2-afa3-15af72a8d621" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09 -To Verify, when same member is added to group" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d56e01b7-13ee-47df-a334-63c973a54be2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJFWVM2RjF6aGVvWTd3SFRtbExlNTZtNTlOYmRxSHpRK3VnZ2RqVElLdTU4bTd6LzVDOTNvY0N6Vit0RVBUUHhSK0J5RFVGckh6VWRqMzdDZDBXYlRFZ0dhVXVMVTh6U2lTTW11dTFHM29tOUptb0czUUE0NEhUT0xtU0ZEZ3kyRmlmK0VyMjJRRi9lVlU1c2FFR3oxUDUwSTJUcDU5QW1QRktxeTQyNjJkKzc4T1Roci9UYmdiY2VUOC9ZbDJFN3EiLCJleHAiOjE3MzgzMjI2NDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.T1iHKxcPx8BP9WGoyS6t3ZwKKMODOSUub3kC8HQ4ge0</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d7ba2098-f0a6-4da5-b045-ecf7172b6f9b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="4b381a33-3dba-4736-8931-4380351f1dc8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="15b1e3d6-44bb-4f39-b63d-971ecb9045c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
	  
    },
    {
        "value":"${#TestCase#internalUserId}"
	  
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null


//Verify member ID is updated
//Get size of members list
//def membersListSize = jsonObject.members.size
//log.info membersListSize
//
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//def ExpectedUserId1 = context.testCase.getPropertyValue("InternalUserId1")
//for(int i=0;i&lt;membersListSize;i++){
//	def memberIds = (jsonObject.members[i].value)
//	if(memberIds.contains(ExpectedUserId)){
//		log.info "Member is found in response"
//		continue;
//	}
//	if(memberIds.contains(ExpectedUserId1)){
//		log.info "Member is found in response"
//		break;
//	}
//	else{
//		log.fail("Member Id not found in response")
//	}
//}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="16638ac9-6e56-4002-867a-365eb52ab403"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 </con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>22c1c2ce-4c3e-49ba-b20a-d4deb01f8d40</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_NK917</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_NK917</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>f7219fb3-0be3-46df-8a24-e4daa7925835</con:value></con:property></con:properties></con:testCase><con:testCase id="b49ba2b1-3b02-4454-9980-d03a45a4711e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10 - To Verify members list with invalid userID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8d4b8d52-6421-402a-9c8f-998d355594bb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJpZExpeGVwa2lqTEh6K2djT1I5NTJMcWhLY0QwMG4wOVY3SHZQa0QrVG4vK095eEdIMC84L0VMM1ByMUdSVS9QUUF6UVh1NXZwVjF0Qk5NVmd2Q1hzSE9raGVlaEFZRGh4TC9lR1dpdzZuRzRuSWE3UzB3VHNSMStLc3BNdEVPT2lIOFpodVdQUzZabGIzTmNYYWdlMzM1YUZDa1hkazlleC9RMS9jRzEyc3M4THVqYnNrU05razFPNHhDUklhc3IiLCJleHAiOjE3MzgzMjI2NDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pZvNkZQesIihKTDAH1up0A1SX3Z6ndjGOzkBoeNyVVY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8fe9d7c0-1aff-4d91-8657-56f88955fdcd"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("internalUserId", "extId_"+ randomGen)


</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="ec42ea17-4b0f-46b7-9fe7-b9937b481217"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="5e3479f1-f779-4a9c-baf2-cc9551591591"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[
    {
      "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d1d68ca7-5381-4254-8720-0a0e4648ae62" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null


//Verify member ID is updated
//Get size of members list
//def membersListSize = jsonObject.members.size
//log.info membersListSize
//
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//def ExpectedUserId1 = context.testCase.getPropertyValue("InternalUserId1")
//for(int i=0;i&lt;membersListSize;i++){
//	def memberIds = (jsonObject.members[i].value)
//	if(memberIds.contains(ExpectedUserId)){
//		log.info "Member is found in response"
//		continue;
//	}
//	if(memberIds.contains(ExpectedUserId1)){
//		log.info "Member is found in response"
//		break;
//	}
//	else{
//		log.fail("Member Id not found in response")
//	}
//}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5dde8b17-6908-4f4e-83a9-e20af9f783d4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_2zlpP</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_2zlpP</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>91b6b5f5-85d2-4e14-b17d-e9b8e575286d</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>extId_2zlpP</con:value></con:property></con:properties></con:testCase><con:testCase id="36744e55-0123-4109-8191-50817ab3b1c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11- To Verify, members list with permanent deleted userID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8d342496-81e5-4a66-8583-20424bb94687"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJpQjMrK1NablVhVHBYd0wrbTNqQW5GWW0yL0RFdk0zbVVHMWtiYThORjkvblkzTm9VM2VNM0ZWTVdoNUZBR041SzJDckVBc3JmRWlzZm1kRnZkT0g0SFlOcEFXRHd5MGlMWVdTQ3U0T25kbzdFYkwzdVNwaUJHUzdtcG9DOWNsVTAvVEl4N2dxZXVKcCs5NFlYcDJ1c1dqRllSdUpPcG8vZzBpZFdKTS9zU1d4bTF3RWg4Q3dxb3RmcCtwVHYyVFYiLCJleHAiOjE3MzgzMjI2NTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zJGmIzZoDNtD1hbunPCVpPdzSoYrhESEelS5aHAtJE0</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="917f5fdf-f753-4c5f-908a-4b57e36f55a0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="cba4b1d8-86f3-47ea-af58-1fd639149ac8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="714324b8-e8ad-498d-901c-c4f8277f8770"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[
    {  
    	"value":"${#TestCase#internalUserId}", 
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="48342050-2847-4d19-8053-b140cf532e1e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null


//Verify member ID is updated
//Get size of members list
//def membersListSize = jsonObject.members.size
//log.info membersListSize
//
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//def ExpectedUserId1 = context.testCase.getPropertyValue("InternalUserId1")
//for(int i=0;i&lt;membersListSize;i++){
//	def memberIds = (jsonObject.members[i].value)
//	if(memberIds.contains(ExpectedUserId)){
//		log.info "Member is found in response"
//		continue;
//	}
//	if(memberIds.contains(ExpectedUserId1)){
//		log.info "Member is found in response"
//		break;
//	}
//	else{
//		log.fail("Member Id not found in response")
//	}
//}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2247b36c-8ea4-4caf-967a-c28cee7dea38"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0042181e-8e77-4bf9-9e5c-e130ef31613a</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_1svCd</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_1svCd</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>36b2b37a-e974-40e8-97a9-75d698b09d75</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="de971150-ec1a-4c71-8397-206c784fe03e" name="UpdateSCIMGroupByPATCH TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6f125337-ae3b-42c2-8aa2-f25548d7b8b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify, 'Replace' single SCIM Group by name with 'Add' and 'Remove' members" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="14fc40f4-2e36-4ea4-97a6-251443dda167"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIvZ3hESEtYNWNDeDJSUVJLQ094ZFF1aGpEckFvcEhYQWJOZ0k5aUdIei9veDhNSklDQjczNlZBZE1FOWVZUmswWFVHUTZmSkd0NVVSS1M0NHlnNjBOK04xeUV1dkViVFF5b2FPM0FaMUsxa3lrY0VIbklTZkV0VXBzYjQ5WkZXUmlkcDI2WmFFQjZrdEswZU5Ud0szWU1oUmxrdWtRWSthVm9aM0M1WUgyZFBubFR1TVpwVlVYWmdrSUNPSzVGYWoiLCJleHAiOjE3MzgzMDMzMzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.sb9IFxnwq8WXX6HPuTahgCMttnhdnOg_OvD_sDRtbvs</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c7173db5-cd13-480b-b6bb-3dca6b7fa8be"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("UpdatedgroupName", "UpdatedGroup_"+randomGen)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

// SCIM Create Second User Data
tC.setPropertyValue("userExtId1", "extId2_"+randomGen)
tC.setPropertyValue("userName1", "scim2_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="91a0e02a-976e-4ed9-b103-9a412a8be3fb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER1" id="af99cb4c-adae-4da0-aca5-821213305a2b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId1}", 
        "userName": "${#TestCase#userName1}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId1")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId1", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="77563f27-5e37-44e8-8245-4bb80ff042e9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   ,
    "members": [
        {
            "value": "${#TestCase#internalUserId}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP_BY_PATCH" id="0de66faf-f85f-4439-b39f-09ef57b70224"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP_BY_PATCH" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "members",
      "value": [{
      	"value":"${#TestCase#internalUserId1}"
      	}
      	]
    },
    {
      "op": "remove",
      "path": "members[\"value\" eq \"${#TestCase#internalUserId}\"]"
    },
    {
      "op": "replace",
      "path": "displayName",
      "value": "${#TestCase#UpdatedgroupName}"
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="94be91ad-7a84-431c-94a6-9caf42b28529" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1071de4b-ec3b-420f-9bc0-b7d3784506e2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>802493a2-05ab-460c-a5e7-271975f7d3cf</con:value></con:property><con:property><con:name>internalUserId1</con:name><con:value>62ca00d7-20eb-4792-beba-6c33994e02a3</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_rE1PV</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_rE1PV</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>36e3d503-0522-46f1-9829-f083fb17a340</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>UpdatedGroup_rE1PV</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_rE1PV</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_rE1PV</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>userExtId1</con:name><con:value>extId2_rE1PV</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim2_rE1PV</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-GB</con:value></con:property></con:properties></con:testCase><con:testCase id="e1b85693-1aad-4dbc-937a-6a0a5c44045f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To Verify, Update group with 'Replace' operation without giving path" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3af32044-2f42-48bd-a4f2-8f12e04c5303"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzOUJKWHhvWGt3amJURzNpNHgva2ZDQjJDaS9JdFd5aHdVTlpSbU01ZDNkelRodFRuSXFDdGxOMUFnSFdwNkNIaDJTV3NuVWJrQ3FBckNuOTN5QklIQ2RZVVNQNXJpNDVmSHd1endnYmpBd1B5YjZOc2NiQjg3SlF4TTFDR3ZYMy8xRm1CZ2txQXloRlRIdHRTaFByTFl1WlhlSnIyL3Q3aEF3K3NZMjRyYVlxU3h1Y00yS1Ztb0VVNU9ydytMOVUiLCJleHAiOjE3MzgzMDMzMzksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.3vTUSzO5-l-PxMRl7hZEtNxq4j-vzrrQM34HOZwajSE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e1212677-baa6-4376-be0d-fad6047a7e96"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("UpdatedgroupName", "UpdatedGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="dcfb4b9d-1faf-4b53-9943-5e0fa3cd285e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP_BY_PATCH" id="ba7a14c8-4abf-424a-a4b6-154dcd59fb3b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP_BY_PATCH" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [ 
    {
      "op": "replace",
      "value": {
      	"displayName":"${#TestCase#UpdatedgroupName}"
      	}
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="94be91ad-7a84-431c-94a6-9caf42b28529" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1c67d14a-2ee7-4f5e-a9d8-15f7fc47b063"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>31</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_4nNKF</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_4nNKF</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>c6fb7364-f8a5-4db5-83bf-93f532210e0d</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>UpdatedGroup_4nNKF</con:value></con:property></con:properties></con:testCase><con:testCase id="7a29f539-1581-4438-98d8-e7e1e4d6d867" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify, add member again, who is already part of group" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="82e6ead0-169e-4fda-a182-d66675ce4d8a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI1Tmt5NEVEalZaYWR2blZjZjVjMi9ObXc0WGFLa1NpVUZQZEY1TnlwSnI0SWs4SjNPZlFHNFVudENZdU1XcFBvSktkUytsSS9VcVByNjJyRUpjaEVIU2F1YmljUUhMR08rNnMzZTRtYWtyMkhLWXF4UW55SmxwMGNmcGlXRDE2OEVkZXgvenFObDhITmVGVGpiY211N1JYTjRvcHIzY2h0SS9NOEQ2Q0VzWjlEay95dytEaDlEM3p0VHZmNGZyNVAiLCJleHAiOjE3MzgzMDMzNDMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ZRegKcZ-kMVY2fB0ARlhp1vfQjllvq1kClT6hp877BA</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="541a0831-ef31-4b46-823f-463584251636"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)


// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1718601f-0272-4aaf-9da8-3c16a2b7287a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="7e8ef8d6-2f78-46df-bd2a-30095c97ca95"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
	  
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fc32e808-ec8d-45d5-9928-de47ea111023" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP_BY_PATCH" id="b169a9c1-bff0-4c25-a612-97e4ab09a121"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP_BY_PATCH" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "members",
      "value": [{
      	"value":"${#TestCase#internalUserId}"
      	}]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="94be91ad-7a84-431c-94a6-9caf42b28529" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="07f2b923-f6fa-4846-b4ba-37e7518a1d8a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>17e1539d-5700-4bb1-bd4a-7092da57ac0c</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Dhn52</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Dhn52</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>bdc95a71-dad4-48e8-bf95-c949ae487874</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Dhn52</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_Dhn52</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-GB</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="7b4237a0-94b0-499e-b032-07d9a5bb74f7" name="GetGroupById Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2adef0b8-5c20-4df8-9279-dc7d2ed7387f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify that group details are fetched correctly" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d2d47bcb-efc0-4e47-bd93-997fd74353e1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJEMWVtK2dKZXhOMlRUaW1TNTlPZWRhMGZzYVFYT1JTS0wrTG43TjdCT1ByUDBOWTZ3ZlROcllQWXBNMzZqeHFVdFlIV0lWb3IwTUo1UjB0WllRb3VyT3B4alVTcGRMTUFGcnpMV1F1dytwa3FpOWZ0czZKcFhUbG9KakVuRFl2cUgrdmJmRmFSNjd2ZGliR3RBUS9JRnczYnAzd0VCU05NcWtqQVBlb1NmZG9LbmtuekNzTnRRbUgwMjlPYnltWk0iLCJleHAiOjE3MzgzMDMzNTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Oh2LfHgYezdd8W4WeoYofopcaarHlGXOXX-VOmEOCHc</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="82d285ca-1cb5-48e7-8d8e-de1e7a7c5e0e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("displayName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="03c63ae2-4970-43cd-8db1-f0c668ba2763"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#displayName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="e878cc74-f88b-447e-ada7-bade03888ff9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the Group Metadata
def resType = jsonObject.meta.resourceType
def groupLocation = jsonObject.meta.location
assert groupLocation != null
def groupCreated = jsonObject.meta.created
assert groupCreated == null
//def groupMembers = jsonObject.member
//assert groupMembers != null
assert resType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null

def ActualinternalGroupId = jsonObject.id
def ExpectedGroupId = context.testCase.getPropertyValue("internalGroupId")
assert ActualinternalGroupId == ExpectedGroupId

def ActualinternalGroupName = jsonObject.displayName
def ExpectedGroupName = context.testCase.getPropertyValue("displayName")
assert ActualinternalGroupName == ExpectedGroupName

def ActualExId = jsonObject.externalId
def ExpectedExId = context.testCase.getPropertyValue("groupExtId")
assert ActualExId == ExpectedExId


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1dab24bc-a476-4896-86c3-ec2ad7fa0eb7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_eCheK</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>1b011f5a-4781-4a45-b403-1ac7e786a54a</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup_eCheK</con:value></con:property></con:properties></con:testCase><con:testCase id="d75de622-6cc7-4203-809d-4cfcc5ea2d0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-Verify 404 status code when invalid group id is given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="49ccf6fa-994b-4886-99f0-bfaae5b72e7c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIrUjkwNkE0UVoxbTZadTFlTVB1NG9STFhQa0wzMlpJUTNRNVllci93cUZwRjhEU01kMjEwOHdPRHFEY0lOWE9uSVF3WWRMQThtTkxzT013c3lNNHZXM2NvRUN6eW5yZHlNa0Y5Q1VOMjlzTFFqbE5zUE1YZ2lkS3lIRU5ZVHZPZFhtM2ZvVWI4OE0vMC9za1FrVFVHZzFVNkdubDVtMVFEQ2hLa090M3dqNVU9IiwiZXhwIjoxNzM4MzAzMzU0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.pmTRXkA68WDjpUw8CjuwO7450bJUH5s_TSYuBTYGU0c</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c68ad28a-805a-47ca-b17f-d78c860b87f3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

tC.setPropertyValue("internalGroupId", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="0b9c6cf4-dbcc-44fc-93bd-45c523dbf375"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 404

def responsedetail = jsonObject.detail
assert responsedetail != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0336f44e-0f2b-4e31-9583-cae5f09cb411"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup_4ByiU</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>aSGzt3sj</con:value></con:property></con:properties></con:testCase><con:testCase id="dd5af4d7-da6c-4798-93c4-8121da190879" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-Verify that Permanently deleted group is not part of response" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="857ad473-45b0-4ea2-a8f5-487bee3e17f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtL2hheVVrK25mV21Camg0S09MMm1zd0xTc1VuTW93Wi91SlJBRCtSV2JuQ1NlNWlVY0RjSjVIV3VuNXJucmdwMm1BOERIcGwxbG9pSjk4TkJpQ3kxS2Voek9SQUU2d1RUOE5uVGE1NWlUbVdRKzdXTEhSY0pmSWNJdk5RT0FPMmo3UlB6aWowT0ZuM3lQRWJRZjdmMUN6WWYxczdQRmZsUjhXLzVUR2ZNUWZURGh3a3pHazNHYktJTmFOYW1SR3UiLCJleHAiOjE3MzgzMDMzNTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.4ynd5vAAIJEg2I_U2qFHJToX3D3pSFqoEkvF_mBj9zw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a1aa150f-f9a6-4a63-a035-82e6b6c7cd43"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)


// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("displayName", "scimGroup_"+randomGen)
tC.setPropertyValue("internalGroupId", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="9c0e8ca8-1a51-4c4e-9b95-4c2b635adfb9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#displayName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="5e36f9fa-70a9-499a-9ea6-65d6bd2f7d3a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="c3785542-4824-419d-927e-e07abf4a12d2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 404

def responsedetail = jsonObject.detail
responsedetail != null



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id[0]
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a902888f-40f0-4da2-b407-78f96dc698bc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup_VUfwSUQM</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>e6470eb7-9de7-4336-885f-7839e89ef22f</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_VUfwSUQM</con:value></con:property><con:property><con:name>active</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="bd013558-0e9a-4eb1-8853-889d72461231" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To verify 401 status code when expired token is given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="198ad9de-1932-4db7-9156-a6c39415070f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJUSXFxL0tvZzJmbmNtWXVscm1BOGw3eTZMWFZXa3Z6NVFLSHVaMUNvcXhkem56cUd0dG5rbzFncThqSlFDaS92MDh5S2VCMlBSUyt1U3Q3NEprYTRyUWlJeXc3OXJzYzlNM2xwZDdBeUdhUWRTaFI0L0FTNlVPUkt1ci8yWEhkWlN1cUV1TXR1eTM0ZXE5NmFCTm5YTFlHSVcxZDhibVVONEtQc2toMnJTekRnczJaY2M2UFV4aFpieU9vaDZwdzQiLCJleHAiOjE3MzgzMDMzNjEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.XAd-gZ2PslxdqDwTgKb6Wkxt-yw3Va4w-VMIJvcqJ9A</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="e253d48f-e8b3-48c6-89cd-22abc4a94bf4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 401

def responsedetail = jsonObject.detail
assert responsedetail == "Token has expired."



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("UnauthorizedStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiI2NzU4MGFlYS04NWViLTQyMzMtYTExOS00YTgwYzIzMTM0OGUiLCJzZWNyZXQiOiJoUXFhWlZJVDJJTGJDTk9weXZOZUw3bzJQWGcyNk9FaGtOOVdKZjNOSW1PREdQOW9OZnREblBMNE1SUEJuWW1NekhXYVpSYVRQVTU0YkErS3k4alliZDUrWm1oQnNiTy83ckRvWW5oTXcvZUxsVVJJeE8xMkxzSEFKbC9mTFg3d2ErbmlxK3c1TGNuUlVNdERUL2ZSemZZRGVYWGJyRWpUWDlCSzRmK1pNOTBRRDh5eTZNM0wrcXJVQkhrNzYxenYiLCJleHAiOjE3MzY1ODk5NzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.WO9f8F1FpVse0SM6v9DVouznESaQl5VXGBjVN8k-v0M"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f42ed6c8-696c-472d-b79b-ef9927f9c945"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ghsdv</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>624</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_87441</con:value></con:property><con:property><con:name>ACCESS_TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</con:value></con:property></con:properties></con:testCase><con:testCase id="20ca248c-5c1a-4a63-8184-186e85f38999" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-Verify 401 status code when invalid token is given" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="062e9b5c-dddc-4df0-bdf6-4826152188d3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 401

def responsedetail = jsonObject.detail
assert responsedetail == "Token is invalid."



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("UnauthorizedStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer eyJhbGciOiJIUzIkpXVCJ9.eyJ0ZW5hbnRfaWQiOiI2NzU4MGFlYS04NWViLTQyMzMtYTExOS00YTgwYzIzMTM0OGUiLCJzZWNyZXQiOiJCbzhja29MNnpuazhEdUd6ajdSSnJaY3BFRnY4WjZSZWZSZ2lBc0JrbnE5TzU4N0ZkVW45cVQ5NFdiNE45NE1uWjlxN3lKK241dmMwbUpHaWV2aDZwRDJFRUtDcnVPM2IvM3R0SCt2SmVxQm5CZ3FkQ3kxeWJURUpNeGw1eU9yYmFnWXhBM1k3OTJQT2h5NnBNUks0dzdQb3VVWXFVcm1pc1gyeU5IMzc0emhBVHFKekFxZzdKZXR1NTlWOEQ4U20iLCJleHAiOjE3Mzc2MzQ4ODEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ejBCbyehGWFAaSCfJEzsBmPOKx0hv4o2U2d"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="fd513bf8-d976-48e8-b8fd-aebdba6a7d32"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ghsdv</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>934</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_87441</con:value></con:property></con:properties></con:testCase><con:testCase id="03212e59-3edb-4f1e-969a-6718d0947daa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06- Verify that user is able to fetch group containing '&amp;' character in display name" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="45d697cc-2955-4f80-9d16-5ccf0f2ab39b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJzN2JXRGxSNmo3amNXdFNXVStmTHhaTkJLUHFVeFN3WmpTTzdvMEdNUTN0TDFPTFh0dCt6SVp1VmxFOFd4TnJNSTE5YkxLL1YvVjVhLzc3QVUrOUpTRittYTlYWkdHbDQxQkxrZ1I2MWV3cGpSVllxQUcxUEVVK0VPcHFkTXpNQUdURDIwRlB5T1lRV1pjWDEzcFZKY0VUcWJ2K1QyQi9rSkJINXJUazlZWGdyN3o4VDJvZnJXRk9GWGhQN0tGSU8vdkFkMnFRTGFLNExtUll4VjU4cFZRPT0iLCJleHAiOjE3MzgzMDMzNjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Gd9pgzFEMvqOFdnjeQJhtsXSjaQkuzz-xRZvUMbKiBA</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7364e942-ad6f-47ab-83ca-1e5efe0a05e7"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("displayName", "scimGroup&amp;"+randomGen)
//String dName = RandomStringUtils.randomAlphabetic(5);
//tC.setPropertyValue("displayName", "&amp;"+dName.toLowerCase())

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="90b60115-1689-4e49-a5f8-113b6c84652b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#displayName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="7fd70f99-b7c4-4abf-bf80-5f4c9aca345b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the Group Metadata
def resType = jsonObject.meta.resourceType
def groupLocation = jsonObject.meta.location
assert groupLocation != null

//def groupMembers = jsonObject.member
//assert groupMembers != null
assert resType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null

def ActualinternalGroupId = jsonObject.id
def ExpectedGroupId = context.testCase.getPropertyValue("internalGroupId")
assert ActualinternalGroupId == ExpectedGroupId

def ActualinternalGroupName = jsonObject.displayName
def ExpectedGroupName = context.testCase.getPropertyValue("displayName")
assert ActualinternalGroupName == ExpectedGroupName

def ActualExId = jsonObject.externalId
def ExpectedExId = context.testCase.getPropertyValue("groupExtId")
assert ActualExId == ExpectedExId


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b81cb93d-a32f-4dbe-b446-9a898f03491b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup&amp;F2fT5</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_F2fT5</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>65b87f25-9908-430f-a24d-a95d087c351b</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>ACCESS_TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTQyMzE0MDgsImV4cCI6MTYxNDIzMTcwOCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJlNDRlMTc4NDM0N2E0N2FmYjE1NDNjMDQzNTc3NDVjYiJ9.FN1QVh_L_TvIXJ3oEUGVAxQjvtZbG2ovtcjC397taJY</con:value></con:property><con:property><con:name>ACCESS_TOKEN1</con:name><con:value>eyJhbGciOrthbiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTQyNDI5MTksImV4cCI6MTkyOTgxMjQzOSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJlNDRlMTc4NDM0N2E0N2FmYjE1NDNjMDQzNTc3NDVjYiJ9.skyV_JZe8FAo7APoWPDnnYlT-Uq-wyrUJZkBpyHQnj4</con:value></con:property></con:properties></con:testSuite><con:testSuite id="f056a929-6bd5-4acc-92f1-155b11aa56b4" name="GetSCIMGroup-Parameter Name"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="982ebe06-7b05-4bfb-8f00-83f38593d6cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify the response when &quot;excludedAttributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c4745825-30f9-4268-9bf4-de62840775a5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJwa0JtRUZyOCtDWEU4Nk9zd2d1TkFpMUZOYXliMHdCNXBhODdpRkpmbFFWb0JWVWdSSWVrdjNyT0sxSWN5MnVqTW1UQ1ZiQzBPV1VoQTY1emVWa09UMzZGbXFZVW81eCsvRmIwK2lCRVRDWENMd3JVQ0c3RXdUMkVPWkJJeWh4bXhaUnVPTkZOZkIzVHQrZ0VRNzhLV1BiamFyNUl1SUtTb1JqRzNkOHBvS214ZGFEalFnKzE0YWloaVpvcHdaU1YiLCJleHAiOjE3MzgzMDMzODQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.FUvQVLozlKhoyhsaQJbKfhTANDmnoOslbxkdy3gqHFY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="343826d1-b53f-4feb-bdf7-0ab498d8f964"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info jsonReqObject

def actualAttribute = context.testCase.getPropertyValue("excludedAttributes")
//log.info actualAttribute
//def dName = context.testCase.getPropertyValue("pathName")
//def extId = context.testCase.getPropertyValue("groupExternalId")
// log.info extId
def GroupArrayLength = jsonObject.Resources.size()
//log.info GroupArrayLength
//List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    //list.add(jsonObject.Resources[i].pathName)
     assert  jsonObject.Resources[i] != actualAttribute
   // log.info id
    //list1.add(jsonObject.Resources[i].groupExternalId)
    //assert id!=actualAttribute
    //log.info list5[i]
//    if(  list1[i]!=extId ){
//        log.info "Input query filter not found"
//        assert 
//      //context.getTestRunner().fail()
//    }
//    else{
//        log.error "input query filter is found"
//    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f2aecaeb-a07a-4b51-a39b-5544a60f75cd" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="excludedAttributes" value="externalId"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="beeef1ec-1981-4455-8133-749b17aa801d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>excludedAttributes</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="d84791c7-b6ab-43aa-9763-5d49ba3b1385" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify the response when &quot;attributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="eeea0bad-901d-4b14-a78c-2e7bb4bbf4da"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzNTNsS2RmMFo1eG1lZVdHK05mZ1ZSWWNBeWJqTkNHQ0tIWmV5Y2RWN3p4cXd2dUVnWXhXRm83dndlRjVXTmFNYmFpdXFyQ1pmc01jVTFhK3ZPZk5ZdmFMUjB5L0x5K0lzSmtPQ1Z0RkJFYURjVzBVOGRVem5tS1pITDhkcTRhNXE4OTFYTU5aYkZWcHRVWjlNdENmdlJsWFQ0dkpWWG5zU1p4K0FiUzQ5dHVNNTJ3TVBGZGp3UzErMWFRai9DNG0iLCJleHAiOjE3MzgzMDMzODgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._nyXKDsRLsnfv4pvdIRq1wWjKQNd_wrEWfjsrleLUuo</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="cff5e1cc-7860-452b-9d80-f02cf9d1b20e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info jsonReqObject

def actualAttribute = context.testCase.getPropertyValue("attributes")
//log.info actualAttribute
//def dName = context.testCase.getPropertyValue("pathName")
//def extId = context.testCase.getPropertyValue("groupExternalId")
// log.info extId
def GroupArrayLength = jsonObject.Resources.size()
//log.info GroupArrayLength
//List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    //list.add(jsonObject.Resources[i].pathName)
     assert  jsonObject.Resources[i] != actualAttribute
   // log.info id
    //list1.add(jsonObject.Resources[i].groupExternalId)
    //assert id!=actualAttribute
    //log.info list5[i]
//    if(  list1[i]!=extId ){
//        log.info "Input query filter not found"
//        assert 
//      //context.getTestRunner().fail()
//    }
//    else{
//        log.error "input query filter is found"
//    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="88a15c9c-a1e8-4a35-95fc-75131cbe7a26" name="Contains"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="displayName"/>
  <con:entry key="excludedAttributes" value=""/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d082bc61-2d82-4f4d-9ccc-afb74596a9e1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>attributes</con:name><con:value>displayName</con:value></con:property></con:properties></con:testCase><con:testCase id="417f8be1-d04f-47d6-ae3b-0fe20afd0050" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To verify the response when &quot;attributes&quot; and &quot;excludedAttributes&quot; are given in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="51bb4614-d207-4361-92d1-17dc6fa8ced4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0YndGNjB1cStPV3REcGlwcFc4UkZ6RThZVWp5VWt5azNRUFR5eUJyVUZrdFVtRGlpc1B5VDBWdE5jTkl4UEtJbUluZkNXVVMwNVMzajlSUE11bWJCZmE3aHJXeURHY3NDckJ1VnFjbkFKeHllY2dyczFDOWZiUzVVd1RIMVlRTGVZZXJjby9KZTRRTVBkY2N0ck8xWW9OVFVPK2E0NEVlZGo1OUZHOHhQUG5pZStaSTFWRTFwRkRVQ2RCWDMrL3YiLCJleHAiOjE3MzgzMDMzOTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.o4v3cvc1PxOirD7I-gfAcCnC0fCWJwcMDFIMGGI0aO0</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="d3f5d3df-02fb-43e9-a80a-f33561620e06"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]!=dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="displayName"/>
  <con:entry key="excludedAttributes" value="externalId"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4bd61096-0a12-437d-8a51-ca1b99829d80"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="9b33ad97-4489-4283-8174-cc1023729451" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To verify the response when multiple attributes are given in filter for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2c39c7c1-65d3-4263-aa02-edd191967b33"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIzU1U2THZwNytTWSs4ZmJhRGMrT25iMTBCMGV1TGNoZW00ci9zSGpweE5EZUhSOTJZSEwzKzlmVUtlNkFadDV6azZtOHBQK2J4bGNRWlplWVFUWTNPaUhrZ1FUYUR1eFUzMG43YmlzbExDVlNucnEzaDZYTmwxYmVxYmEyWnZKL1BqTWs5MW5DL2xHOTRFQkcwZjVGTjR0VFlnQUl3Y3hyZUQzWlZXRlVUL0NuQ0U1dldaemtaZGF0YWpRZVVteDgiLCJleHAiOjE3MzgzMDMzOTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.1efyYbLajADtgzL6jXCbaQE15SQLCuy8C3eLDdVrQGw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="56f28c28-655b-4f55-9bad-00f53ff635eb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]!=dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="1c595b7a-d0d7-4b14-adb2-860cc470274b" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="07bbb8ce-0091-45d7-9a4e-a6198141841c" name="Not Contains 1"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="excludedAttributes" value="externalId,displayName"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1d35da3b-4c6a-4cf9-b5be-3d5e933ccc33"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="719517fd-d09c-4c0b-a90e-4cdd1e60cd37" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To verify the response when multiple attributes are given in filter for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3a2aa2d6-4295-494a-be5e-b6c0b44a0777"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhWGRtQ3pEVXhmZ2NFMFVZb3FPKytEZ2NjUUEycUZ1NGRvbCtVSllDRDhWNjhONmM1THZsWWVHTWJVYVlUK0J6TFpMTkhsNUFRSmFobzhTSmxCbTN2eXlBZkkrZVoxR1czWWJTMjJ0U0h4OG4rdEdPa1YwNmFZTy80VHNGbWVUZVczT3lsUUNMNE9DeGlwcy83T0VXTEtBWDJyc0x3RHo4YkFmMEV2ZzZQdjg9IiwiZXhwIjoxNzM4MzAzMzk4LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.Lj2tlx-XMlujWzaVYMwplCChJiUjgNlQrN-dSS0uw9g</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="552de538-e9b0-49cd-bfd8-2ad60b44e973"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b78b75b2-00b5-4948-a2ed-1f3b354e2b53" name="Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="08489474-bbfe-4582-887e-eed937d8a6cb" name="Contains 1"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="50"/>
  <con:entry key="attributes" value="externalId,displayName"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1a7417ba-aee7-4363-a947-1dd30de58255"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="936f689f-c139-4f34-b29d-44f08ad7c3fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To verify the response when attributes used in filters are case insensitive for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3e7b9f56-f8c1-42e1-abef-c1cce0de5690"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJnK0YrWXloLzV5dE9ad1JvL3RVSmdSclF0ZkVScDZBaFdNWHE3THlXZ3djc2dtSTA0SUpDYnhDOU1DUWNHR2NPM3IyMTF4TlB2YjEyTWtSUHRoVE9ManZOLzZYV3h1YzEwaGpxMmx0UVM1OHpDc2E1bzg3ZHE4dTFYYytSRVVxSEVBaDkwekFWU2xhU3AyaE9Rd2x3K0RkL0FvdVdua2lOMVQzblk3Q040SE9QZ2RmTm5CL1FCZWZJYU5CVlNFdEoiLCJleHAiOjE3MzgzMDM0MDEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.aVJj20JClVTX5PGtHl_rvcxHIROI-ap2waldIQkzppM</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="6cd08bb4-e724-4f14-a141-760f4e60067b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="760505b6-9f88-4084-8d02-0b8da05d041f" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="excludedAttributes" value="ExternalID"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="91bf1125-fc87-43fa-b25f-24bbaf893e25"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="b9b4ec82-62f7-494b-ac76-d7348e316478" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To verify the response when attributes used in filters are case insensitive for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7ac67b2-7715-4d7f-8f40-7de75a5b033b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKc2NUYkZSaTFpMER4anV4bEtKbXNnVk05MGJGdGNmczdpWnE3Nm5BNktMYmtsWnNvZUxKbUd0bXZ3cGE0OWUrU0RIOVV5Q2pkMm03UkZMUk5VWWRjMURZNmhXL0tPUjFDNHpVZ2hrNjFpUWpzazZTdWJBNzR1VnF4eUFqbDR2K3g4RmdpdVB2SnhGSW9lajd1ZDFYZGU1QUc4eUhZSFdSR293K0xoWlgxSFpOaG1IUllDMERQV0N0dFpYL3hhZEwiLCJleHAiOjE3MzgzMDM0MDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.8WWNiNyuFFeTDPmXuHQi3khjg2-WJbWtLnadS2-79jw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="618740ee-7720-4467-9b45-e236e8d8c959"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]==extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6c628d56-1895-4574-acbd-79cfc48f4ed4" name="Contains"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="DisplayNAME"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="fd038df9-96e1-4794-8d9f-909e9fea5181"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="e11c0355-56dc-45f4-a0c5-7d5b67e85a96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08- To verify that Child attributes are supported for excludedAttributes names in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9b91a776-c8e2-4160-a3bc-05fc1305f52e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ2cjdWQ2xBejVkSWFqOWY1QWloTE5KMlB0eGRsempzV0xqRnR4eDgwaDhiQ3RhNVc3M2hEdXVjeEZNWkMyZGV1dUxGRFJndExwL05DcmxPVTlxS3R6Yk0yR1o1TkZjQWxDTTMybHFYekJwWmdLTlBqMHA1eHZQUS9PS3g3bXdHTFExcjJ6Wk5jRG8waURkWE9IbUlnMk1NLzZURlNUSHBHRWJXeDFuS1JEVjRlelpXN0JGd2ZRcXVLaEJGNjJuSEEiLCJleHAiOjE3MzgzMDM0MDcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.hKvi2QCddWrHn6FV2mJvzu3-rWMHHpPeTgCcKD4Uvro</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="dd9ca2f5-40e3-4ca5-8248-c83ad9189d00"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="932a2e0b-245e-4582-8d79-5f1a5edc70a4" name="Not Contains"><con:configuration><token>created</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="50"/>
  <con:entry key="excludedAttributes" value="meta.location"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="77ef397a-5e28-4a46-8c0d-704d7d6a66d4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="b54f6d23-313c-4061-844b-17b07641e3d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09- To verify that Child attributes are supported for Attributes names in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="066e7123-057d-4975-a75b-eba96a28b2cc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJSOWdqcnNPaGdNVmQrTTFTd3dldFZYOGJXRnhDSXUwSkdhd2ZPNVVOczlsZ1FHbER0TFRjbGZIZE9HQ3dEQjZ1OWE2LzByK0xtMmJBb2JNM3ByaTErNjVFRHp5NnlRempWN0c5N1k5aWRQSTdQWTZhbW56b2kyb2NLTnkzOXRLR2xOQ244Mkc1OWgxUkQrazhId0JQUC9CL25tQUw2UGJvbHJvTDl2Rk1hbkxsMlpYWHhnMXpyL0twTHdFVTl1Y0MiLCJleHAiOjE3MzgzMDM0MTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.-Q3-1JWlDAIXyVol5bI56O2gWxdDPwDNF5Ys7e178No</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="3da5c7e8-e5f1-4aae-8dc6-39bb7e008f27"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ac3c1049-29d8-482a-aa09-dfcded3e76d2" name="Contains"><con:configuration><token>location</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="50"/>
  <con:entry key="attributes" value="meta.location"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f5b3f341-e7db-4093-88f9-dd2c548a470c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="1a740cc0-6434-4317-8152-58d4741e76f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To verify that Child attributes are supported for Attributes 'displayName' in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="68bd5982-46ab-40ab-9b3a-bb1b9a51ec7a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJwMHpCVjJ2a3FiTVJPVXZRSStYUkdveHpTTFNQOFpzcFhhcFMwNzIyWDNwNjhLaWluaTNueXcvWGZMbHZuRE82aVpyNjhGcm1lMUhqWFkycGZOSGtvM3pKRjcwUUkxVXVJUXhrQ1gvV01md05kVzRTdGxGOUlnRWZKcHJrSjlKcE5QdW9xTTM0WmlxaitoU3J1Mlo3QzRqUEsvR1ErOTlYWVZUMDlBTE51SGIvOWZJTGF1b2VEV0kzeFkyOSs3WFciLCJleHAiOjE3MzgzMDM0MTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.BfvcPVH8U_Bux0shTsQB7li9_U0Ec_VQ19aed1GqCQI</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="8ca55b7a-543e-4a3a-b3b3-ceb6fbb28c7e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c71b468b-b209-4d66-b65a-a19a3ada415b" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info jsonReqObject

def actualAttribute = context.testCase.getPropertyValue("attributes")
//log.info actualAttribute
//def dName = context.testCase.getPropertyValue("pathName")
//def extId = context.testCase.getPropertyValue("groupExternalId")
// log.info extId
def GroupArrayLength = jsonObject.Resources.size()
//log.info GroupArrayLength
//List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    //list.add(jsonObject.Resources[i].pathName)
     assert  jsonObject.Resources[i] != actualAttribute
   // log.info id
    //list1.add(jsonObject.Resources[i].groupExternalId)
    //assert id!=actualAttribute
    //log.info list5[i]
//    if(  list1[i]!=extId ){
//        log.info "Input query filter not found"
//        assert 
//      //context.getTestRunner().fail()
//    }
//    else{
//        log.error "input query filter is found"
//    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="64e94eb4-06ff-449d-89f4-e9abd6f27316" name="Contains" disabled="true"><con:configuration><token>resourceType</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="meta.resourceType"/>
  <con:entry key="userName" value="userName eq &quot;${#TestCase#userName}&quot;"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8b7bfe77-15fe-48cb-ac06-22c2c22630a9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>excludedAttributes</con:name><con:value/></con:property><con:property><con:name>attributes</con:name><con:value>meta.resourceType</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="0c9842b5-5e27-4df9-83cf-5699a2be547a" name="GetSCIMGroup-LogicalOperators TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ee0a7702-2baf-44fd-8070-beec56b81c67" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify response for attribute &quot;displayName&quot; with valid Operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="398a93df-01b8-4570-8112-3e560136b7e6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWVVJNaG1lMHBGaElESExMNnlhTkprMnlZOUxDb1ZyVFZVWXF6YWVkL3RoYURoakVtekFTQlRublFEWWgrMVhqSnd0MVVPNk0raTd1WUlCd2FRU3U3My9WdFl4OUZ6ZFJUZ3dCSk56UlZ6SmZ1L1pwemRlQlA4RHRhbVkwYnFvOTZBNXJ6TXZMVUMrUXl2cUVTUWFsZFdBTGV2enhLZzRzT2tjV0p2LzIwbnNJR3dGL0pRWkFnVHhEY1RsNlkzYkQiLCJleHAiOjE3MzgzMDM0MjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.jEsZ-bhylMg61eI4H7KQg1bPj0uiew2Pv_C5tEPs0Rw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="28aabb47-ab69-427f-905b-90e087761663"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="696ce0c7-94b7-48a7-a7ac-147e56d6ed30"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="771c15c9-e631-4e31-9f46-b1418cd6c75a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3da513ef-2535-45b7-bbf7-cb4de6720ed4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_c7Gth</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>05278722-664d-4616-b4ee-316542d68567</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_c7Gth</con:value></con:property></con:properties></con:testCase><con:testCase id="0fba8240-4b3c-4272-90cc-0c01345c47c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To Verify response for attribute &quot;displayName&quot; with valid Operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="968486d2-6c47-4ba1-bf60-6de449c745a8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJuazV6QWtlMWliSThXMENLTlZhTkE5cUVIS1lDeHlrdXBQZnc0ZmFUak1UcXBkTW1JNmN5YTEybmhnUmhBR3JoREJxSDBmdTFLbm1kNkVmMlBDSm1qNzlLVytTbzBraUJ0d1JydDNSU0ZvS2pjUEY2SDNrT3hWdTZtUXpReE1yUVZnU2g5ZG1qcHB3M2dRZFZLSnNSZ0hidGdUZVJ2WjBGZ25qVWxwSVJDY2JBalJLYk1HL1JkYWFkSEdRS3ZWamciLCJleHAiOjE3MzgzMDM0MjgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.CTCicgvpGcsrsB1DWO8lH0KgyTJVUXHUGhAGjrrdyCM</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="57130feb-69c5-4c86-91ad-c0dac2dd72bc"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="40b73e9b-b365-4668-aebb-4b96baaf51fb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="7b54660f-7dbd-4e76-b01a-be6f37739a3c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName ne &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="22"/>
  <con:entry key="startindex" value="1"/>
  <con:entry key="count" value="50"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1a898d06-d74d-4841-b294-d5b13e8a12a3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_bLalV</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_bLalV</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>4bac907d-68ab-4d39-b705-84d156331568</con:value></con:property></con:properties></con:testCase><con:testCase id="e48411ea-db0c-41b9-b0a9-0d6906391be7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify response for attribute &quot;displayName&quot; with valid Operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b0ca2202-fd61-48b9-a5ec-868513880343"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJoaVY3emp1R3ZYNWxScENiaXY0VXdLYnU5UFJnRnhFbGV1L2QvR0VLWnVTMEZGOEVDSWQ1U3c1dzNzbUxSdytkUlRkNnpSVGtOS2o4RU10SnV6OVBpcXl4ZGFTMWM5QzUwb1VwQ1oxSyswYm1uSVBWRlAyblpqQ3FUZldhUkFmVlJmLzIyMkFDRE9lMXM3cVRlazVjQTBkUjlZYmNsTlAxRTNkc05ZU29nRHE5cWZDVGowckhiL0FIUi9Hd2NDVXQiLCJleHAiOjE3MzgzMDM0MzEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zUvaHktU_KHYCJdul-WgaOUY7NjkJvXf1Vn_Eaqs6AU</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4035338c-baf3-4a4c-a785-d5fa999eb086"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2d0887e6-3e31-44c3-a0fc-2f46df50aaeb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="a7514b2b-77f8-4820-9377-27bf32337b88"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName co &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="40"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5b63b7a9-3ad7-402f-b3e1-4acf49021465"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_4MV32</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_4MV32</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>3e3f8f2e-a7e5-4118-93c1-0d9da2fe1abb</con:value></con:property></con:properties></con:testCase><con:testCase id="07c4aec1-8553-497d-a226-0249c7e8d8ba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify response for attribute &quot;displayName&quot; with valid Operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d24f4231-e733-4177-8b46-06eb8b8c6857"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5cHE0VExYaHdzbXNpS2x4eThMYzR3UGQ3TUY3U0RVNWMwWHdMNklsRkxVaXB6cVZjbTVHbmZXZDFtOVRSbE9yZU5USmpnSVdyTWlUc2RxWGVDZktqL29SMWRSODB1OTZMZ2pnVzZaY1BEUWhDOWZtS0pId0dSRHJ2MVBFdEVNVjJBWW5oQ0tRMFZScUFkTmxGNlhoS2dFSFdZY2xNeWZHSTZjRVJDajV6aC9aQUdXbTVTTXRoRk1xVkdWWVUwbUsiLCJleHAiOjE3MzgzMDM0MzYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.psODmfV2aTpTMDXSvPN0h8dlIBqebJfLlF-r3WKlPtU</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bdb867ce-f16d-4917-99fd-c1c6b0ed99bf"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="dc7265b7-0c04-4726-aaae-13ef6e8fd25e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="df30f291-15f9-467a-a08b-bb81378a7ab9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName sw &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="2"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="54f16df6-dbc0-4cd4-b9fb-2db1371a021f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_tyolm</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_tyolm</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>cbf2279a-f56f-4bea-bc0f-c0509c860a7c</con:value></con:property></con:properties></con:testCase><con:testCase id="42a6e6b4-0794-4295-bf9c-47ae1d06d794" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To Verify response for attribute &quot;displayName&quot; with valid Operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bd30abf4-29ad-423e-a09d-e07d442b986b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrOThJWEtMQzE5WWR6a1d5dkwydnJjTWp5d2FiblJhRnBub20rNVgrQVlTNFVnalpKdk8raWFZWEJVdkxrV25WU0lhN2lhY0JTeUxkS0FHZW9meWRrV0FjdEd4N2xGTHYxQWJ0bFE0Yi9iRkNGamsyaTRZQjJFUnVYNElNZmJMY3k0NXozNmtlT2hmNjY2a1E2T3luTTdMUklqcHlwVDRKYW1zWkRDdHlsSGxaVndhRWZxbHNZSjd6WHJ6RkFPc3oiLCJleHAiOjE3MzgzMDM0MzksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.aZSsxFdiMhyJ8UGnyrc7VKt9-Sbxf8dQP1ig_g6Rl9E</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0b535157-5559-400a-8e02-3088f7232227"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="252b1ce5-a63b-476a-bbbc-4282c412d2dc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="fab77175-aab8-402e-8a9f-be63749eed75"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName ew &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="2"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="239918df-3304-4a58-92cd-da3eca2ebc4a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_91ANX</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_91ANX</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>4c453989-1da5-41b8-b16b-906d1434488d</con:value></con:property></con:properties></con:testCase><con:testCase id="b82054fb-f27a-4579-9a38-60e9363f737b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To verify the response for attribute &quot;externalId&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="28bafc5d-8c20-44e1-8136-20e1818d7ed3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJlYnBCWitla2dSMGxpbTJyb014MVFjb1JKeTlaZzBGTjc2ekE0YTVxMFVhM1JRejNHM05aSngxVE5Zd05ZWjhlNCt1ZlJYTlBON0lrTXM3ZC9TZUNlVkgvdk16UytFQnhrVC9iM1RqbGdwQUtjNlBGKzZZM1ZDSnBhWHFTVjUvcmM4WEl1eWxQZ0wxS2JkQ3R4WndTeE9vWmpTWXF2SXM0K09QczgrNGdvR3MvSno5dGNDKzFuMWFVTkd5aVEwbXEiLCJleHAiOjE3MzgzMDM0NDMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.rZdboYnJ0cUeYPcO4B4-f9ljaQU7cNp8XQsayEMHlHI</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="88bd7617-3558-48b2-8606-e799878943cf"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="94aad351-76f0-43ba-9bda-052007d14d7f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="9dbc428c-2db1-49c2-98d2-850388b9c6d8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId eq &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b7e36dcc-8ce2-4606-94ff-2b76edc1b6ee"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>pathname</con:name><con:value>andRGBMT</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_l2rgB</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>2ad24291-cc1d-47d6-a471-02edf0bebe3e</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_l2rgB</con:value></con:property></con:properties></con:testCase><con:testCase id="9f30b6be-9a1d-4bfb-8acc-99e750a77a82" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To verify the response for attribute &quot;externalId&quot; with valid operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0265f24a-c12e-43f6-bbf2-4ad64fa18a16"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWRTBvRnIrUTlIdUhpeGxDMnlUTHBRcnBIYWRKMDVBWnFXcGYvUFYya2pLcTNtWG1nTHBsYmVuNWNxOEdyNnM3VDJydW5Pc3J5RFlDbWxuZkh6TU5hY01iYlUvQ01mT1E2dVY0KzV5WkJueDRNQTErOGI0aDBUVndINzFOSVdML1dQV0JRTDlWeGdYS1R3NmdhTWlZUkgwOUFxcDZLckduZ1hibmxWeHFtSTNTdmI2ZXJnVC9JWWtVMThNVFpXNWEiLCJleHAiOjE3MzgzMDM0NDcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.DGa_GlhH1xmTbeDJfBxYFb1MPDcfrLks852Jqd45ZBQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="abe324ac-5932-4407-90c9-eec6635da4c3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="fa4505a2-04ac-447c-a096-32b6a25f1989"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="9d8142ec-ded6-4ca0-88b0-dfff1a6c135f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId ne &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="startindex" value="2"/>
  <con:entry key="count" value="43"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9cde87b8-bd94-4f78-9898-0a68b13eff8b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_rVjOV</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_rVjOV</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>e5178b77-d542-45d5-8f29-2eb6a384b3de</con:value></con:property></con:properties></con:testCase><con:testCase id="6be36500-4f44-4e4c-bd01-66a7a5c113c3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08-To verify the response for attribute &quot;externalId&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f3efd79d-d191-4b40-9c94-a486e781fed4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIxSmhpbjdaQk1ISHpMNmJuVTIxZGh2cmpqdXZxc3BuK2JIeER0MUdsU0VhTXIvQmZ4anV2TThpY0VGc2duS0QvdEpUZ3pyNGdORTNucDFBMnorVzNEdHVQZVZlSUlURmtwbldSOEdGcnJiVGRVQ3dub0Iya29zNVk1VTlGUmVNNTR2YUV0VTY0ZGtvZjJpa2lpZFJ2WkdhTzBDQTNMbys2Q2QxTlV3c0haWWJ0TXh6aE9SdzhLMGphcFVEUFFuSjIiLCJleHAiOjE3MzgzMDM0NTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.vWGwh7ti_aZfVrgsgnhEwa3iaFv07LD7eC1C8abIyOg</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6d7bbcd8-2e71-4a00-a08e-34ccda76d99b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="eaa13ed0-eeed-490a-9b51-f0fb12cf5816"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="4d80174e-d187-4949-bec5-db93f6545e12"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId co &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1685970e-ca8f-4655-8d6c-ce19af4b23e6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_PTJ1G</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_PTJ1G</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>3b64392e-c978-4888-b7f9-b53debc79375</con:value></con:property></con:properties></con:testCase><con:testCase id="3f02d53f-c172-4f86-a233-56bd3bed932b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09-To verify the response for attribute &quot;externalId&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0517c8e6-ed4f-48f0-83ca-3009bf49131d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5WGpNWVJ3d29DaWtZRi9RYUNCQzQ0eEJidlNFVnREMXRIRHFPWHMrNFMxUW5DZzE0T1kyV1R3eWpKMHlwMVpYVGxHYUN2S2txSHl2ZmVjU2tmRXk5Nmk5YTRZU2RYbFhPcjZBOC9CZllBNE10ckE2U25ockdmUGxhRDQ5Nm5rU2NpM3JvSHc2ODFscHIxSjRQSGh0Q01sTXlmanliSFovQzhJek02YVIyM3pTTk1rVXZHbTZBMWc3MFJjM1BURDciLCJleHAiOjE3MzgzMDM0NTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.SUtk2d-SzkfDmGDL8QrGnMJOzEDeXqNsrvu7HD6FBWE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7a5852ae-a9e8-4ab4-8b26-63a6896ac2a4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2aea3626-31ed-47c4-8bb9-b6b250a785c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="bd8afc43-7c76-4ed5-b074-4761807ccd4b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId sw &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4e0864a6-f4d8-422a-8edc-6a8ebc974893"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_GHG2x</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_GHG2x</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>69125575-2bed-4e42-b255-f32ea07d2a9c</con:value></con:property></con:properties></con:testCase><con:testCase id="56955a7e-8d1c-4528-8fd8-80329f7df595" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To verify the response for attribute &quot;externalId&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0da2627e-330b-4244-b89c-5fcc222e4827"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWSzZPRXZpZ0pRam53MHk4emZ5OGY2UFpTR2NwQWw2WmI3SkdSQUNscEdxeW1BcE1JWGpLaG5zcGxJMGN2cnRnUEdDRHlnRHJKQjNBeTJGc25id0VPcXM1enQxZHJINE56dnpGSnBHMHZLYWF1M1ZBZUV0VjFJNllwaEpMRlQwZ21nRjRPUjdHL2h5ZlZiUjhJY2hlZXE2cVdnY1NvT1c0S0kxb0trMTliM0lNUGF5VXpDcWhlRzJLL2c2OG1RVEUiLCJleHAiOjE3MzgzMDM0NTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.OoLJHQsCA8mD7MoAIBgoHgGG0wqiP9-dtQmDVyH7ZXQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bc561fce-c473-4c8d-8daa-de77809192d0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="af83d97f-52ad-4f08-97ea-b08f15f050d1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="a04126c9-fb23-4c7a-a47e-921cf5480c78"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId ew &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="21"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a9bcf99f-8928-4e10-8637-40cd16a82783"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_BRYUf</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_BRYUf</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>9fc3e0d7-aeda-4e7e-87d7-d75c5c159668</con:value></con:property></con:properties></con:testCase><con:testCase id="83ee018c-f210-4767-8073-6268f89426a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11-To verify that &quot;displayName&quot; and &quot;externalId&quot; will support all filters with logical operators (AND)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="63085ef6-c120-4d66-957a-3668bd58af70"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBTG1NMWY3c2ZBVDV6UHhoR0orTStJNkc3NjVMUEpwVnoyQ0FwbG5ja2NWd3pudzN6a2RCaGdMWUUvRFpYckpkcXhUcVRHTTJ0QmdJZW9yWkpndUxScU05dVRZakFxeDNBK2g1NWdKTXY0Z242YWtObnlQMmV4UUNvOUlTVDhtUkpKNlJydFNlaHprNEhZMW1SbzhaanVJZVIzb3kwYkdYR1ExelY5cTFSemV0STRtdmdxZVUzV1NWZ25lRE5weHgiLCJleHAiOjE3MzgzMDM0NjMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Lv9AR3ro6v1wzO89kHeglGTAaIODL1kq5b_dmEuhsno</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="00bf0698-cd9d-4f6e-8542-918875bda127"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="b3fef7d3-3a44-4d5a-89eb-6e5ee360b435"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="66a32e57-683c-4396-9a62-fba8ed49207b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) and (externalId eq &quot;${#TestCase#groupExtId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="aa851a1a-485a-45da-bd15-cd1019da1430"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_SgxgF</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_SgxgF</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>bb141440-b507-435f-92fb-3f00408afbcc</con:value></con:property></con:properties></con:testCase><con:testCase id="4389aaf3-cdcd-4226-ac66-aa2aebc5f724" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12-To verify that &quot;displayName&quot; and &quot;externalId&quot; will support all filters with logical operators (OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9bd55bba-e482-4aad-94c7-6d6ae76449be"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJwbUViVlBiYU5VR1dRZzM2UXJtUlBLaXVkZW0zc0lYZDhWU0h6TEt5NWtKeGJZWTdjTE1CZGhUY0ZPOFNQMC9IcEtWQ2lJVGJJWFN2bWIzWWJqMWVXNTFHaitSUkJaRzBuNzJPM3JXdmg3bzlGVnlQQUtsVWgzRkVDUmZhUFZMTUpDekdadkxMYmNNUVFrci9nVWdGOHNxNWtRTTJiTXRJTjVzSURsaWxGK0JSY3pzdnNMOUROUlZTTHExekZ1dGoiLCJleHAiOjE3MzgzMDM0NjYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Hco6nWqoc3vsVRG61V3Kt4Gf01kWs_ocVeynU-nHoG8</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9e06970c-7711-4ccc-9ec7-35212e4f52b3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="5f6492a4-db22-4037-8434-295a4ed4b68c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="0968d112-97ee-4dd9-b79d-90fd6fbf8783"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) or  (externalId eq &quot;${#TestCase#groupExtId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="01db99d0-a964-4de2-bcc4-24ddfffa5f41"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_xttrR</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_xttrR</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>572d2239-e557-4d3d-a301-d4d936ad30cb</con:value></con:property></con:properties></con:testCase><con:testCase id="22ab22b1-a9a2-4cbe-95fd-ab8992d7caba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13-To verify that logical operators (AND,OR) are case-insensitive" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9327807a-d3d0-445f-850e-eca8bd015930"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJseUFkeUVsOWlqNXRHdnBPa0xla2ZzdjY2WndCV0ZGREFJNWhXM2pseHcyUU9rYzk5UlBGTGsvZE5kLzI0S0hFVE1GUzNvTXVGUnlxVnYweXRHVTdCRVBEcTBGOG9FQ3JhV0Y4UGF0V1dqVHFQSnF6QUtwV0IzMi9ncklTOUI1UTF4ODJoSjZaQ3ZYMlplT3loaXFHRzJqcFBEUmozaTM4UERtZk00Tng3ZHVLNWVLeW1VczZOK2VvWGp1dkJVcm0iLCJleHAiOjE3MzgzMDM0NzAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Tx7Gc1M6cMiqNilZSeF16R_SDThxrhPNqiSRy5HL5VY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="649db14c-930f-4022-b4be-1be56221f32a"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="95231e32-cc8f-485c-95f9-05fc6be72586"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="1131a4de-9488-47f7-951e-30e2d7b741f6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) And  (externalId eq &quot;${#TestCase#groupExtId}&quot;) "/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="09d8bec4-18c0-4681-85e5-341ab8b4bc18"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Pbbno</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Pbbno</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>92d7db2e-501f-4aea-beb9-a3e3e7d60b8e</con:value></con:property></con:properties></con:testCase><con:testCase id="bce052b1-772b-4717-8631-ba023a0f5f75" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14-To verify the response when invalid logic operators are given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="551f67ae-b086-4169-9159-48c772fcbcab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrb3BYNUQ1SjdOY1drY2ZMbnBHdkZVdmVWZWtpRWtvZjl6ODN4N0pWaVNDdjBqbFFubld1WXA1c3Bwa3JYNlh6amE5b0pZYW5zQnBveUZtZGtrdWFtd3I3dGtoeXBNc2xWRHMxZnNGNHFlaTdSWU8xZkk1MWJpWW9OOGExYmd0TFFTSXk4RFNOMytTL29HVXZUZS95UGZJUG5keVRHNlB2UFl2VHlNOHgyVGg0UDQ1SUhhRDBneHJkRi94TEhFYnoiLCJleHAiOjE3MzgzMDM0NzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.KGog_kvr-x6UQEruSQhS4wZA9GCGHs53ZTQRTBoclRg</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f5dcdb85-f407-4a64-9038-bc5cbeebd28d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="04f08633-0d79-402e-99fe-e4c0082fed8e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="1fd305fd-d339-4e89-91c6-5cea6896600e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) hyj (externalId eq &quot;${#TestCase#groupExtId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="52e52db7-542a-4bed-b69e-d775e152472b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Jluq7</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Jluq7</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>6fc6b8e8-2ab1-45db-9ba7-fd0b83fc8be2</con:value></con:property></con:properties></con:testCase><con:testCase id="80e14ecf-72e3-4db9-b16e-d662fe1d64e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15-To Verify response when Invalid Operator given in filter for &quot;displayName&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="83b228d6-8e1c-47e4-9347-3f1216b9aa4f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJTTmUyQlBDVlQvMWpPKy9YMUllc0o0K1lJWGU2K1A3eVhTaHMrVHlzM2xubmF3bzd0L1RDTkthbXRyODNzMmIvU2V5NnIxN1J5U0tUcDFiUGc4ZWg1aXNoZTlFR0hoWjQxRGU2Z2tMWWRrN1J1R3ZuU2xmOS9kbEdsTkpQWmZQTjlyR0htQnBYNVBGamdSSkEvVFY3R3JId3VGcmJmWWNYbC80REswTVhwWnJGd1hKU3Bmemk1WVJsTnMwMFVtNDMiLCJleHAiOjE3MzgzMDM0NzgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.dYOJZXFUrTSuqt-HrnJfKXZiTLQdkXM7erHkc0CeG_I</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="41305920-8366-405d-a8bc-885cd51cbafd"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="0e2e0a8a-df2e-4bff-81f2-094e3e0cb937"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="39c59002-d127-4399-8b50-c2719678624d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null
//
//// Verify First/Last name not null
//def fName = jsonObject.Resources.name[0].givenName
//def lName = jsonObject.Resources.name[0].familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName re &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="69daaafb-e62c-499a-9c09-f59882c67804"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_UnLKw</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_UnLKw</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>b987dc80-8721-45c7-bd9b-7de46cf49075</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="13d0bebc-5c1f-4cc6-839b-24eebe99b83c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16-To verify the response for attribute &quot;externalId&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="164e8eb6-ac99-4685-bf04-cd37acd56253"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ1NFNJZkRNUWVaUVVGMTF6NmIxLzRYTjNlcHhudVVlczBmejFnU1krMnNJUmRRNmRnWHZ5MFFYaHlsLzVaTTNXTE13RmZQclkwVWJsZWZxWFc3NGV3Z1pjSFZDLzlEd2pjSW91NVBvdmtWSFk4NU9hdmRTLy95Q3VRSmxTOUJMcFdoV3Q0dCtTSW01YThqblJyVmJoaFFBZDVwQnVmKytVMlR2V2xyc0lyTVUxTDA0S3pnSGxZUFpLUmZoSU9GQW0iLCJleHAiOjE3MzgzMDM0ODMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.IA7o0DoZHUjtWvFAQ6czRJKRhssNNHzwx_QswjS7Jrs</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9a10da3e-a1f1-4fd8-b5b1-460609d4331e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="a04cdd66-ec5f-4c79-974a-f9441b41417c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="bbb1f3b9-342e-4083-978e-b46cbd2f831f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId op &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="aa8768a3-b368-493f-903a-08b5d0e37c8b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_XQIee</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_XQIee</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>14900dd1-b606-4489-95aa-a5d5f718e34a</con:value></con:property></con:properties></con:testCase><con:testCase id="4142e6b0-730c-4a8a-917f-b2699014f67b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17-To verify response for attribute &quot;id&quot; with operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1097c1b8-2f30-43f3-b938-968f7b76e0a8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJoMkdETk1wbnh6MkZIbmNETXFwTDFybndEN0Z4QWM0WVkxM2d1ZXVNd01HOC91ZS83bXlVenVYMk1RbkR4enp3eUNmaTMzWDhBZEtxSzFuRDgwdEJrQ0hHeEFUMk5JMk1vUzFydGZJcXI4WnJYTnU3bjJDUzRHVVpEVlJnNzdvUitNYUYvYW5BUmtpVHNaY3JYY2FRbllVZ0VsUk9rT01aMEFHQTMvbG1LSW5acXduR2Nvakg5eE9zcXByaDlaT3QiLCJleHAiOjE3MzgzMDM0ODcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.IZdmcZo0HbT5m0B-t78WqmExm-rBDIu1f2AVpR61Mdc</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a41f7506-6d0d-4dcb-97fb-8ca4ed9f7038"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="d0c40cad-6307-46d3-ae75-dd6dacdd157c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="32c06351-b48d-49c7-ad37-298ecf807f61"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def dName = context.testCase.getPropertyValue("pathName")
//def groupId = context.testCase.getPropertyValue("internalGroupId")
//context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the GroupID for Group
def ActualGroupID = jsonObject.Resources.id[0]
def ExpectedGroupID = context.testCase.getPropertyValue("internalGroupId")
log.info ActualGroupID
assert ActualGroupID ==ExpectedGroupID



//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="id eq &quot;${#TestCase#internalGroupId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cfdbc34c-400c-4f66-88b6-eef8763de2f3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_3e2Ol</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_3e2Ol</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>3398a9a1-f942-4b15-931f-5cf1c49fd6c6</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="b0af889f-3a59-49ab-828c-c779c8f1bc03" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18-To verify response for attribute &quot;members&quot; with operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="59bcd58c-6df1-4fb2-96d4-45a6ad4d5405"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJmTEpaRUIxK3U4V2o0Vk1hTmlsQk4xYWMyQ3JVNEdld2RuS2xBbThaVzQ4MXJYdE1vTy9jMllkUU5YcFNPdDZRMFBzU2t5b0d1Z2ZDRDRmR252VFlDRVMxODFWZEdTYUVMVGtURWpYQUIvWVRIMXU5dXU5WnZ4S0RySzUya2xWUjRZdGN2bEJvRnZsR0xoS0JaNnppNXVoelpWNURMZXhRaExndVNJZHBOVmhielMzaE5MSVh1QjBKc0NyZ0dTZHkiLCJleHAiOjE3MzgzMDM0OTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.hdl7Rwx7chRpmdlIRc1PlhC8jqfELAzpPSKbF34UUGY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a320f5f2-3750-4916-bcc2-13f972173bea"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)


// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="61087e24-7499-4a22-bf32-cea589c9cf32"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [
        {
            
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="e5a6c1a4-b8c7-49f0-8918-4d79a5ab1b92"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   ,
    "members": [
        {
            "value":"${#TestCase#internalUserId}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="caf79e31-0cb0-49d5-af74-f652e9e61011"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="members.value eq &quot;${#TestCase#internalUserId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4548ae8e-fd14-4d2b-8a68-056131aa3e6f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalGroupId</con:name><con:value>723987ea-ce46-4f1c-9a15-9c3033576397</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_5V5ln</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_5V5ln</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5V5ln</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_5V5ln</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>018884d6-b6cb-4234-bf07-96937106f292</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="769e8ec2-6efb-467c-afd5-75473b15655b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19-To verify response for attribute &quot;id&quot; with operators (ne,co,sw,ew)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4ea76060-2040-4a35-ab10-a9c37dbe53f7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJNYmhPRWZ1QXFNMzRRaXN1Tjh3c2pGQ010N2VCZVlRWmp2MmdlWnI0WnppZVNJREh0TWNWYjJ4QTdRZGZaYXJ6WXl1ZEtVbGdNOG9rWFFldkRTRkdPWkhDMXQzcTBDR0tmZlZTbXVLTjZYNUxNMk00Q3hIalI2TWMydm0veUpJUkdmcDgwRUgzbEFsbjBwWXFFU0N6NFlTMjlySXBaV1cyQk9pd1BmTitpeEk9IiwiZXhwIjoxNzM4MzAzNDk0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.eqIPjzY-dLNxVgPQmdMIPwDOZBCRoNdd_fCg9Wb8d-c</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6000373b-fe32-4dd9-a3f6-0aa0607a051c"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="316676c5-f8d9-4f54-a4b1-1f19cdae0749"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="32ab2f23-bd07-4119-9b45-07f7a131be02"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="id sw &quot;${#TestCase#internalGroupId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="affd1c23-0fea-4074-8017-631cbae2d263"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>8777fac0-f420-4c2c-8d15-d0ac330b8fb6</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Ga7t5</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Ga7t5</con:value></con:property></con:properties></con:testCase><con:testCase id="0b625f58-b219-43ea-a9bd-fbf1a1418927" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20-To verify response for attribute &quot;members&quot; with operators (ne,co,sw,ew)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3b3f1e58-6e90-43c0-85cd-ffea32895ced"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJNR0hEa293ZXl1MXFaMHBiVjRiVTByTWZURnF3OVdNZDFGUjNmaFN1UkgrbzBFVkx0L0ltUVI3RFdaTjlUdFFXbC9QcnQ0R3NsdVk3NkdCcklUeTFEeXM1SllleGc3cVR1dTRQVTVzUHhGbTBVTFBuNXlueVVCZ3dmWkpaN0xiQWJYcHBVbEZtQ3hWU0xYRUhnWW5INGpYQjZHUEVBN3g3SUZ3bEgwS3M3clkvZ25mTS9FdTRKeERKeGJKUHhVMXUiLCJleHAiOjE3MzgzMDM0OTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.czHLYzG1OPcOFrxMvra5ZYkXKHl9ZP3poG3bcF7iaGk</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="01fd5393-6f7a-45d4-95d6-44be689427e1"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)


// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="0e392ac1-6e10-4c6d-878d-af460594830d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [
        {
            
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="93973d8d-86b3-46c2-8a3b-3757b784c2ea"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   ,
    "members": [
        {
            "value":"${#TestCase#internalUserId}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="d77c0ae6-e303-4411-b5a1-65a14fc9b929"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="members.value co &quot;${#TestCase#internalUserId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cf524bb0-4ed5-4dbf-b4ca-ca8be6f0aa9c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>memberId</con:name><con:value>4055</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wZ43P</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_wZ43P</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_wZ43P</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_wZ43P</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>scim/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7be5ea91-a020-4fe7-b05c-1940443cb421</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>bf04abc2-6823-4efd-b2d5-ebb4e90f2f8b</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="53acf563-2ded-4fa7-8fc5-f0f26aa7f09d" name="GetAllSCIMGroups Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="89658529-2041-47f9-8978-ed6ccb02ced8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7205-To Verify GetAll Groups (active only) exist in System" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4eb274fb-9122-4334-a83b-4932af3410a3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJyVTJmTEpvQko2ekNmZzA3THBPbTJFN3RnZGVSYW5nYXZuQStDSDBtRnJMR1g2S2ozZVFoelVXS2RqQUdkNitLNUVmak9RV3VwcnZESnZZVVNxbDEwM3hqUDR0bnpEamZrNGdUWGlDUDlYMlNVQ0V2amxrSDBSaE9QUjhoZnlsUzVoWndrb1JKQTRpZ1hjTGN3dnR6NEdpbTBsMXMzUHJ1ODZhaDVKeC82WC8zUzBpUllpcG5iUTlENTBTem9xSTIiLCJleHAiOjE3MzgzMDM1MDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.7URMNUuP2NUE2mD8Uw5OP58fvGGaNNK8zFLrpP-2KQU</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_ALL_GROUPS" id="a45ec05e-829c-42d1-8795-fb42b1a90adc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_ALL_GROUPS" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify displayName not null
def dName = jsonObject.Resources.displayName[0]
assert dName != null
assert dName != " "

// Verify externalId not null
def extId = jsonObject.Resources.externalId[0]
assert extId != null
assert extId != " "

//def dName = context.testCase.getPropertyValue("displayName")
//def gName = context.testCase.getPropertyValue("firstName")
//def fName = context.testCase.getPropertyValue("lastName")
//def tel = context.testCase.getPropertyValue("telephone")
//def mobile = context.testCase.getPropertyValue("mobile")
//def email = context.testCase.getPropertyValue("email")
//def accountActive = context.testCase.getPropertyValue("accountActive")    
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>()
List<String> list1 = new ArrayList<String>()
//List<String> list2 = new ArrayList<String>();
//List<String> list3 = new ArrayList<String>();
//List<String> list4 = new ArrayList<String>();
//List<String> list5 = new ArrayList<String>();
//List<String> list6 = new ArrayList<String>();
for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].displayName)
    list1.add(jsonObject.Resources[i].externalId)
//    list2.add(jsonObject.Resources[i].name.familyName)    
//    list3.add(jsonObject.Resources[i].active.toString())
//    list4.add(jsonObject.Resources[i].emails[i].value.toString())
//    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="startindex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>count</con:entry><con:entry>startindex</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d419d32a-b630-4464-8671-0f8f0c018611"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="5f1d5cca-539f-4ded-a828-1dc4cad13ec5" name="DeleteSCIMGroup TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="97d601f2-5055-402e-8c04-7fdf11c1b6e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify that correct response is shown when Group is deleted" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ef8674bd-2445-4335-87a7-f019ff18fc54"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJuMVRGNTN0NVRGU01DUkJOY2JFa1hUVlZRSUpUeWFKb0J4NlIwVWJrbFE5Y3FBYjBMVUdyKzRQK2NCdmptNUwzME8zdzJGalV4Z1Y5MHZ2eGtEb1hvbnNHUldiTzNsWEZwblprTS9HUGxIaENMSEVpMCsyRFhpMWNQSXQ4RVNmdzcwV3RJeXIycHdRNWVRRTY4RGJPN1lDdzZjUjlJUisxUVo5dEQwVDdiOWs9IiwiZXhwIjoxNzM4MzAzNTEyLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.aGo5EumUWscVGqCfEi-V_ZQVjdwzbGqAWm_vJ-7Na5Y</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1fccbe8c-6b34-4a44-a05f-11e797e8dd32"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2076c2bf-045e-42ae-b3d5-3c05587f7e61"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="23a1e4a5-3416-4c7b-9172-1f4628d7d417"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e75c8753-31f8-4039-aac7-b7fd6876387e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>937342c9-3c4e-495c-81d2-76013049f6e9</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_MudRy</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_MudRy</con:value></con:property></con:properties></con:testCase><con:testCase id="9dfa07da-f5a0-42fc-a218-881f4a275fae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify response on deleting a deleted Group" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="07bdfc1a-5c2f-445b-a363-95ee93319134"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrVUdHeStTcHFzN0lQWkJKOVQ2L1FSekd0bkI4WktQVzBEYjd2ZWR5R0ROeWttVnhrRW5iZVo4dkpsVE5zM3BMMFpVeWNaWlBoUlhCdytBcDNENXhTOGVTdVIyS2lXaEppWml4R1g3WHZTVHdTbXAxaDI5WHVRMjgzbVNZdkF5L3AzSzQ1OENJMFY0azk4WERVTE8rZENiTWFYekNKc3ZHV3c3TjU5YnBaMDl0akVVb0g4NW9TYzlJRENWcERaRjQiLCJleHAiOjE3MzgzMDM1MTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.SyKHzdKEo_Ho6WdmAXPkK03-rU1L8vWlbfsbjllNPlA</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="37d490d3-2b40-47cc-80ed-ccb5a8831fe5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="96d3721d-328a-44ec-a9a1-5f87ddf14c1b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="a071f460-a8d3-468c-b1fe-388ea28e78f6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP1" id="b3a9f995-458f-426e-99b5-a73adecb7ddc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="dc3ebffc-4c80-434d-ab78-7b8519fe529c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>fd5edd12-b854-4191-ab60-416e5ae4c74e</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_8Ka5y</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_8Ka5y</con:value></con:property></con:properties></con:testCase><con:testCase id="4c950272-dde7-425e-b4d9-72f013973134" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify that deleted group is not shown when we fetch group through GET endpoint" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ddd6b816-fdad-484f-b85a-9871952aa863"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJXT08xbzI2QThvY2hoKzQrZm5HV09oeWdPZFNaODFqRWRxc3NwMEdkRUEzMGE0R2pNNTZBdGFpSWcvcUZOZWJTTzZEOFZFSERjN2NzV2pkT3lQam9xd1NmTkdTdmRjT29Pb01oMWRZN2xxVlF0TUFIVmtjTlZIZkFBSzBsWW5uY25xS2JzOWZnSWtlTjFwWjFuaEF6WXNzb1poY0Q0TDBFVWFQdTY5RmZmR1JTZ29JUncwQitYU3JKZzI2ZTRhOFMiLCJleHAiOjE3MzgzMDM1MTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.jWTIa_WQqcGUmnnDlgLooa-ZN8kgjWvRrzKKT3MC0n4</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c8c5154a-a4ae-4dc3-89dd-9176de996c79"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="ffb3c23f-df86-4844-9b79-fed953dcad7a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="a4ed5f1e-be06-4d19-a988-86909e5c18f9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="7ec149fc-66b3-46c6-8a15-3c84edb97598"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="32620d0f-0ea8-47e6-ba36-d703eb97f3f8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>02267a93-86d6-4848-ab86-888103f1068c</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_gMXeE</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_gMXeE</con:value></con:property></con:properties></con:testCase><con:testCase id="89f7a7cf-4666-4656-9d49-0dd3fa60ba60" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-Delete Group | Verify that user is able to delete group containing '&amp;' character in display name" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="696af268-c922-49c7-8c29-dbec1b3a65c0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrcDAyempQTkxSUEZUVmo4clh3dlNqQmZlNUNvbDJoaEdGTWlZTXovSzNDaUZQZEpwVS8wZEc2MGhZVjNZYnowbzBURHZRN0s2aDZSak1Cc2t3ak9Vdm1Ed0J5NmE0ZnFHSGE4TEZldk00TEZIb3MyV0ZhM25SNU1qK3NTc2lpYmNnRE9BZUx0OWxsUWYwSFFLU1A3akNhelF0U3UrUXhaN01WRlpxWkNtc3g2SFhtdWRZRlgwdUxOUTc2TU84YzkiLCJleHAiOjE3MzgzMDM1MjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.9CTcAGYd4VTJiXkwVk5AemnZd3pWNei1i9XhpJLs7Ro</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="caf430ca-c63e-41ed-8735-9a8780dc31ef"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CreateGroup" id="b5884f02-1236-40ac-b862-fefaa203e751"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateGroup" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}"
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="90c9a4ae-d5cd-4066-97eb-0b497234329b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.meta.resourceType
//def userLocation = jsonObject.meta.location
//assert resourceType == "User"

// Verify userName not null
//def uName = jsonObject.userName
//assert uName != null

// Verify department is null
//def department = jsonObject.enterprise.User
//assert department = null


// Verify First/Last name not null
//def fName = jsonObject.name.givenName
//def lName = jsonObject.name.familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

//def ResponseHeaders = messageExchange.getResponseHeaders()
//def HttpCode = ResponseHeaders["#status#"]
//assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="7f07a998-02e8-47c2-bb5d-d077c09d17a6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8ac6ce92-54a1-453c-9601-b90426b302af"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>scim/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>d7394267-ac01-43b2-a893-77f618a1b492</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_EhD0d</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_EhD0d</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://scimqa.condecodev.com</con:endpoint></con:endpointStrategy><con:properties><con:property><con:name>customDomainURI</con:name><con:value>https://epqascimapimeastus.azure-api.net</con:value></con:property><con:property><con:name>tokenEndPoint</con:name><con:value>https://epturascimmaintenanceqa.azurewebsites.net</con:value></con:property><con:property><con:name>TenantId</con:name><con:value>0f2e6b6a-c35c-41aa-9b67-427b609b21ba</con:value></con:property><con:property><con:name>AuthSecret</con:name><con:value>MG9hYXg3OG81bDdmMXA2N3UxZDc6RHNlQlM4X19hTlBnX2hZMThYckYxQUN1ekRPWjFjT2tHTmJpV3NkVVFpWHo5Z1dxd0g1RWtVSXBidHZBQUNWUQ==</con:value></con:property><con:property><con:name>grant_type</con:name><con:value>client_credentials</con:value></con:property><con:property><con:name>scope</con:name><con:value>service</con:value></con:property><con:property><con:name>ACCESS_TOKEN</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkJBcXJpYmxZV3FtLzBGSEUyYmxoOU0ybEc2UThMRWpXQVpkdWMxZ1ZELzlPN29hVVNLTDRKeHk4a0tEWU93YkNUSDRoRUJ2UzVUTTJ5bGFEN1RubmJzemhOVmdJZFJUR1BBcEZOQnd0ZzBmNVJiSkVzMUo4Y0RlQk1vTlYxcEZhblVGelhBdENmN0JoR2NjRjNzSHFOWnpYZDh4am9pdm5xWmFncWNldjVjbHoyNmh6OE90VDYxU0V6SmVGL2VCVSIsImV4cCI6MTczNDc4NzUzOCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.vcV-nevZ8ijeYYB6NqG07H6yyzVJHyFRfeX8b2TACUE</con:value></con:property><con:property><con:name>Authorization</con:name><con:value>Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlQxU3QtZExUdnlXUmd4Ql82NzZ1OGtyWFMtSSJ9.eyJhdWQiOiI0YWU4ZmM2ZC1kNDJjLTQ0NzQtYjc0Ni1jN2FmNzYwMGNhMWMiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vYWRiNDhjYWEtMGIxNC00MjU2LWIxNzgtYTVlNTA4YzgwN2Y1L3YyLjAiLCJpYXQiOjE3MDMxNjM1NDgsIm5iZiI6MTcwMzE2MzU0OCwiZXhwIjoxNzAzMTY3NDQ4LCJhaW8iOiJFMlZnWUpDcldDd1lmNHJqOGZuUWovTEZYeWF4YlBiY1ZDTVU5VXBTVkhqdFBSYStOMjhCIiwiYXpwIjoiNGFlOGZjNmQtZDQyYy00NDc0LWI3NDYtYzdhZjc2MDBjYTFjIiwiYXpwYWNyIjoiMSIsInJoIjoiMC5BUzhBcW95MHJSUUxWa0t4ZUtYbENNZ0g5VzM4NkVvczFIUkV0MGJIcjNZQXloeXdBQUEuIiwidGlkIjoiYWRiNDhjYWEtMGIxNC00MjU2LWIxNzgtYTVlNTA4YzgwN2Y1IiwidXRpIjoiYlNSMjl1QVB3RTZyVU5MRExQaUlBQSIsInZlciI6IjIuMCJ9.U2P4EQ_bG8R8WUAbhXIszWJBcj86S5biRasU2p5SH6RvzWLdWwJLhFqdDiOk25Og4hNH1zptiPeEUlxjbo18Gk43FVAGv0nGLjbN38DnovffWq5Cqr2Z_EcSoC7n-_r5weE_24QpmG0Kh1-mtlgJ3ydVqEswWjbQqHjwCp9Q56FxtYom8vhumzVg35ddOZC4i9coIXzieYB3eTnr0b34Jbe7JEK0sTSiyjs4P4kUT91SaYvsI9x4nSJ62eeD4ybj-W9oG2MwTZiLXkEir7kSDGxecSpMoEjRKtuR9wnRA1uuLHJvU_Bxc5hB1RQiKGilb6hkWkWkXCLD_1Pk6YaVvg</con:value></con:property><con:property><con:name>getattributecode</con:name><con:value>9S15Bn7QjT8oOtx4vS_vT_7iVMVo-N2JFUBEkMaqJaQ0AzFu5thoRA==</con:value></con:property><con:property><con:name>schemasPatch</con:name><con:value>urn:ietf:params:scim:api:messages:2.0:PatchOp</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>