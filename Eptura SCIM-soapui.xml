<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0150f8a8-1831-4cdd-ae19-e1fdabe9194c" activeEnvironment="Default" name="Eptura SCIM" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="7db819ef-8227-455a-b057-c48911a198c5" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://epturascimqaapieastus.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://scimqa.condecodev.com</con:endpoint><con:endpoint>https://scimqamaintenance.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SCIM Token" path="/api/v1/token" id="858136ad-a1d9-432f-b3d0-7cb1b8ba5e6f"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value>${#Project#Authorization}</con:value><con:style>HEADER</con:style><con:default>${#Project#Authorization}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Token" id="7d167b41-b221-466a-9b19-7624ca5bb444" method="POST"><con:settings/><con:parameters><con:parameter><con:name>TenantId</con:name><con:value>${#Project#TenantId}</con:value><con:style>HEADER</con:style><con:default>${#Project#TenantId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>AuthSecret</con:name><con:value>${#Project#AuthSecret}</con:value><con:style>HEADER</con:style><con:default>${#Project#AuthSecret}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 500</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/mixed</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405 400 401</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://scimqatp.azurewebsites.net/api/V1/token">tok:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Token API" id="7ae85594-1bbf-45c7-9217-70003adcc6c8" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#tokenEndPoint}</con:endpoint><con:request/><con:originalUri>https://scimqatp.azurewebsites.net/api/V1/token</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>TenantId</con:entry><con:entry>AuthSecret</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CREATE_SCIM_USER" path="/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="CreateUser" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_SCIM_USER" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="UpdateUserForPut" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        },
        {
            "primary": false,
            "value": "testemail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
    "name": {
            "familyName": "USER",
            "givenName": "SCIM_UPDATE"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER" path="/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters/><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="GetAllUsers" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER_BY_ID" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>includeInactive</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="GetUserById" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_PATCH_SCIM_USER" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PATCH" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UpdateUserForPatch" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "name.familyName",
      "value": "Maheshwari"
    },
    {
      "op": "remove",
      "path": "phoneNumbers[\"value\" eq \"98765432134\"]"
    },
    {
      "op": "replace",
      "path": "emails",
      "value": [
        {
          "Primary": true,
          "Value": "abc@xyz.com"
        }
      ]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPSERT_TENANT_SETTINGS" path="/${#TestCase#TENANT_SETTINGS}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>default</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>scimclientid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="UpsertTenantSettings" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#maintenanceEndPoint}</con:endpoint><con:request>[
    {
      "SettingName": "UserType",
      "SettingValue": "0"
    }
]</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="default" value="true"/>
  <con:entry key="code" value="${#Project#upsertToken}"/>
  <con:entry key="scimclientid" value="${#Project#scimClientId}"/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>default</con:entry><con:entry>scimclientid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="CREATE_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="CreateGroup" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_SCHEMAS" path="/scim/${#TestCase#SCIM_SCHEMAS}" id="d1eec032-e3a7-4e11-9787-1c3b160f6810"><con:settings/><con:parameters/><con:method name="GET" id="c3acab8c-230e-4fe0-b11e-0b25f2aa38a6" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:scim="https://scimqa.condecodev.com/scim/">scim:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:scim="https://scimqa.condecodev.com/scim/">scim:Fault</con:element></con:representation><con:request name="GetSchemas" id="995f086b-d0c9-4afb-8911-0a647813fc91" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_SCHEMA_BY_ID" path="/scim/${#TestCase#SCIM_SCHEMAS}/{id}" id="d1eec032-e3a7-4e11-9787-1c3b160f6810"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#SchemaId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#SchemaId}</con:default></con:parameter></con:parameters><con:method name="GET" id="c3acab8c-230e-4fe0-b11e-0b25f2aa38a6" method="GET"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:urn="https://scimqa.condecodev.com/scim/api/V1/schemas/urn%3Aietf%3Aparams%3Ascim%3Aschemas%3Acore%3A2.0%3AGroup">urn:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:urn="https://scimqa.condecodev.com/scim/api/V1/schemas/urn%3Aietf%3Aparams%3Ascim%3Aschemas%3Acore%3A2.0%3AGroup">urn:Fault</con:element></con:representation><con:request name="GetSchemasById" id="995f086b-d0c9-4afb-8911-0a647813fc91" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="id" value="${#TestCase#SchemaId}"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalGroupId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalGroupId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UpdateGroupForPut" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startindex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetAllGroups" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startindex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>startindex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP_BY_ID" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_BY_ID" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetGroupById" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPDATE_PATCH_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PATCH" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="UpdateGroupForPatch" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "members",
      "value": [{
      	"value":"${#TestCase$InternalUserId}"
      	}]
    },
    {
      "op": "remove",
      "path": "members[\"value\" eq \"${#TestCase$InternalUserId}\"]"
    },
    {
      "op": "replace",
      "path": "displayName",
      "value": "${#TestCase#groupName}"
      ]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER_BY_FILTER" path="/scim/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>userName eq "${#TestCase#userName}"</con:value><con:style>QUERY</con:style><con:default>userName eq "${#TestCase#userName}"</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_USER_BY_FILTER" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetUserByFilter" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="userName" value="userName eq &quot;${#TestCase#userName}&quot;"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method><con:method name="GET_USER_BY_FILTEREmail" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetUserByFilter" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails eq &quot;${#TestCase#emailsearch}&quot; and username eq &quot;${#TestCase#usernamesearch}"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="userName" value="userName eq &quot;${#TestCase#userName}&quot;"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DELETE_SCIM_GROUP" path="/${#TestCase#GROUP_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalGroupId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalGroupId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DELETE" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DeleteGroup" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP_BY_PARAMETER_NAME" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>excludedAttributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>attributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_GROUP" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetGroupByParameterName" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_GROUP_BY_FILTER" path="/${#TestCase#GROUP_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>filter</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_BY_FILTER" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters><con:parameter><con:name>startindex</con:name><con:style>QUERY</con:style></con:parameter><con:parameter><con:name>count</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetGroupByFilter" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName eq &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>filter</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="GET_SCIM_USER_BY_PARAMETER_NAME" path="/scim/${#TestCase#USER_RESOURCE}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>startIndex</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>count</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>excludedAttributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>attributes</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET_USER" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetUserByParameterName" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="DELETE_SCIM_USER" path="/${#TestCase#USER_RESOURCE}/{id}" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#internalUserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#internalUserId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="DELETE" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="DELETE"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 500 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="DeleteUser" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="UPSERT_Defaults_Attributes" path="/${#TestCase#TENANT_SETTINGS}/${#Project#scimClientId}/defaultattributes" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="UpdateAttributesResourse" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#maintenanceEndPoint}</con:endpoint><con:request>{
    "Attributes": [
        {
            "AttributeName": "Defaultcostcode",
            "DefaultValue": "123456"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#Project#upsertToken}"/>
  <con:entry key="accept" value="application/scim+json"/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get_Defaults_Attributes" path="/${#TestCase#TENANT_SETTINGS}/${#Project#scimClientId}/defaultattributes" id="27543d77-325b-45a0-9606-913064a6e820"><con:settings/><con:parameters><con:parameter><con:name>code</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>accept</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="4a27e0e9-ac42-48e6-bf12-76ca5b31a641" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 400 409 404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>201 200</con:status><con:params/><con:element xmlns:user="https://scimqa.condecodev.com/scim/api/V1/users">user:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GetAttributesResourse" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false" sslKeystore=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#maintenanceEndPoint}</con:endpoint><con:request>{
    "Attributes": [
        {
            "AttributeName": "Defaultcostcode",
            "DefaultValue": "123456"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#Project#getattributecode}"/>
  <con:entry key="accept" value="application/scim+json"/>
</con:parameters><con:parameterOrder><con:entry>code</con:entry><con:entry>accept</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Microsoft AD token" path="/oauth2/v2.0/token" id="5283ed50-4748-4208-a8e1-8741c472a892"><con:settings/><con:parameters/><con:method name="Method 1" id="aa6793a8-ba16-4a97-beae-cc181df83396" method="POST"><con:settings/><con:parameters><con:parameter><con:name>grant_type</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_id</con:name><con:value>4ae8fc6d-d42c-4474-b746-c7af7600ca1c</con:value><con:style>QUERY</con:style><con:default>4ae8fc6d-d42c-4474-b746-c7af7600ca1c</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>client_secret</con:name><con:value>C1j8Q~VdGdSh9MT6Kd6.EmkY7_MlIQ1Z5sb5ydpk</con:value><con:style>QUERY</con:style><con:default>C1j8Q~VdGdSh9MT6Kd6.EmkY7_MlIQ1Z5sb5ydpk</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>scope</con:name><con:value>4ae8fc6d-d42c-4474-b746-c7af7600ca1c/.default</con:value><con:style>QUERY</con:style><con:default>4ae8fc6d-d42c-4474-b746-c7af7600ca1c/.default</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:tok="https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token">tok:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token">tok:Response</con:element></con:representation><con:request name="Microsoft AD token" id="02294f37-e0a7-4370-b0ac-fd2e9c33d37b" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5</con:endpoint><con:request/><con:originalUri>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="grant_type" value="client_credentials" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry><con:entry>scope</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Generate long live Client Token" path="/api/V1/token" id="49a47871-b849-4db8-90be-1aefe0cd2d28"><con:settings/><con:parameters><con:parameter><con:name>Authorization</con:name><con:value/><con:style>HEADER</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="2e810c3e-00c7-446c-a8bb-27652ccd0d52" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html</con:mediaType><con:status>401</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tok="https://epturascimmaintenanceqa.azurewebsites.net/api/V1/token">tok:Response</con:element></con:representation><con:request name="Client Token" id="95e81806-be12-4ab9-ae3a-bc88d2003158" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>&#13;
  &lt;con:entry key="TenantId" value="${#Project#TenantId}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://epturascimmaintenanceqa.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${TestCase#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="059e91a8-4656-41b6-a15b-4238421cc1a3" name="UTILITY" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5f220af4-672c-4b40-9956-97149fbc4a40" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GENERATE_TOKEN" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GENERATE TOKEN" id="f3d85d9d-9b4b-4d4b-a307-21eee2f9d760"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/api/v1/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GENERATE TOKEN" id="7ae85594-1bbf-45c7-9217-70003adcc6c8" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#tokenEndPoint}</con:endpoint><con:request/><con:originalUri>https://scimqatp.azurewebsites.net/api/V1/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fba86cce-0f47-433c-ac80-11dd1916a92a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def Response = messageExchange.getResponseContent()
def slurper = new JsonSlurper()
def result = slurper.parseText(Response)
context.testCase.testSuite.project.setPropertyValue("ACCESS_TOKEN",result.access_token)
// Verify the Status Code
//def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["HTTP_RESPONSE_STATUS"]
//def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")
//
//def ResponseHeaders = messageExchange.getResponseHeaders()
//def HttpCode = ResponseHeaders["#status#"]
//assert HttpCode[0].equals(ExpectedStatusCode)
//assert result.tokenType
//assert result.expiresIn
</scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="5cbbbd62-90c5-4019-bd5e-4f844e34c53d" name="Not Contains - ClientId"><con:configuration><token>invalid_grant</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="c0eba74a-bbf5-479b-92db-33a9f356b8dd" name="Not Contains - ClientSecret"><con:configuration><token>invalid_clientId</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="0b2a3a8d-ae9e-457b-8421-8e9893709a3e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#Authorization}"/>
  <con:entry key="TenantId" value="${#Project#TenantId}"/>
  <con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>
</con:parameters><con:parameterOrder><con:entry>scope</con:entry><con:entry>grant_type</con:entry><con:entry>Authorization</con:entry><con:entry>TenantId</con:entry><con:entry>AuthSecret</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties></con:testCase><con:testCase id="68efcee9-f274-4c87-9e98-f0a331b58567" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MANAGE_SCIM_RESOURCES" searchProperties="true"><con:settings/><con:testStep type="properties" name="SCIM RESOURCES" id="49aa3cc2-f57d-4d44-8411-b7755733d712"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>TENANT_SETTINGS</con:name><con:value>api/V1/tenantsettings</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>SCIM_SCHEMAS</con:name><con:value>api/V1/schemas</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3d56985f-77e0-4bb8-ae65-ee174ff83e14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STATUS_CODES" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="9f3d7a1e-76b8-4dd2-859c-c1e49f66a38c"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>ResourceCreated</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ValidStatusCode</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>BadRequestStatusCode</con:name><con:value>HTTP/1.1 400 Bad Request</con:value></con:property><con:property><con:name>UnauthorizedStatusCode</con:name><con:value>HTTP/1.1 401 Unauthorized</con:value></con:property><con:property><con:name>InternalServerErrorStatusCode</con:name><con:value>HTTP/1.1 500 Internal Server Error</con:value></con:property><con:property><con:name>NotFoundURL</con:name><con:value>HTTP/1.1 404 Not Found</con:value></con:property><con:property><con:name>Conflict</con:name><con:value>HTTP/1.1 409 Conflict</con:value></con:property><con:property><con:name>Forbidden</con:name><con:value>HTTP/1.1 403 Forbidden</con:value></con:property><con:property><con:name>NoContent</con:name><con:value>HTTP/1.1 204 No Content</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="831d9922-7df6-4e80-8c5e-8f49f8a78df4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DB_VALIDATION" searchProperties="true"><con:settings/><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="groovy" name="DB_VALIDATION" id="c539fbb2-a42d-4282-9a75-2a2c7d7d8bc2"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.*
def tC = testRunner.testCase
def tP = tC.testSuite.project

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def userResource = tC.getPropertyValue("USER_RESOURCE")
def groupResource = tC.getPropertyValue("GROUP_RESOURCE")

if(userResource){
def userId = tC.getPropertyValue("internalUserId")
def userName = tC.getPropertyValue("userName")
def userExternalId = tC.getPropertyValue("userExtId")

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
// Azure db to db details
def dbDriver = tP.getPropertyValue("DB_DRIVER")
def dbString = tP.getPropertyValue("DB_STRING")
def dbUser = 	tP.getPropertyValue("DB_USER")
def dbPass = 	tP.getPropertyValue("DB_PASSWORD")
//Connection String
def sql;
//log.info dbString
if(DB_FLAG=="true"){
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - CREATE_USER_DB_VALIDATION] - INFO : DB Connection Success")

// firing a query

log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : DB Validation Start in tblUser Table."

String  count = sql.rows("select count(*) from tblUser where pkUserID = $userId AND UserName= $userName AND accountActive=1")
log.info count
	 	log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : Total No. of Records Found in DB --> "+ count.getAt(3)
	 	log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : Query ---> "+"select count(*) from tblUser where pkUserID = $userId AND AND UserName= $userName AND accountActive=1"

int X =Integer.parseInt(count.getAt(3));

if(X == 1){
	log.info "[STEP - CREATE_USER_DB_VALIDATION] - INFO : Record Found in tblUser Table, SCIM_User DB Validation Status[PASS]"		

}else{
	testRunner.fail("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : No Records Found In tblUser Table, DB Validation Status[FAIL]")
	log.error("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : No Records Found In tblUser Table, DB Validation Status[FAIL]")	
	log.error("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : No Records Found In DB")
}


	
	}catch(Exception e){
	
	testRunner.fail("[STEP - CREATE_USER_DB_VALIDATION] - ERROR : DB Connection Failed")
	log.error "[STEP - CREATE_USER_DB_VALIDATION] - ERROR : "+e.getMessage()

}
}else{
	log.info "SKIP DB_VALIDATION........."
}
}else{
	def gId = tC.getPropertyValue("internalGroupId")
	// remove "G" prefix from groupID for DB Validation
	def groupId = gId.replace("g","")
def groupName = tC.getPropertyValue("groupName")
def groupExternalId = tC.getPropertyValue("groupExtId")

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
// Azure db to db details
def dbDriver = tP.getPropertyValue("DB_DRIVER")
def dbString = tP.getPropertyValue("DB_STRING")
def dbUser = 	tP.getPropertyValue("DB_USER")
def dbPass = 	tP.getPropertyValue("DB_PASSWORD")
//Connection String
def sql;
//log.info dbString
if(DB_FLAG=="true"){
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : DB Connection Success")

// firing a query

log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : DB Validation Start in tblUser Table."

String  count = sql.rows("select count(*) from tblADGroupToProfilesMapping where pkADGroupToProfilesMappingID = $groupId AND pathname= $groupName AND active=1")
	 	log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : Total No. of Records Found in DB --> "+ count.getAt(3)
	 	log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : Query ---> "+"select count(*) from tblADGroupToProfilesMapping where pkADGroupToProfilesMappingID = $groupId AND pathname= $groupName AND active=1"

int X =Integer.parseInt(count.getAt(3));

if(X == 1){
	log.info "[STEP - CREATE_GROUP_DB_VALIDATION] - INFO : Record Found in tblADGroupToProfilesMapping Table, SCIM_Group DB Validation Status[PASS]"		

}else{
	testRunner.fail("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : No Records Found In tblADGroupToProfilesMapping Table, DB Validation Status[FAIL]")
	log.error("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : No Records Found In tblADGroupToProfilesMapping Table, DB Validation Status[FAIL]")	
	log.error("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : No Records Found In DB")
}


	
	}catch(Exception e){
	
	testRunner.fail("[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : DB Connection Failed")
	log.error "[STEP - CREATE_GROUP_DB_VALIDATION] - ERROR : "+e.getMessage()

}
}else{
	log.info "SKIP DB_VALIDATION........."
}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>userName</con:name><con:value/></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value/></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value/></con:property><con:property><con:name>internalGroupId</con:name><con:value/></con:property><con:property><con:name>groupName</con:name><con:value/></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="7c38807d-63a0-43b2-a023-81533f1c962f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RESPONSE_MESSAGES" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="f9a6dc48-6e6c-4734-9def-c76fe0b26627"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>UserExists</con:name><con:value>Please provide a unique User Name</con:value></con:property><con:property><con:name>InvalidEmail</con:name><con:value>The Emails field is required.</con:value></con:property><con:property><con:name>InvalidName</con:name><con:value>The Name field is required.</con:value></con:property><con:property><con:name>InvalidPrimaryEmail</con:name><con:value>Only a single primary email is required</con:value></con:property><con:property><con:name>InvalidPrimaryPhoneNumber</con:name><con:value>Only single primary phone number is allowed</con:value></con:property><con:property><con:name>InvalidPhoneNumberValue</con:name><con:value>Please provide a valid PhoneNumber</con:value></con:property><con:property><con:name>InvalidEmailSyntax</con:name><con:value>Please provide a valid primary Email address</con:value></con:property><con:property><con:name>InvalidEmailDataType</con:name><con:value>INVALID_FIELD: emails[0].primary</con:value></con:property><con:property><con:name>InvalidPhoneNumberDataType</con:name><con:value>The field 'phoneNumbers[0].primary' is invalid.</con:value></con:property><con:property><con:name>InvalidSchemaList</con:name><con:value>The field Schemas is invalid.</con:value></con:property><con:property><con:name>SchemaListMissing</con:name><con:value>The Schemas field is required.</con:value></con:property><con:property><con:name>InvalidFilterMessage</con:name><con:value>Invalid operations query filter. Also, no support for logical operator NOT</con:value></con:property><con:property><con:name>GroupExists</con:name><con:value>Group Already Exists</con:value></con:property><con:property><con:name>GroupNameMissing</con:name><con:value>The DisplayName field is required.</con:value></con:property><con:property><con:name>ExternalIdMissing</con:name><con:value>EXTERNALID_REQUIRED_FIELD</con:value></con:property><con:property><con:name>InvalidValue</con:name><con:value>One or more members given in the list is invalid or does not exist.</con:value></con:property><con:property><con:name>InvalidMemberId</con:name><con:value>The MemberId '' is invalid.</con:value></con:property><con:property><con:name>ExternalIdReadOnlyError</con:name><con:value>The given operation cannot be performed as resource with same value exists.</con:value></con:property><con:property><con:name>InvalidClientDetails</con:name><con:value>Client details not found.</con:value></con:property><con:property><con:name>UserNameCharacterLimit</con:name><con:value>The field UserName must be a string or array type with a maximum length of '100'.</con:value></con:property><con:property><con:name>InvalidGivenName</con:name><con:value>Please provide a valid Given Name</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c1b1fcf2-2105-46f0-841d-bbd5e2534055" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SCIM_ERROR_TYPES" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="440d560b-b308-47cb-b5af-46fa3eeb6041"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>ConflictErrorType</con:name><con:value>uniqueness</con:value></con:property><con:property><con:name>SyntaxError</con:name><con:value>invalidSyntax</con:value></con:property><con:property><con:name>InvalidFilterError</con:name><con:value>invalidFilter</con:value></con:property><con:property><con:name>InvalidValueError</con:name><con:value>invalidValue</con:value></con:property><con:property><con:name>AttributeReadOnlyError</con:name><con:value>mutability</con:value></con:property><con:property><con:name>ClientUnauthorized</con:name><con:value>Unauthorized</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3a9605f9-c658-47b4-854a-3134bd9565c1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SCIM_ERROR_SCHEMAS" searchProperties="true"><con:settings/><con:testStep type="properties" name="Properties" id="a7328f05-e101-483c-8b59-730c29d83a52"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>GenericError</con:name><con:value>urn:ietf:params:scim:api:messages:2.0:Error</con:value></con:property></con:properties></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="1d96b318-2796-4a80-b948-b281fd148e2c" name="TS_GenerateToken" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b6a33d84-1192-4709-9869-f5e7c3c7eb97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01_validTokenGeneration" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GenerateToken" id="532f91c2-7f40-4d24-9f10-20d796f5e4e3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/api/v1/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateToken" id="b191e500-383a-442f-8cf4-d6b83e3425fa" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#tokenEndPoint}</con:endpoint><con:request/><con:originalUri>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="ff1a5941-ecc0-4877-80e9-fae9ecbcba5f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

def parseToken = jsonSlurper.access_token
context.testCase.setPropertyValue("token",parseToken)
Boolean actualResults = (jsonSlurper["token_type"]=="Bearer")

assert actualResults == true
</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="64e49162-9c4a-4807-8435-8fb503734206" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#Authorization}"/>
  <con:entry key="TenantId" value="${#Project#TenantId}"/>
  <con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>
  <con:entry key="client_secret" value="${#Project#client_secret}"/>
  <con:entry key="client_id" value="${#Project#client_id}"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>TenantId</con:entry><con:entry>AuthSecret</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InpjZnZFeml1QXRsZDZRYjlUUXFVUmloUEduRWVjZDVESVZhSUUwSWRkakh2NVlPYStJaUQyb25TdFlCdFQ3d1Y3ekJKMzRSa2owRTNENWtUR0FEYXI2OHJMa3pLSkpMRDZQa1NkbGZKODNtVDZxZjJXaFRLMGo5eThTR21GQTJIK2xxeUU3aWk3Zm8wNU9mRHJPTDcrTVFJRHZ5Z3FZOHI2N3B5Zk5rT1JoZTlDRjBLYXpqazhXZ1NzNVVxT0xtQyIsImV4cCI6MTczNDc4NzAxMSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.6DXCjWTsrFT1PGtdlldtnZ45AqH-_0ICNgkMkoGqsYw</con:value></con:property></con:properties></con:testCase><con:testCase id="cc1a1566-2742-4d2e-8d8f-8c4618ea9e90" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03_tokenGenerationWithBlankValues" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GenerateToken" id="8c711f27-e4e4-4127-b305-a72afd174580"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/api/v1/token" methodName="Token" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GenerateToken" id="b191e500-383a-442f-8cf4-d6b83e3425fa" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/x-www-form-urlencoded" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#tokenEndPoint}</con:endpoint><con:request/><con:originalUri>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1d3be80a-4c23-42b3-a2cd-5f7b601d4830" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9e5d3b4b-c3f0-472c-b321-8d75f00477ff" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

def parseToken = jsonSlurper.error

Boolean actualResults = (jsonSlurper["error"]=="invalid_request")

assert actualResults == true
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="${#Project#Authorization}"/>
  <con:entry key="TenantId" value="${#Project#TenantId}"/>
  <con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry><con:entry>TenantId</con:entry><con:entry>AuthSecret</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="fc605958-9aa1-4a2d-9b30-4f587fadb41f" name="GenerateToken"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01_Verify token" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Microsoft AD token" id="061f63c4-6e34-425e-9043-6a37a04dbab4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/oauth2/v2.0/token" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Microsoft AD token" id="02294f37-e0a7-4370-b0ac-fd2e9c33d37b" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5</con:endpoint><con:request/><con:originalUri>https://login.microsoftonline.com/adb48caa-0b14-4256-b178-a5e508c807f5/oauth2/v2.0/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="45aff2e6-b772-44b0-af28-4536caf3da33" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

def parseToken = jsonSlurper.access_token
context.testCase.setPropertyValue("accesstoken",parseToken)
Boolean actualResults = (jsonSlurper["token_type"]=="Bearer")

assert actualResults == true
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="grant_type" value="client_credentials" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>grant_type</con:entry><con:entry>client_id</con:entry><con:entry>client_secret</con:entry><con:entry>scope</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Generate long live Client Token" id="f0c147e9-cdb9-46d3-9ce4-8a3459e6b45c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/api/V1/token" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Generate long live Client Token" id="95e81806-be12-4ab9-ae3a-bc88d2003158" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">&#13;
  &lt;con:entry key="AuthSecret" value="${#Project#AuthSecret}"/>&#13;
  &lt;con:entry key="TenantId" value="${#Project#TenantId}"/>&#13;
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://epturascimmaintenanceqa.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://epturascimmaintenanceqa.azurewebsites.net/api/V1/token</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8648c731-1a0e-4b4b-b95d-cc925da7882c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

def ResponseMessage = messageExchange.response.responseContent
def jsonSlurper = new JsonSlurper().parseText(ResponseMessage)

def parseToken = jsonSlurper.access_token
context.testCase.setPropertyValue("token",parseToken)
Boolean actualResults = (jsonSlurper["token_type"]=="Bearer")

assert actualResults == true
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${#TestCase#accesstoken}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>accesstoken</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IjVCM25SeHRRN2ppOGVORGMzRnkwNUtmOTdaRSJ9.eyJhdWQiOiI0YWU4ZmM2ZC1kNDJjLTQ0NzQtYjc0Ni1jN2FmNzYwMGNhMWMiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vYWRiNDhjYWEtMGIxNC00MjU2LWIxNzgtYTVlNTA4YzgwN2Y1L3YyLjAiLCJpYXQiOjE3MDQzNjk4OTUsIm5iZiI6MTcwNDM2OTg5NSwiZXhwIjoxNzA0MzczNzk1LCJhaW8iOiJBU1FBMi84VkFBQUF2Q2lvdlZ4VjYzWVhOUGRtM3VBR0FrMnI1M1Zxd3BBdzR0cjQycHFCTk44PSIsImF6cCI6IjRhZThmYzZkLWQ0MmMtNDQ3NC1iNzQ2LWM3YWY3NjAwY2ExYyIsImF6cGFjciI6IjEiLCJyaCI6IjAuQVM4QXFveTByUlFMVmtLeGVLWGxDTWdIOVczODZFb3MxSFJFdDBiSHIzWUF5aHl3QUFBLiIsInRpZCI6ImFkYjQ4Y2FhLTBiMTQtNDI1Ni1iMTc4LWE1ZTUwOGM4MDdmNSIsInV0aSI6Im16czk3emgxTmt1TVY4UngtcW5WQVEiLCJ2ZXIiOiIyLjAifQ.buEMRo-p-Y9zKYpcbCt683HkiPUGGjJiBtWSwIhhziSKO9v8m7KLAw72NHvgc8bWQWRhfs67MOtGP1rvIJaHB3GUaYnDUgJSmHqWzy_5r3jH24_9kG-w1PQugHoXs0BAXebnJ_tRwW5MMibt_zrtBY9L6haPTrUqmYZJ8oevAQdX0CJhLw9coh2wev-f8mwYOcnBoPBbXSzA2loAGLWiexzpgUHhWb8rcqyxDc5W6z3muh3tFJRIQlNjKaCQhX5ak9N-fhm6D7-Z5sfP9otK5C0tderBo0FSreXEPQmbkQcI73LzDJ1te4YYEVKa3iZqFKggK-rid2SHoiNSRMpV0A</con:value></con:property><con:property><con:name>token</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0eWlBMVBlWHRjREdDcE9NdU96K3FMWlZ2elhHTHM2NzJHazlkTGxNNnMreGY5d240Y2FpbVZDUWQxT29kdTRFeHVkcDhXVTZPVEhmRk9DZVQ5bHdHcTVlN0VDNVJraFpEeExqNVpCVStOd21vTGtUVlhFYjk4RHpGbUZnZnJla0F1Nm51MzNPaDFFc05VYjc5Z2ZnSkRjcjdlbXRUOXQrSGNoWDgzdk8yYlZnRGhiTklDOGQvbEZQcTczR3FZc2wiLCJleHAiOjE3MzU5OTI1OTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.rIJKPXczB1dL_weOjmDzi3SMMV9Kj9eXeBauKEl6FKM</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="9e08c32b-29d4-41c1-9e4e-3e781ab22331" name="Randomvalues"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e6fdb70e-e836-446d-90f5-15036092a7ee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate random value" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="e561559c-6f67-4f25-94b4-1ece1a028894"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')
log.info externalId

//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen1


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
context.testCase.setPropertyValue("Mobile",Mobile)
log.info externalId
</script></con:config></con:testStep><con:properties><con:property><con:name>externalId</con:name><con:value>ExidryOVrm</con:value></con:property><con:property><con:name>userName</con:name><con:value>NameryOVrm</con:value></con:property><con:property><con:name>Email</con:name><con:value>ryOVrm@xyz.com</con:value></con:property><con:property><con:name>Work</con:name><con:value>0078841464</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameryOVrm</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameryOVrm</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0078841464</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>Exid</con:value></con:property><con:property><con:name>userName</con:name><con:value>Name</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>Work</con:name></con:property><con:property><con:name>Mobile</con:name><con:value/></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property></con:properties></con:testSuite><con:testSuite id="047ed729-01c2-495e-ba8c-c8efcdc84c48" name="CreateSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9c4519cc-5eec-4c71-b105-7e31478756c2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01- To Verify Create single SCIM user" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="158be05b-bb87-4f92-8495-58e44aaff3e5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJlYVd2MDh0cGhpUWRwdFBGdlFsbER2d3hsWWhHZ0JVTTdqWTBKdlNxRmc1VGp0YWdSeVJ3cGlZejJrT0pkRTEzbEQ1b09TUGxtaDZJcFFldXNPVjZ5UnRzTFJNbTQrazA1ZFBuOU9iNDFsWFdQZEF0cWgxU1EyVlFuaVBDaWgvdmdkeXJZcHlnQk9nRi9qdmdPR25XM3ZqYmx2RkdDOFdVNTFWZHU0aEYzTDNOUHM0bUtVVDJZbEhoSEIyYnUvejAiLCJleHAiOjE3MzU5OTgyMDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.jbmYR28Ug2jlqEYgsmv3xmzhzo7nlIg8KPp4kvYdtJE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1b886b55-de82-4e13-aaf7-d48049120ad7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="b74f466d-f230-4307-b8bb-bd2d79c150e3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c9166907-b2b4-4d11-b2a8-3e2dab55bcc3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="259603bd-e89f-45e0-801c-1e6a245c20b7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_VaUjnJQs</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameI27ase</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>26871d73-af6e-41c2-b586-aeb4c440297d</con:value></con:property><con:property><con:name>email</con:name><con:value>I27ase@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidI27ase</con:value></con:property><con:property><con:name>Work</con:name><con:value>64681134893</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameI27ase</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameI27ase</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9808424263</con:value></con:property></con:properties></con:testCase><con:testCase id="2050be60-e4e0-4d2c-80b4-ae17335e2bd3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02- To Verify, userName must be unique for every SCIM user" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1a4b6728-0248-4840-8f89-395cd88407f4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJhbEdJQTlnd1RHMVNGaEFDclZqcWl6akw2UlZhLzZWWXhXSW03TkpmdHY5R253RmMzcVVUZElIU2tNenNPYXppNG9iazBvTTR5Z1kwaHF6MEhNUFczSFZUOHJwN2IzZlBmTnpmM3E3SVk4SzJXT1c2QVpIMWF6dldzb1N0RUozcHhEcXVBYjEzcXV0U1ZrU0ZNWlpMOFdiZENyNVE0UkZYNXJFOHppd3BnVHYrMGhzVmN5QXRJaEhaZ0FibC9OT0ciLCJleHAiOjE3MzU5OTgyMTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.f6ATJoJoFZw0RyzPUP1VgTi-uAgvILz9TEqefM9DNLE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c9f023cb-1bd3-4d25-9c25-c69dfdf889b1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="aaffdf84-59bd-46f5-85a4-69c2f9b3e6ce"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CreateUser with the same username" id="addbfa58-a833-419b-a1f2-f8819ecdcc10"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateUser with the same username" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8d527f95-59a9-4bf4-8720-f50600ef1747" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("UserExists")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("Conflict")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="bd4946bf-1dbf-420f-afcf-eb61e79388cb" name="Valid HTTP Status Codes"><con:configuration><codes>409</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="9976ac43-466a-4b8a-8736-1b3a948b899b" name="Contains"><con:configuration><token>Please provide a unique User Name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d4240002-0d69-46e6-8851-6723aa19f488"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_O9xyLr37</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameBW4DTt</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>52ec4034-50d9-4307-adcd-9972903f3212</con:value></con:property><con:property><con:name>email</con:name><con:value>BW4DTt@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidBW4DTt</con:value></con:property><con:property><con:name>Work</con:name><con:value>33101252564</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6141494938</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameBW4DTt</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameBW4DTt</con:value></con:property></con:properties></con:testCase><con:testCase id="f9835c9a-7dde-4b66-81be-71b0b82133f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify, handling of 'null' values for phoneNumbers in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6a30513c-d7f5-4026-96ef-2af5a4de96a4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJDOGFMNjVmRmFCNkZKeXZSS3pQSDVkbU0zS2lkUlJzNGg5Z1FGckFVQno3QVFGUjZHTy9VWU9UZHZpaWk4UHdSUWV4OVVLR2wrc3FqajZGQnYybHVsOThkblBpRERoVmFlZkxqYlY3WXlNWGVCbzBNVmhKSFRTWjBLUWZYQ3BpWktjd3dZUFZURVJxVFBKWGVkaVZJRWM2a0tjMEZqT1VrbVZJRkoycEw2cy80T2F6R29pL0d3NXBTemNReEZhRUciLCJleHAiOjE3MzU5OTgyMTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.hLEUA8mXC9jzGPh5Y3uuMbZ313TirXq9dwsSXbqjpL4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="95d70609-babf-4d93-b93f-f4fb50ade873"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="8a13ae63-cd07-46e3-96b2-43c749340f11"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": null,  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c7e6854d-62f3-4cbd-9527-a23b32b29638"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null
def phone=jsonObject.phoneNumbers
assert phone ==[]

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f4a28dfb-73ac-459f-a0fc-cc175b58fa0a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_smmP6x85</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamezWYdzO</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>cbc2bcf1-e83b-4b2f-b7b3-2498551887e0</con:value></con:property><con:property><con:name>email</con:name><con:value>zWYdzO@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidzWYdzO</con:value></con:property><con:property><con:name>Work</con:name><con:value>41815480852</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4285689204</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamezWYdzO</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamezWYdzO</con:value></con:property></con:properties></con:testCase><con:testCase id="1e8a2546-f5fd-40b3-ba71-0a17f42c14a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify, handling of 'null' values for 'email' field in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bdb7e15b-7df7-4672-8055-c7cce0f2c692"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI1Z0g3ZmUxdzZvZEJzMnpZZjkzcDJLYlE4Vk02ZHIybzVWdjNuaHplaFdFWW5MWEtMVFY5WHlmR0VsZFYzMEs0dDhXeStzTXNvQTBGR0NSMGhRNENEckUra0hTaUo0dkg2bkFRTlo1L0Z3L0dqTUkyUFordmNGendsOGFVcTFuSUJNZlNRZDVaR2ViUDhGMjk1bUFwb3BHSjJrcVlwR2FBcXRjWkZUL1c3ZEpLK3RMOHBVa2NxWlJlWjViQkpuZk8iLCJleHAiOjE3MzU5OTgyMjMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ZjgBiFt0SO9xGGVqYtpG6RyiQw9ncvSLEjWYEcgDLjA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9f6efa50-79a5-469d-9f6d-4a13df81979b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
//Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
//context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4f4c9154-3b04-4cca-9dcd-2078bf9569ad"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails":null,
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmail")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f082eaf1-8007-468c-979d-50eba38c5681"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wN0HFPyG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameH8ZyH2</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1715</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidH8ZyH2</con:value></con:property><con:property><con:name>Work</con:name><con:value>25673456988</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1757745813</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameH8ZyH2</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameH8ZyH2</con:value></con:property></con:properties></con:testCase><con:testCase id="ab94b867-a2cb-4d89-abc6-624fb09af2cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 -To Verify, handling of 'null' values for 'name' field in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="934793e6-46f9-40b1-aad8-ff926009c4e3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ3N2w5Z2h6bHJERXN5RGVmQU0yNHZUWVI5NUluY0J0ZE9kWkNndWFkZy9kdXdpbnNWb3VTd0hXd2ZLM25QSm9OeCtLcFROdkFtdHh3cW9EYXYxQ0YxMlhIbVZwOENPa2YvTnVxTVNGY2FDVVpqZkhyTXFmVVFhRU9idlN3MlpaTngyeVBuRWR1NEduK2V6SGxrbUFXSVhDY2NSMy94Y0tSZC9GazlTVTBWb1ltRHkwKzVZNjRHQU9aeU5heUR0eGEiLCJleHAiOjE3MzU5OTgyMjUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.oNF2vSeGaFOqAblcyl6hrG3JjvIg92AMxJsRWmIUBrc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="acc7d432-d027-4df6-a505-d16a38ef77d1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
//familyName = familyName + randomGen
//givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
//context.testCase.setPropertyValue("familyName",familyName)
//context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="95b4e9ba-07d8-497a-ac37-ec09aeec9db4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": null,
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidGivenName")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="203ba195-d9d4-42f0-9138-07194146e1fd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_sb6Gw3xo</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamexnSngS</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1715</con:value></con:property><con:property><con:name>email</con:name><con:value>xnSngS@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidxnSngS</con:value></con:property><con:property><con:name>Work</con:name><con:value>76935348981</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>5247472286</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameNBYbac</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameNBYbac</con:value></con:property></con:properties></con:testCase><con:testCase id="3ac89a54-6c30-41c1-9ea8-440e86c57f9d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06- To Verify Create single SCIM user in 'inactive' state" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c0f74052-ac5c-4e24-bc6e-22b2c1803277"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI3amNLbUR0Vk1tWDV5a2R3bnBMMHVOQ2w1Y0lydG5kWEZhUHVFSWdubmZRZW51ak1GamFSRHZ5blVVMHQwenM2ei9scTU2TmpobWt6ZGZsY2pVak1CWEc2cDlCTkpjNEZpMXNNN3FKelIvN2NxbXVYcERHRWJlSHFGUGdCc1cyYjd1bmk3QVdPL0FpZnMvMDhKRnhVLzZma3k2eE9DM2FpVjdaUFlSM3JxTm1WT1hoMTgvYXhDZ3cydnRVS2hUenoiLCJleHAiOjE3MzU5OTgyMjksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.sEKL-I8UCKJnnGcc5JI79IaYbXMt1VrCkQRN_M5t8AU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="47aace67-2326-4d54-83bb-a95c4363aab3"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5d81e09c-5805-407d-9cc7-39f2426d5665"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#activeFalse},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

//def ActualActiveValue = jsonObject.active
//def ExpectedActiveValue = context.testCase.testSuite.getPropertyValue("activeFalse")
//assert ActualActiveValue == ExpectedActiveValue



//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="892c0557-8ac8-47a3-b55f-9872f72afcad"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

////Verify the Internal UserId for User
//def ActualinternalUserId = jsonObject.id
//def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
//assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)






// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="36ef3244-a52b-45fc-943c-259bceeb3c30"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Mm01pqDE</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameDZ2NMV</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>905f7e14-a186-489d-8d0a-a928c16de722</con:value></con:property><con:property><con:name>email</con:name><con:value>DZ2NMV@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidDZ2NMV</con:value></con:property><con:property><con:name>Work</con:name><con:value>80134962687</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9324426517</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameDZ2NMV</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameDZ2NMV</con:value></con:property></con:properties></con:testCase><con:testCase id="7bd6cb2b-faf0-46ca-8a0b-2d6e14703cb2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07 - To Verify Telephone number, when 'primary' attribute is true" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e8fe769a-d40f-486e-bbd5-7c3c65696b5e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIxME40TVQ4L2lNemRNb0ozQU9DQTZuYUhVOTRiNFRkWG1GYWgwTnB3a2x2cjNGR2tPVEhwUHRZTmNKZC9Qa2lkd0VZc0tMMXJNM2NxY1kwdmZJWWZ1NmNPc3lUTW9HdnVoSjdBTk85MVNmWTA3SW5PdERrNHFyOUF0ZHRCV200WXJ0ZGFlbEhXeVdRQXJEYmJCcEkvTW5hK1pmdWExTmV0WUJCWGhuYWI5RlRiK0V0azk0MnBpWjVkdWh6MnVxQUwiLCJleHAiOjE3MzU5OTgyMzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zH-oOcuY5bQHFEAEJnqgHgCBQ2QxL0T1AivlBOLqTxQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3063ffdd-e4f7-4978-b68e-41ea3da14e80"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="694624b3-1d95-4348-8ee1-166261e06f63"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Work}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bd539d04-100e-4b0d-b85d-30c2cd024013"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d8d2358a-883a-4025-987d-cf48dc35efa8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_3QtC1Kic</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameXUg4Fi</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e5371b23-fa1a-4cb0-86bd-0e3f0290b3c1</con:value></con:property><con:property><con:name>email</con:name><con:value>XUg4Fi@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidXUg4Fi</con:value></con:property><con:property><con:name>Work</con:name><con:value>93658871472</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9709452311</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameXUg4Fi</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameXUg4Fi</con:value></con:property></con:properties></con:testCase><con:testCase id="bd39c1dc-d9d1-4f38-8b6f-647a43af3465" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08 - To Verify Mobile number, when type (Mobile OR Cellular OR Cell)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f7cb3bf0-0c03-4124-8f20-194a778d3132"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJmeFpJOEdQbEo5VElmK1JHa1dIcHBQSGlZTHdWUlVTQ1AxSWtyRlJKcGpqU2NVSm1SK2JuRkJsYXVYQ2lLV1ZCTWZsbVhDQlJvbGlrOWM0QThlMUFLUlgrbEc5UjdXdWtsTlc5aS9zQWJ2QjA0NTB0Z2pWTmlWcWZLdkdvaU13eE92RTZ6c2MwSllhcjBjUkxDblNrZVNpZHBRS0FiS3QrVjdZRzBEMStQbGc9IiwiZXhwIjoxNzM1OTk4MjM2LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.T58P67ho7l2-iJEMQSIiTRVzq6PCUwmzss9Echqv_L0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="07342b50-9050-47dd-8fed-3d96723b4bd7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f9a260b7-6bb2-46d7-933c-21f404f1eeec"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "type": "${#TestCase#typeCellular}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def Actualtype = jsonObject.phoneNumbers[0].type
def Expectedtype = context.testCase.getPropertyValue("typeCellular")
assert Actualtype == Expectedtype


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="4c721f7a-4b48-4184-a21c-a76b12a7acca"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d5001f10-bc12-44c7-98ab-8ea5dbd80e77"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_E0LBo1si</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameakZNmX</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>22c26f90-4a4d-42c8-9353-aa39f159bf9c</con:value></con:property><con:property><con:name>email</con:name><con:value>akZNmX@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidakZNmX</con:value></con:property><con:property><con:name>Work</con:name><con:value>67767648813</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9009087342</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameakZNmX</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameakZNmX</con:value></con:property><con:property><con:name>typeCellular</con:name><con:value>cellular</con:value></con:property></con:properties></con:testCase><con:testCase id="81bab554-09d7-4802-9431-0e3bc477bbf4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09- To Verify Mobile number, when type has multiple values (Mobile,Cellular,Cell)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4fa9153c-67c7-4162-9971-9d7a7c4a79a4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLRTVWUm13Y2VXdnMwOUZoSk9aVGtqUFVOM1FiYzF0QUhXMnpDVEFKS3ZQa3UwV3QrMkZNd2lYNWlvZFJ3c0dIL3cwaGd1RjZQL0ZaUDFBZmk5RmgzUGpNejFHb3F3Q3VjOFo5b3FsNkV5T2k1K0h3emV1eTA4RnprMkNUbVg0cXNUT0trNVFCLzN2cVBVTlltNTdaWHBWL0ZIdHkwTW8yT3dyTXUreitjcG44OGpnZkVOcDRYRXoxUlJjMHVaaDQiLCJleHAiOjE3MzU5OTgyNDAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pITviQV45b6UOO9j2Su0e_wT217HPNNRbBWBfCPLrDA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0be7cc49-003f-4b5a-a2b5-912c3ecf3847"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5156b969-7827-4f8c-872b-37bac3059d04"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "type": "${#TestSuite#typeCellular}",
            "value": "${#TestCase#Work}"
        },
         {
      	"type": "${#TestSuite#typeCell}",
      	"value": "${#TestCase#Mobile}"
    	   },
    	   {
      	"type": "${#TestSuite#typeMobile}",
      	"value": "${#TestCase#Mobile}"
    	   }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def Actualtype = jsonObject.phoneNumbers[0].type
def Expectedtype = context.testCase.testSuite.getPropertyValue("typeCellular")
assert Actualtype == Expectedtype

def ActualCelltype = jsonObject.phoneNumbers[1].type
def ExpectedCelltype = context.testCase.testSuite.getPropertyValue("typeCell")
assert ActualCelltype == ExpectedCelltype

def ActualMobiletype = jsonObject.phoneNumbers[2].type
def ExpectedMobiletype = context.testCase.testSuite.getPropertyValue("typeMobile")
assert ActualMobiletype == ExpectedMobiletype

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="1215ed6b-15ba-42c6-9264-158d79eccd2f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="08c17948-1057-4eca-893e-86e6a26267c1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_9aFf5cf3</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamecwe4cN</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9c006d1f-4a67-45c8-a2d2-f87856d5d30b</con:value></con:property><con:property><con:name>email</con:name><con:value>cwe4cN@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidcwe4cN</con:value></con:property><con:property><con:name>Work</con:name><con:value>90533716409</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2243092351</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamecwe4cN</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamecwe4cN</con:value></con:property></con:properties></con:testCase><con:testCase id="4879132c-0e82-45b2-9cac-6c67e4f18c68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ 10-To Verify Mobile number, when type has multiple values (Mobile,Cellular,Cell) and primary is 'true'" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a5b136e9-6686-4f68-9b2e-7bfbef82b860"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJaVTc3VSs3ZjgyZVY5Y0gvcjREdGxoYmpPTTJJN29SaCtWaTh3L0dmT2ErMUFzaWM4cm9jczJpQVpRVHpQWlh5SFFjNktKc3ZVV0tUM0UyNXN4OUxGbFhYTDhwUllFWE4ycjBhZVZSRUc3RkZyM0pWNzlUSWovNnk4NUE2UW9rRTF0RlR3ekg2SDVqajUwdzR1NEJENW03Sm82TFFsQUpOV0FxUkJ5NzFQMHhxa3ViQVE1WTVzTmFQdEMzajF4YnYiLCJleHAiOjE3MzU5OTgyNDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.jeRHcqGqbndRaHFzqIXc8RSpeUAmREBuM6tyJo4jY0E</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="60dedaeb-2548-4419-ab61-bd9bba557b37"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="ddde97e2-b0ec-4618-9406-95346e3e15e4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "type": "${#TestSuite#typeCellular}",
            "value": "${#TestCase#Work}"
        },
         {
         	"primary": ${#TestSuite#primary},
      	"type": "${#TestSuite#typeCell}",
      	"value": "${#TestCase#Mobile}"
    	   },
    	   {
      	"type": "${#TestSuite#typeMobile}",
      	"value": "${#TestCase#Mobile}"
    	   }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def Actualtype = jsonObject.phoneNumbers[0].type
def Expectedtype = context.testCase.testSuite.getPropertyValue("typeCellular")
assert Actualtype == Expectedtype

def ActualCelltype = jsonObject.phoneNumbers[1].type
def ExpectedCelltype = context.testCase.testSuite.getPropertyValue("typeCell")
assert ActualCelltype == ExpectedCelltype

def ActualMobiletype = jsonObject.phoneNumbers[2].type
def ExpectedMobiletype = context.testCase.testSuite.getPropertyValue("typeMobile")
assert ActualMobiletype == ExpectedMobiletype

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5355c3be-eace-413b-ab9a-6f46ded84c25"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="52ce34ca-61c1-4c57-9c18-2c22ee83cddf"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZbDdyasO</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameRKxlwV</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7da0d946-7813-485e-8aba-cebb4a3c177f</con:value></con:property><con:property><con:name>email</con:name><con:value>RKxlwV@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidRKxlwV</con:value></con:property><con:property><con:name>Work</con:name><con:value>47933267471</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7925106097</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameRKxlwV</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameRKxlwV</con:value></con:property></con:properties></con:testCase><con:testCase id="930a6105-be37-4c83-a83a-89bd75c33076" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11 - To Verify user is created when 'primary' attribte is missing in payload for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4472d05a-e16e-4465-a255-b1df32be1d11"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKTkJBS2JNS0g2MGhqb1RHa1Y2WUYzMVRKbUIvVTBVZEtNY1M0ckw0SlVyU1oxekJkMzdoUGhnUVdLMUVkMU1EVitlQ2ZOMEs1MkRyRWRndVRyc2prUmhqdGJON00wbUhiclJ5Q1RCWkRnK1lybm1mM1NKUU9QN2Q1Z3RuNk9sOXd5bmRRZkNBVVM3bWY2R2l0dW5jbGMzcGRrVXgrZE5FRWsyRGFNNCtYMXkyQlFWdjM3bFRqTXhYTEtGeWNycUMiLCJleHAiOjE3MzU5OTgyNDcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.FbdqI99wUjFz_r7V_H5nLCZ1NK5xKpFno1IUWpClnzk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4ac8575f-991e-4742-8a60-36b1f690baa7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4afe83dd-6629-41ae-b540-d1e7b4cedeb6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="e8903193-e04d-498d-ae66-1dfa207f1162"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6afd078a-63bc-4061-af39-74538e147ac2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_nJjLmZ23</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6UwAuq</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>189bfaeb-9a2b-45a9-ba9e-49a56871eb49</con:value></con:property><con:property><con:name>email</con:name><con:value>6UwAuq@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid6UwAuq</con:value></con:property><con:property><con:name>Work</con:name><con:value>63437359376</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8202651951</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6UwAuq</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6UwAuq</con:value></con:property></con:properties></con:testCase><con:testCase id="e4ca20db-896f-4631-b24f-ed81e2a1ea15" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12 - To Verify that user is created when 'primary' attribute is 'false' for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0d58ed70-1ceb-42db-b1f5-8e58493dbd8f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLeTFrdTBEdjRNbGxwYWhOTG51aWpnMEI1VFB1M0k4cXRWWXBFNGlDT2dSYWQ4bXd1RXpTQTZWcFBxd0dmclN4aExEMWtlSW5ESCtyOEpBb1NwRlcrTm9teE4vVzdKa1lqcTh5WXBpMnR4L2o5T2ZTTGJseGxIdlB0UEt4bDF3Y3FiOUtDa2NlL0llOFZTR2xoTlUrOEM1eWdVNklOa1V6aVJQM1hxTkZvOGRQRGZ1Y0l5SlhoRng2VjhtZkx3Um9XL3dYU2xpdklkQk1nRTdRbWNTVDVnPT0iLCJleHAiOjE3MzU5OTgyNTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.xHmLvTDugUyhdU1YKckQMXFXveAvCBSOp4yiK5UPI0c</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d4ca76b9-72de-4df8-a0c9-8cf15ae4e389"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="40c0f078-ef4c-4317-b681-99220ba4c874"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a1d0b6e8-35ed-49ef-a49a-818520b7fcfb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="094ebf30-276d-40d5-876a-f1d5d0c3dd9a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZizG0o1W</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName4xnEgN</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b6746741-887a-41f2-8d0e-1824d9fa0a87</con:value></con:property><con:property><con:name>email</con:name><con:value>4xnEgN@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid4xnEgN</con:value></con:property><con:property><con:name>Work</con:name><con:value>99253792764</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4137204383</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname4xnEgN</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname4xnEgN</con:value></con:property></con:properties></con:testCase><con:testCase id="3e7fb60d-46e5-4f4a-87df-b9e37e87de28" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13 - To Verify ErrorMessage/Status Code, when multiple 'primary' attribute are 'true' for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="073d33c1-96f6-4747-983d-84c52d2429d1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJQb2ZFQ2pYbWEzWXkwNG1sbEtiaitEM3FqSnVOcFhPUnd2Z3o5ME1WSFBUdnRNTXRLZ0d5Z0VWNXJYZHlZdDVaMWtpamFTcTdUSzQ1SFZSM0piOWpwR3pZZklmWVBGVEdlTW9RRnlsT0xQa3ZVTkE5YVRJaEFMbUdkYWdMQVhhaWNNVndnU2hZV3VEQ1liV3JablB6QXhDRmY3Uy9oS1VtM0FHTlhMclRDM0U9IiwiZXhwIjoxNzM1OTk4MjU1LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.gxzE_a9ePrp4hl60ortal0d5lIXX_p-S8ornEjSWPIo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="24019141-9a26-47ef-988f-de64268419b0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="eb04202f-4e9f-4fc3-be45-bee47faf0741"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidPrimaryEmail")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="338ed373-9cf1-4edb-9020-6c32a80e72c0" name="Contains"><con:configuration><token>Only a single primary email is required</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b368a19c-7c55-47b2-9b49-f580db30cfce"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_P4MmW0Uq</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameiYy4ht</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>iYy4ht@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidiYy4ht</con:value></con:property><con:property><con:name>Work</con:name><con:value>97472256086</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1152636380</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameiYy4ht</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameiYy4ht</con:value></con:property></con:properties></con:testCase><con:testCase id="57d0a980-4492-443c-a6b2-4b10cfe11301" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14 - To Verify ErrorMessage/Status Code, when 'phoneNumbers' field should accept only numeric values in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="873dca05-5897-4811-a389-f0226bffbf8b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5aGN0RGdpcjJDVWE2TGFLc2ZJOGNRbGIrMkVlTDI1TWQ0Z1R5Q2VCRGsvektMSUlaYkZPQmsyb3ZmcTFNK0FEcEJucGRha2piRjJhV2VJaWhKajVuN3BvSnlzS2Y0VHZiLzduUEtVZDZaT3FNUE04UU9KRHdlRVFJVm5JcmNoVVAzd1l4OGFHNmdrNktWNzNybk51VWIzTitMU3BDZk9aM1pwamJDN00zYm1hNkpQOEp6b3VjWGYyTXlGUzF4cU4iLCJleHAiOjE3MzU5OTgyNTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.LPuY5pjPfyCKeNUkLtzHwwenmszoRgPh0iSUG0uvYxY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e98ea8a6-ad48-412d-8ecc-d3af192e9686"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="243620fb-9fbf-44e1-8e62-f89cb50baf17"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        },
        {
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidPhoneNumberValue")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="338ed373-9cf1-4edb-9020-6c32a80e72c0" name="Contains"><con:configuration><token>Please provide a valid PhoneNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f464db36-dd98-4c5e-9ae9-2824da6585d8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_w2YNYA20</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMhVLre</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>MhVLre@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMhVLre</con:value></con:property><con:property><con:name>Work</con:name><con:value>10066741936</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MhVLre</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMhVLre</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMhVLre</con:value></con:property></con:properties></con:testCase><con:testCase id="d61cb876-06fe-40c4-a668-079aca439bfd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15 - To Verify ErrorMessage/Status Code, email field with invalid characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="15cf45e9-0de3-43a7-8bb2-38f871bc79ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJqck9GQWN1Nm9veG9RYXV0dHV3c2RJSER6Nlg1bWtLQWg5dHpmY3ZnK0EzTWF6bGNzbWRueGlhSjZ6MmJSMlhycVRXZnkzVzh2eWlYQisxdWFBTHJ3VmRBY2JRdWJqUG5iNzdlVDNNdnJXRG9YbTJmaElSMDU0LzNUeE9uZmE1a0VKSENZbkFkaW5iWWxZd2hjRmtzME9Qd1NEL0RZRWZVbFVaQU5SQUtmekF2c1RmZVhsbnpFdll1ekc2K05ySWoiLCJleHAiOjE3MzU5OTgyNjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.6OYyWbrZd-eZf0dPx0UljPmgwMYlVg8VUUsbFgWiszw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="5cba740f-58b2-4647-b414-ae6840250329"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
def randomGen2 =RandomStringUtils.randomNumeric(11)
 
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestCase#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0be9d76b-d704-4c0a-a622-99d9badcd049"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
           
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailSyntax")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="338ed373-9cf1-4edb-9020-6c32a80e72c0" name="Contains"><con:configuration><token>Please provide a valid primary Email address</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1968704b-feb1-4f1c-8c80-14068b375713"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_11abIZY1</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName5RebEj</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>sciÁáÉéíÑñóúÜümuserÑame@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid5RebEj</con:value></con:property><con:property><con:name>Work</con:name><con:value>71321299839</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4888762190</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname5RebEj</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname5RebEj</con:value></con:property></con:properties></con:testCase><con:testCase id="511bbb05-0421-420e-ab43-f81846ead6ac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16- To Verify response when email format supported with Enterprise" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9917d338-f71a-4acd-b0f2-985368cbeb23"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJZSkRCblRlbEhjTFJTK0FKaUM0cVVxOHZ0N0dnTXR3bmVPcSt2eFJWYnpMWUdVbXF6ZHhpcEZ5S1NPZXR2SnJveVZrTlEyUGtiWEY4MkxWQ01SYU43Qk5rQU1rTFExS3orYW53S2RCc0lZWWtScjh0czZlNEo1SHRYSG9hNXhMUFd6OEN5SXdIYmpoVUhDMFpKQjlKRG1jenRqaEpxUHFTQmRWSm0vL29NUmM1V1BDdFlrVyttOERsdWRhbVhmQ3IiLCJleHAiOjE3MzU5OTgyNjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.HN_6LXScHCLGXwwqluFzrrmgUWTo4SR3wezd9qQFRxs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d42b5d3e-8805-461b-9ac8-c13e50e7b38d"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
def randomGen2 =RandomStringUtils.randomNumeric(11)
 
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestCase#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="03e40e20-194b-4e6d-9a86-c990492e4b55"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="de29aa9d-b945-4689-a88f-d6512c7da0f5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="3425762a-6bc6-4604-a943-4a031bb7406a" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="e1a14251-69f5-4e66-924b-68815b0dd1c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8d73de2f-51b1-4c24-8461-446c16859eab"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamekbS0rN</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>82fc7bbe-21c4-442f-9502-298142ba219b</con:value></con:property><con:property><con:name>email</con:name><con:value>userApim@s.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidkbS0rN</con:value></con:property><con:property><con:name>Work</con:name><con:value>85506434725</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3008602475</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamekbS0rN</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamekbS0rN</con:value></con:property></con:properties></con:testCase><con:testCase id="c423cafc-a90d-4492-807d-30ea47b21bf2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17 - To Verify, blank phoneNumber can be saved" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ce2a0324-a205-4a40-9601-979f6e59a907"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJOQVV6WGJld1JoS0xieFdQOW5vT1ZySUtvL2xsR0dGcWx4OW5TWDIxN2ZhN1c2UnRNdi9sWExzNWxsQVc3bW51NHJGdEFvS1pxUkhWeno4MFJIc3hLRmdBRTd0NW5lYS9VV2RaMVUxcm5ERDFBRnV2cHQweUlHaSt4TURDOWU5REFucDhSZ0E2V1Q3WUxtQXM5blorOEZqbEcyNklKRDFVU0dQTFRibXJEQkF4UGZaUW9UWlk3U1htR2tBUXRDOGgiLCJleHAiOjE3MzU5OTgyNjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.bkxZhT_kqTUBt_F7X_ELDYuRb2vg8v1qaLrYr3eAxvk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="784a7dcc-84bb-43b8-a4cd-a9e7111c065b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
//def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
//Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
//context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0b1cb8c9-255f-40f7-af50-d053709c8bc3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": " "
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="087e049e-fbd0-48e0-95db-5fe64c8cb51d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8a92386d-d30c-45ea-b6d0-6c523a8173ab"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wvSwDDUp</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName13HCXh</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9d61433a-2cff-4193-bc37-e89d3a8c4d98</con:value></con:property><con:property><con:name>email</con:name><con:value>13HCXh@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid13HCXh</con:value></con:property><con:property><con:name>Work</con:name><con:value>13820910052</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8176428484</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname13HCXh</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname13HCXh</con:value></con:property></con:properties></con:testCase><con:testCase id="eb0bc195-627a-4e56-96b2-a98eb31cd374" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18 - To Verify, blank/Invalid 'type' for phoneNumbers field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8b52750c-c822-4afe-bb17-a8dca1cd7d9e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJEYzdRTTRhSU5JdndJZEFMZUNSajlrZ3RJYjUvVTFPT3FCZHliYkVuYjEzalRGT1ZwQUtxWnBkOWNaNWRJaE5pei9oZk1aTHhuSzBwK2EzVGRBNVhvQTV5Y2xwWThjeXFNZnFzWGxNWERMOUFHV05UdTZ5dGRjZmhaclYzcmZiQkdUZCtFcElmT2JKRXhNQ2V5RzdHQkJHVU4yRENCSEx0TXh5NWpBT0xWT2lsQS9NMXIxcy9SY01kV2dUcTRoODAiLCJleHAiOjE3MzU5OTgyNzAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.fqV9kKM6_JE_rLUGbwTno6MCwsnjMDl2oNbQ1ePiSuw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="917f46b1-a834-4da5-a0b2-f7f6473475c2"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f4502bc1-7c0f-4ab7-a9fa-d819505c3691"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestCase#Invalidtype}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="340b33ee-8858-49bd-b9c6-203cbcddb726"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7ee2d40d-ba9b-486d-a690-36e945779633"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WwNLV3T6</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamewmujlc</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>35b82812-5503-4f45-ba1f-24830ba08ad9</con:value></con:property><con:property><con:name>email</con:name><con:value>wmujlc@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidwmujlc</con:value></con:property><con:property><con:name>Work</con:name><con:value>41671578427</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3924183494</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamewmujlc</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamewmujlc</con:value></con:property><con:property><con:name>Invalidtype</con:name><con:value>Invalidtype</con:value></con:property></con:properties></con:testCase><con:testCase id="b985be6c-e052-4913-9548-9a637f72f877" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19 - To Verify ErrorMessage/Status Code, when 'primary' attribute as a string for email field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6ed06abc-ea58-45ed-9d3e-e97e05f6ffb2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJFVWpJL2NkT1d5SDJtY0ZnbDNzNU16MTNUbjBhVlNMdEJqS2kvT2hQd25ORWs3YUI2RVgvUjJRbDE4UTM1VVRHeFBjcWNJeXhLMEJwWDlTL1hpRG5Rek1kcWYvN2lzMFZxN25PclgrL0F4ME5XSUxxZmgvMHhJbXBWb0ljVVpHdE5UMjFhZTAzOGJBUVcyK3VsVVVZWnEyeTkvWWI5dlhHcTZZdllPb0FPNkpPQiszQnJZT2JnMEwrc3BYMGJ5QTciLCJleHAiOjE3MzU5OTgyNzQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Gj42iuUhp6GyCiEfSL3o5S09bYjY3k8WtjOS-u_x9Yc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3d0fde13-b72b-4d64-a25a-76a3e5f71305"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="dc829407-02f1-460a-85f4-af666c843ef2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": "${#TestCase#primary}",
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailDataType")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f865a079-1e55-47cf-81ee-a0e88cd6419d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>primary</con:name><con:value>Hello</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidbiv3mG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamebiv3mG</con:value></con:property><con:property><con:name>Email</con:name><con:value>biv3mG@xyz.com</con:value></con:property><con:property><con:name>Work</con:name><con:value>21475139423</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1272100708</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamebiv3mG</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamebiv3mG</con:value></con:property></con:properties></con:testCase><con:testCase id="958a6d16-f155-409f-8a8e-4b800d0dc880" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20 - To Verify ErrorMessage/Status Code, when 'primary' attribute as a string for phoneNumber field" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7a1338a-391d-460f-9051-9d7922fa206a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJZMm1ZSVEvV1hyU3JaUE1NZkJPTTF6emhJR1hwaC9sSHhxT1V1Qm1iSGFGOTJkcENYczlTMjRSQUFsdk44SC9zb3JuK0hTYkYxbTkxc0cwY1JHNXNzUnd4QXl6WXEyd3NIYml2N1dIN3FteGViQSs2VjNNdGtGbXpaaUN1T3hvcVJLQUtQL1NoZUpyQTVlbjVwSXRaRkwzbzkvUW90bEFtMDBLN1E5K3Z5aWdXT2RQTENpV0ZRc1Z2T1BjdnVPb3EiLCJleHAiOjE3MzU5OTgyNzcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zrBp2yOu-MSCSzaIQ6_6t2JkxpT--MRQr4PjPLSqxAs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fd62b4eb-e0ba-4b24-a031-3ab6707f40d7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0b27c54c-9c73-4483-b19b-da0ecb710b2a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c47a0fb2-9cc6-41ba-8ecb-486d537c381c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType


//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="be6e8be8-ef25-4a3a-8fc3-d9fdbc62aa4c" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d54398e2-4497-4934-9ff9-51304f9b6e90" name="Contains"><con:configuration><token>Please provide a valid PhoneNumber</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9e1a5dc1-76b3-46d6-8e93-87cc572149f3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_CX9Zf7vw</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameB1uZUE</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1767</con:value></con:property><con:property><con:name>email</con:name><con:value>B1uZUE@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidB1uZUE</con:value></con:property><con:property><con:name>Work</con:name><con:value>B1uZUE</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0854792771</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameB1uZUE</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameB1uZUE</con:value></con:property></con:properties></con:testCase><con:testCase id="2ee1d72c-814f-4aa9-a065-fd25c7fd1d47" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_21 - To Verify ErrorMessage/Status Code, when schema list is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7d095f50-5027-467b-a753-827fb9c91925"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJSZ2x3cGd3alVzcGs3TUovbzNNRXFsbC9tYmtXZXk0Zk9CbFRBVXZCZ3QwNjUycFpOcmxvVVQ4UFN1c1IyZTFMUlFMRnNxU2xraHhHdU04WlBuM1pBaFF4VmljZHlTZ1ZQTTFRb2l1cW13ZE1ORU1nMFNSWVB1Wm5rUndTVmJJMk9aWGtLR2UvOGEvcE95N0dwOGxxeHFmZkNuK21HWDdYbno2LzUyMWNSYllicDhobTBKcmF6N0daSndpZnF4LzciLCJleHAiOjE3MzU5OTgyODAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.d2QCWy8hx_sty4s8jSjgZXInNTkk_XilEQx0js3WCcw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="35e4a2c0-e3ef-4d48-a0a3-d0d3c8e882b7"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f7351d56-9ebc-40e3-9a2e-2fa8427ffde7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c47a0fb2-9cc6-41ba-8ecb-486d537c381c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("SchemaListMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="be6e8be8-ef25-4a3a-8fc3-d9fdbc62aa4c" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d54398e2-4497-4934-9ff9-51304f9b6e90" name="Contains"><con:configuration><token>The Schemas field is required.</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e50ea421-d22c-4515-9162-c7356de9d1f3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_pPglqSKm</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamefgU2Ut</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1767</con:value></con:property><con:property><con:name>email</con:name><con:value>fgU2Ut@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidfgU2Ut</con:value></con:property><con:property><con:name>Work</con:name><con:value>07018107986</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3024206777</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamefgU2Ut</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamefgU2Ut</con:value></con:property></con:properties></con:testCase><con:testCase id="238d8649-6f5f-48ac-8498-09a559937a6e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_22 - To Verify ErrorMessage/Status Code, when schema list is 'null' in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="cd3a1aa2-384f-4df4-8582-85db630a4f4b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtdDBVSy9Pcmo3T0xVNWNpYUFxZCs0TkVHdWJqd21Wb3drdkVZQmhPRTNPa3lWZWJIUWFsNGs4Kzg3UnRDcEhnM0tNZCtQMXRMRXlBNTZoekZSN1pyYThKd2V1U3pOYkpKbUpBZlNzQWwrWi8zVkdkb1RHenRNVkY3a0xBR3plUlA4aE50eVk3QkJRM25JV1p4OEJub0toRzN6K1padEgyR1F5UmtBSnh2cGxXVVR3UWsxQ2tpRlRyaUhYSTJ1SGsiLCJleHAiOjE3MzU5OTgyODMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.PeEdbCWLcJ8R8N9FzH1PqD4O_dzWolyrIIpuC9Bh4u8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7d3d141f-4a56-44e9-a90b-5d12201c63b2"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5dabf766-b8f2-4bef-88fd-f596f949af01"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestCase#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c47a0fb2-9cc6-41ba-8ecb-486d537c381c" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidSchemaList")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="be6e8be8-ef25-4a3a-8fc3-d9fdbc62aa4c" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d54398e2-4497-4934-9ff9-51304f9b6e90" name="Contains"><con:configuration><token>The field Schemas is invalid.</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="638e46c9-ed61-4ce8-846e-39ad492bf694"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_lH1Ev4aX</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameHlLQ5T</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1767</con:value></con:property><con:property><con:name>email</con:name><con:value>HlLQ5T@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidHlLQ5T</con:value></con:property><con:property><con:name>Work</con:name><con:value>63252296852</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6572456842</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameHlLQ5T</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameHlLQ5T</con:value></con:property><con:property><con:name>schemas</con:name><con:value>null</con:value></con:property></con:properties></con:testCase><con:testCase id="781abe56-31ea-436b-a8d8-d623e191e81b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_23 - To Verify Create single SCIM user with userName with 100 characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e3202e17-785c-4d08-a078-9d779737a64f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJVWDVDUGl2c005QUg1TmRLeFB2T0twL0I1cUhyT0ZGd0t2M1gzSCtCa1hnN2NrbUhweHlIQktQM1ZISzY4VmxNTnZWRFdNOHgwQ1E3aU8rMUJLN0ZZSlp4SXZibWRNWWhrSUhkZ3ZqOHpOQkMrNnZYc1NTd2dOY25IOFJ1OE5peHF2NHRRUkZCNjNSMTBBa2RkM3F3NGpWNWk3YVpnei92b1BRTHBGNVBWU2N3bzljOVAzaHR6djB6cFM0K2hIOFkiLCJleHAiOjE3MzU5OTgyODYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.g_s1DUOvVzsDBhvB4O8MuTrXC93RR36_sCxjpzA9V1g</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9daefcc7-05bc-4a0e-b80f-7e6eae72efdd"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
  def randomGen3 =RandomStringUtils.randomNumeric(100)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen3
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="84b09f74-e7bf-4d01-90d0-a35623b30243"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5a9199d8-7667-4478-a44c-331241bcae2f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cee337e2-bd08-49ce-9fa9-53142a0ef328"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_sp2Qf5VL</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName1378978596210718034017598532744184649904155246657495301742865978737149108977692675527947679755780732</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b4bd1c78-db1f-4ec3-b160-ddecf19ea128</con:value></con:property><con:property><con:name>email</con:name><con:value>1brvkM@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid1brvkM</con:value></con:property><con:property><con:name>Work</con:name><con:value>18465772123</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6309206784</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname1brvkM</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname1brvkM</con:value></con:property></con:properties></con:testCase><con:testCase id="24e1292f-8059-4d9c-a222-4b35aeb872f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_24 - To verify, SCIM user is created when active parameter not provided in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d9aa00f4-05c4-45dc-95e7-8c714ccf29af"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJqNHYxbmhDUDlkNzVHRXRkejRVWEl5UVdHRHdxN2NaREp4RU9kcVFoMHVqMTlVRFlXZjNUWGw5ZDVVaVFsditPcEhEdEtrRExXcWE3TEpYOGdaY0U5YzZHOE1vbWkvL1E3SlpMSTV1OWI2SFoxano5WDdiZytrYUhUdDF1L1JFUnVtQ2ZYaDFZZ1l2TTNaVTFVampEaXhBK1ltRzhhWnVkczB0S2htZk1KZ2N2d2NveXptZWVtbE5XbkNSN2UvWFYiLCJleHAiOjE3MzU5OTgyODksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.kPJ4AyuSXWN3H-NqzUHZLH-NInzTDnp96lRlxq7DWU0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3c865b52-14b2-400e-8096-9e36aad50706"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4e124deb-ccdb-472b-b6e0-43c8722f1de6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def active = jsonObject.active
assert active == true



//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="82aab0d3-4f5c-4f9b-a312-2b02dd422ded"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_SD5dk5z3</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName6csDHS</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5062dab2-4e17-434e-af74-27e533dd8c02</con:value></con:property><con:property><con:name>email</con:name><con:value>6csDHS@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid6csDHS</con:value></con:property><con:property><con:name>Work</con:name><con:value>32912498391</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4030911336</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname6csDHS</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname6csDHS</con:value></con:property></con:properties></con:testCase><con:testCase id="58869f15-422f-4de1-99ec-968da466e39d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_25 - To Verify response when no value is given for preferred language" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3d258453-0191-4455-9472-46b813a65d71"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRMytMUXd4QlFKZVFDSHg2YXhQUlR0RUZYOEovUVFEKyt6T040NURDZFFaMlQvY0ZEeTd6dzhzTVRwRjVaOC9GZEsyK0J4MmsxdmhyVmJKS3NNMi9HTjFCVnBkUXJScXl5TklRVjlnaDhNeSthZnlaVy94eWg4SnFEa3RJWms5YWZFNWV3bzRNcGw0VlBTeTgrRm9mQXEwZW4xcG04ZDNSODhGWGtValhaOU04UWtRbFNERHgxRjFpWVFEWjZIQ28iLCJleHAiOjE3MzU5OTgyOTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.u4xOHQ42vPCnqOluZE71VmTjVhnZ7gvnLvyYJ2D3BZo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7276bc99-2b63-4d88-93a5-872de263c2bc"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="be707a27-a32e-4a2a-ba9b-6736d505b5e7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": " ",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId

def active = jsonObject.active
assert active == true



//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage

assert ActualLanguage == null


//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="04e9b820-a01d-4522-a938-f231196f3b4c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7c62f6b1-9668-47e3-a850-d23d9ef09cec"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_PZl6TJUE</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameqtRM69</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e4bc5867-dd6a-4d6b-814f-6168e04c77eb</con:value></con:property><con:property><con:name>email</con:name><con:value>qtRM69@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidqtRM69</con:value></con:property><con:property><con:name>Work</con:name><con:value>72769545063</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7898478475</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameqtRM69</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameqtRM69</con:value></con:property></con:properties></con:testCase><con:testCase id="9c062441-6e1c-418d-8e39-adcf69ac6281" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_26 - To Verify response when no value is given for location" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e19273b4-5429-47f3-960f-00c59c2eecc9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRNmdVSlkya2JtUnBwME9lNkg0YmtwMFlhRE1POGJTcnd0MHpFUGhPK0NNVDQxaXl4ak1SNmExSkdrdTVpRTdoSmZOQnlLdjdOdXphYXJmT2djbFpZWElUN0tOZktYK3FsOGlxMk1HMXBMSnd5bUYrbVdseG9jNUZwLzViQWsxUGtzVWx5bWpWUnBITysxUDBtaDZtS3YzVGxKWXZocU51R3EwQklTT2NKM0hraDdncXJORWI5bjdIMmpMa3VoMHAiLCJleHAiOjE3MzU5OTgyOTYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zLpgp2lH88bl031N0i5FHHOEEyMJSz3B4YM_LTIienw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cac18d00-f9f8-4a84-b202-ac5bd59e3720"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="9b2b5d93-f036-4f7d-8ee6-caa628e979a8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": " "
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
//assert locality == [null] 

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bf6f8f7e-5f88-4f6f-a830-462267e599d8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="959a1fb3-aba6-4b01-8359-29757f3d4a63"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_IV3vxxzY</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameezKsKT</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f8e7b97a-3e4a-4779-8b9d-f376ba9fdbed</con:value></con:property><con:property><con:name>email</con:name><con:value>ezKsKT@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidezKsKT</con:value></con:property><con:property><con:name>Work</con:name><con:value>53863766469</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>3140609681</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameezKsKT</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameezKsKT</con:value></con:property></con:properties></con:testCase><con:testCase id="6478be49-f0e3-4885-b0e2-26977d977ae2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_27 - To Verify response when no value is given for Country" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="336edca9-6e5e-4013-9edc-f6722aaef494"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJtQTVzd01VaWhVd3VSR3hZSDNYNjV3YmFRZzRWeXVOQ0UzVXBwTzJzZ1d0RHFzWEhTRWxGbUNML3QzWTV1N1RaRDZVRDJLRGdCL2Jpa0RMdVBBL2F3R01oQjlzaXVQYU51Yk9TTUVXOUpnYU5xYzRxK2xDWnM0TDloV0JyUzJSSUlDZVEweHFIS0srOEtjcXRhY0J1aCtpMmgvRjVHUkdLOTUxY3BUSDVTWFE9IiwiZXhwIjoxNzM1OTk4Mjk5LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.0KxclnHOEYHrnsqBaKmJzMBtGFq42aMxiNVXEHWt9i0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2fe1fea8-1457-48f8-a784-0caea1871cf1"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f01774b3-6c28-4b03-ab74-9117c7e83445"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="57d7f4c1-fadd-4ad8-bee5-bf1bbcf9ec1f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="959bcfa6-d8fa-49e9-beba-dbc3fd87ceda"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_sWcIv0cQ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameusi2Vi</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>a62b04b5-85a3-40a2-8bf5-918bd477d9ac</con:value></con:property><con:property><con:name>email</con:name><con:value>usi2Vi@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>fr-FR</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidusi2Vi</con:value></con:property><con:property><con:name>Work</con:name><con:value>80264682166</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>9518303148</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnameusi2Vi</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnameusi2Vi</con:value></con:property></con:properties></con:testCase><con:testCase id="eb65c20b-123f-4219-9668-c61eff36a5c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_28- To Verify response when null or no value is given for Department" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8cdc0c42-3326-47a5-9012-27604a359801"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJYMmQ1cHQzakt6MnErSkpWekgzRnUvTWc5TGhvaGR3UWx6RHZNQ041MVBQY2V1VGpPYXFuZ3BLbVVhUEp2cVUyR1o3MmVKUDhxeFo0Z0V1MGdaUmtwUnhwSXZHYW45L2g3Sk5XQkc5c1FTRUJ4bksxb21HckNWaXY4bStLYjYrV1o0ZTR6UXI5NmRSeUM1V1FzNCtzRGoyQ1NHZmo0am5TTDE4bS8xUVJ6cUU9IiwiZXhwIjoxNzM1OTk4MzAzLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.g-UU75QavU_WtviaWBl6qoGxqvQnX88c-V7NrZ9HK7Q</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c4f62547-5db6-422f-b86a-e0bb7cc77d1b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="5d248dd0-2b87-4c69-971a-0bcb6c2e0095"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "null",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="f9d144ef-3d7e-403a-a557-476a06e0a64d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="06ecc3eb-e869-462c-bd3d-db41cc2bdc08"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mPstu1K6</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameQh6XxT</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3ab5c0ab-3bfb-4aac-849a-13c9dc1e0514</con:value></con:property><con:property><con:name>email</con:name><con:value>Qh6XxT@xyz.com</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidQh6XxT</con:value></con:property><con:property><con:name>Work</con:name><con:value>94406361031</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>2725166188</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameQh6XxT</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameQh6XxT</con:value></con:property></con:properties></con:testCase><con:testCase id="6fcfe935-fe22-4283-9a62-9f017898a921" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_29 - To Verify response when null or no value is given for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9499fba6-4b75-4142-85b8-d0e287db3ceb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrWjNaaFYvVGRwdzVBN1YyTlpPS1FweWMyeE4yWHQ0bjJqOHRWdjZXU296SUlsbXVrN1NvQzNIeDZqdlVjZ3A3V0ZhQ2VhQVpJVjE0SWcrdWZoYVNOUmVXRzFaaHBBV0NwWkhhZ0d5MDBGRWlrNEx0dDZ5bTBwQUFrWXNBVHVkNHl4NHlUUjI4WnZaRDQ1TnQrR0pZd1NLWUN4SW1UZEVZenZHVmxmZUh0SGVnRnVteld0R1poNkNCM1V5ZXVUSUUiLCJleHAiOjE3MzU5OTgzMDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._eSnSflg3Mc_Y15lt2fE-vMrLpPQ9wYQZbn6r4bwK74</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3e4741e7-8c07-4168-a5a1-fbf3f8378fea"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="141fe911-e017-43f8-9ab3-d56c5cbe950a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}",
        "costCenter": ""
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bbb37d8a-48c0-4adc-ba2f-5640fa8f5fdb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="157e1e29-d359-416e-a868-7464105e23ac"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_niLVvJZY</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameuoBwRO</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>41e35f87-cee2-4d0a-970f-cd05c81d7699</con:value></con:property><con:property><con:name>email</con:name><con:value>uoBwRO@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extiduoBwRO</con:value></con:property><con:property><con:name>Work</con:name><con:value>10905582580</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8626637349</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameuoBwRO</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameuoBwRO</con:value></con:property></con:properties></con:testCase><con:testCase id="ed4a2c99-8324-4627-b77f-133034c54e96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_30 - To Verify response when preferred language parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f52e01ad-e2d9-4e17-b80f-dd20099aa7f2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJSRUt3MVVrUWVoOTNrUG1FSkhnVDNoRy9jT0MvdVBqSmgxejlZUXN2Vk1lZkpGVnRDOElFUUZFczd3VWpCRDFxVzdmVGRITFMzUjh4SHpOc2xIUEVkV1ZpUysrT2JmWWludG54RGN4NERqbUdoLzVFcTNTYXNHU1dzMWN3d1ZYOVJ2TE5TRWdIZGVCaFB5V2tKQ2l2VjhNWjBzT1lLR2xrU2tUZW5VaGVVTFpBcnpObkZKemhjWmN4MkNKZmdldjMiLCJleHAiOjE3MzU5OTgzMTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.5zrZX5XFHqkayVBF35xXaFPGFjzN4H7o2rXCFGIyYKc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f9dfaf7f-f6e8-4bb0-ad88-d890e5c605a0"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="e823e987-9661-4d06-a4d9-942a9d4c99ac"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
   
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}",
        "costCenter": "${#TestSuite#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
// Verify Language  null value
def language = jsonObject.preferredLanguage
assert language == null
//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bebfb69d-4e8e-4897-8fa4-0689c8f7047b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="75b06845-8f7c-4630-9cf3-645c92e99447"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_qBB5C08O</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamegltwkg</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>232c5861-0720-4adb-a401-a74446143d8e</con:value></con:property><con:property><con:name>email</con:name><con:value>gltwkg@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidgltwkg</con:value></con:property><con:property><con:name>Work</con:name><con:value>45292894496</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4438889570</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamegltwkg</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamegltwkg</con:value></con:property></con:properties></con:testCase><con:testCase id="5f8d95a0-0eff-4f60-b9f1-fa06a7e2fd5d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_31- To Verify response when Country parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0a87b723-d57d-4205-b9fd-cdf28fc0ada4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJwZ1J1U0RoWmEwd1IrQTRpQ2htUVFYcUNGVFZBVzBzTndydy9EcFEza1BzUlNjRTFQMzdwWGducHZqOC94by9mLzZuVFpFeEMrNFRGL1NLTS9kU0NnQzBIWjZCdXhNbDF4M1RkcVZaZzIwbVZ2VmV3UTlkRVBNd3NnNzhPZ3NkRmtwMXpiaGUxdzlON2ZvaUtrYmc2TVFqQUkrYjhuTHVDN1ZxeGFTTDdWdmx5N2ZzaUtsV2ZyNlVRWGFxZVVjRjAiLCJleHAiOjE3MzU5OTgzMTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.f5BM6Ts4Cv-Kh1DSYeOMXdXgxaIfMQqCvQrGJsK6aMw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="34f344c9-2cfc-4f6f-bcfa-00c67ee480ec"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="49d330ca-4096-4511-bd6e-b3522560dec6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country ==[null]
assert locality != null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="2f9ee470-0f29-42c8-9b7d-dbdda2503c44"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="269b5acc-68f3-47f9-804f-ae29f56b302d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_MYB0k8AS</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName3DAkX6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>93ac280a-d55d-4d76-a034-c8aa60266afa</con:value></con:property><con:property><con:name>email</con:name><con:value>3DAkX6@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extid3DAkX6</con:value></con:property><con:property><con:name>Work</con:name><con:value>79810846049</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4762669678</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname3DAkX6</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname3DAkX6</con:value></con:property></con:properties></con:testCase><con:testCase id="8a4db617-b90f-4bd9-8a46-bd5d776322a2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_32- To Verify response when location parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d9a300d2-4d65-4b34-a520-135af85c0cbe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIvdGtubDEwTVRLelM0RnVza0Y2SXJia0VVSldzUE5OZWJjT0Y5NDJvUCt6aW9DYUlBYUorbjd1Zi9QbHFHbXVsMndiWnhpM3pXMy9ZNk8yNDZoM2p4OFBnKytnZlF1NisrV1lZVjluRFk5enFWOVFmYjdpdlBzSXRSTWFSbkVWR2pyK2Z5TjJVYVdsbm9LK3VkMEF5cGRSMG1Sa01udXNCSTVQcFV3eGxGZGFyTWpYT0hNVW14YkY5Y2lUNWJETEsiLCJleHAiOjE3MzU5OTgzMTcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.6IurFPxzB585wqmgqt--MmZ-aoyqG907qK_cV_4FF3c</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="24d16641-a3a0-4661-b75b-ec2ae56f933a"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="25316df4-506c-4e61-b54a-5f27c407f78f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality == [null]




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="1ef33c84-a4e0-436e-9903-fb92a0cff982"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c10a1c06-e68e-4d94-a78e-084711c363a4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_DCxUZvgU</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameyBfbka</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>11f170ac-5e1f-4c81-824a-bd2af3591d52</con:value></con:property><con:property><con:name>email</con:name><con:value>yBfbka@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>hu-HU</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidyBfbka</con:value></con:property><con:property><con:name>Work</con:name><con:value>71674399420</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4276555627</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameyBfbka</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameyBfbka</con:value></con:property></con:properties></con:testCase><con:testCase id="74b1c7c6-18ad-4cef-ac0c-c50f6752ea68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_33- To Verify response when Department parameter is not given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3d1f64b7-9867-4a94-be22-c78bdfbcc186"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5ZFdhWjl2QWlUOC8vNHdBQkdROU96MnBYMDZ5NDk1VEtaZjNHYUJ5SEpucEpyNFBkK1Y0OEU0MlA1NFlkY21CZDBsRi8vYTIzNnZPYXpZM0VkMWhjd3BVNkRrWFZZSFVNbVdoSnc2SzhnNS9vWW83QTBMOVpPb2kzTzRBVnhXcC9nMmV5c3FnM1paY1QvQXBxaUxKRzNIc0FpTCtGSVhRN1RNUDQreDRUWVFFbFNSSzg4eDUwaDJxVVYvTW9CNXkiLCJleHAiOjE3MzU5OTgzMjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.AonDuepO3NH92UJHrdyR97CvbEEon_a_W2opQNhS7_w</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cfccef24-ff35-4df9-bc1d-059b6f1f973b"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="7db50fd1-ea11-488d-a0f2-6b562983d186"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="65c550c0-bc3f-46ff-a152-21ea5693acc0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="170c1afe-530e-4d68-90cc-1e3886f0b169"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_LSHS9n53</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameDVTXur</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>888c523c-f570-4f7b-8239-26d888010689</con:value></con:property><con:property><con:name>email</con:name><con:value>DVTXur@xyz.com</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidDVTXur</con:value></con:property><con:property><con:name>Work</con:name><con:value>91190765797</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0020260242</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameDVTXur</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameDVTXur</con:value></con:property></con:properties></con:testCase><con:testCase id="9c7f59ad-5475-4106-b8ae-f03ec3be6287" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_34 - To Verify response when no parameter is given for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3a25f788-7d14-40fd-88e3-fc951b6f4dbe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrTVhLSm9YWFIzSkpldGZnbWdsU09PaWFCa3N3NDd5dVhDeVAwaUlNWFRYVW1weUVjSjlyOFFPT3MvK0RMQVV4RG9mL2xSNVdyVE1ydC9ZenYwb1FrelNnR0E1bWw4bVltbjczb2k1VUhGRWNKQTZCdFpXbEFwRTFWQ1NIeEh2bGlET2hBNURGcmQxcVV3TGlsN3JLemRjRVlVcWpLbEVjeUNKL0xwWjRqcythR0NVM1owRmszQ21ZTHZScmhVTE0iLCJleHAiOjE3MzU5OTgzMjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.3JkJUCY3AlVE2UdHO-W2dLRfkulHb5E1CBapoJD_8Nw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1c34f566-c5ca-475b-869b-a7ee55169683"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="c22e892f-6532-4ebd-8970-d536e5e4b75b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}"
        
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
//Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//
//assert ActualcostCenter == null

//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c45eb486-5761-463a-a63a-5b5d0d58d3de"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e37046e6-edba-4db9-93ab-6f0635a6a436"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_jy1aPJUm</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamek3cHHv</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1d130f2f-1fcf-47ec-a6e2-b215b3a73802</con:value></con:property><con:property><con:name>email</con:name><con:value>k3cHHv@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>Language</con:name><con:value>nl-NL</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidk3cHHv</con:value></con:property><con:property><con:name>Work</con:name><con:value>46384540745</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6354483376</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamek3cHHv</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamek3cHHv</con:value></con:property></con:properties></con:testCase><con:testCase id="137f3725-76c8-4706-b90a-941cb41f2532" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_35 - To Verify response when no attributes are given under addresses" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="65577801-f5da-4e05-a36a-b8a4ed72d9ef"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJJL05XZ2FXdCtIK2kxTlNBN2ZVeUZ3bEgwaWNlcFdnSE9Vdk83TG9ETkNWVFE5THN0OUQ0KzNXMW9qYlZ0dWZvdlNiTjQxWnhWRmdtbjRNVG85Y201eVZ1RWJuM3FuVWg0d2xWMm8zUkJPRGlzS2t4MGRya1dINmZYRmVmMys3ZGpmU2tZc3l1ME9JK2daQWdRVVFkY2dpaEZ0WGJoZ3FweW5lMmQ0SFBVem50QjdEblVkMmlJVm5IM1dsK2hweEMiLCJleHAiOjE3MzU5OTgzMjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.PkP_Wn28KOf5JxEqQcaszANG9yqrR5bsZNtvxWFC7_Q</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cdc4eb9f-1cc7-4c3b-a5e8-0a3e86f2e536"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="54e9c7f7-dc9a-4136-a81d-ccd5fbe06804"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestSuite#department}"
        
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
//Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//
//assert ActualcostCenter == null

//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="ac3adfbe-0686-4ece-a2ec-1a13cf4e1242"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="be1efcd1-80ab-4e05-9f21-a8f8aac815c0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7Uzcg7uJ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamexBsBNH</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5dfba6d5-0426-4afb-ab0e-692924319c43</con:value></con:property><con:property><con:name>email</con:name><con:value>xBsBNH@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidxBsBNH</con:value></con:property><con:property><con:name>Work</con:name><con:value>96937553900</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>1731930641</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamexBsBNH</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamexBsBNH</con:value></con:property></con:properties></con:testCase><con:testCase id="f3aafd00-6e1a-4cbd-8f0c-10c8a83d9207" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_36- To Verify response when no attributes are given under extension schemas" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e737d21e-db2e-4730-bfed-2e0d17abffb5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBM29tY3orK0wrTnV4RXBBVDg1d3ZMSEJ4d2JkYWIvOHhXUUthZWMxRHFXMHJuUjhTd0hSaFRpY3JnS1A4RGhWaDYwRTlEcE10OS9jMzk5bS9LS2NQOG5Da0xWUjhubStaRnBEZkg0Mk1OdXJCWG14cU01T2cwekpRNi9jOEdtaWJ6QzJGK0ZRM0xIdkphVG1leENNK09tSWRpeVJSL1Zkalh0aVVnWmhGQjJENjhSdzhxQnR6WmR0L3MyQ3IxRjYiLCJleHAiOjE3MzU5OTgzMzEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.kY1zwl54vaUbUx-uAhzKiKI9Aejb7KTblBfepgWewQ4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e283f728-e557-4f45-854c-dee9f22959a6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="d7286e97-6664-4385-ac41-af0a3e1dc3bc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
             "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#locality}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalid")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
//Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//
//assert ActualcostCenter == null

//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location  null value
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country !=null
assert locality !=null




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="54cb7062-8b79-45ed-9da1-436d985ea722"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b869a10e-8818-45e2-9cc8-ab30fb9eb73e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_VicZEoSX</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamegWxwlh</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1dc7ab8e-f94c-4ce7-b2a0-70de024d38fd</con:value></con:property><con:property><con:name>email</con:name><con:value>gWxwlh@xyz.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidgWxwlh</con:value></con:property><con:property><con:name>Work</con:name><con:value>31847370202</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4238813455</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamegWxwlh</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamegWxwlh</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>activeFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>typeCellular</con:name><con:value>Cellular</con:value></con:property><con:property><con:name>typeCell</con:name><con:value>cell</con:value></con:property></con:properties></con:testSuite><con:testSuite id="4318299a-a373-456a-bfaf-b519b5446432" name="UpdateSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2ae2f313-8fd7-48eb-827c-ec23ef19c69b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify by updating users emails attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2bd50f55-8878-4a29-a5b6-5b9e41c224b9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImZtYXJ5WTArMkdWS1MxMkUxWjNVVUNQc2ZhYlp5SkJ4RlhGSThGYWVBWEhxVkNMZ1d2amIvSkpjdlNDMDZ1ZUNyYWN4dDBDOWJ0Nk5oSHFSRG11M29naHlXOHUvOXV0TUg5K04wcTd5eFJYaUorM2JLUGJxcmMrWHdtakdIYkJZdVphZmN3S1hNcXk5UDBlUG5nK1NDR3Y0NGlnMUZ5KzZyRzZmMjdDNjdvMUl6OVd6MmRNRjFqQlcrWmxBQmo3RCIsImV4cCI6MTczNDc4NzI1MCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.wB3gq7PmQcj_uFzYQf2IIJOjDk_s5mWKx1aWHz7CcYc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0a0be016-8565-4df3-a192-47dccb08abaa"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="ee46d4d2-5804-46b0-a55b-075263b615a8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876",
            "type": "work"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="e7b34e06-ae41-49d9-8819-dde29dccb5d5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
     "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
    "preferredLanguage": "pt-PT",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "9014238482"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber



//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a3492415-235f-4e17-9db4-84a9679c36de"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WH1v3Yhy</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_WH1v3Yhy</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>d4cf19a9-2e1c-41d7-aaf4-27f434bc686f</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="26e554a3-f39c-4f3b-b919-cc95a230324c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To verify, SCIM user is updated when active parameter not provided in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6e0126c1-06e2-410e-9f8a-6ada4e4262fe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjFIamNCL2dWMm5YWnB5Wm1aajlXaEdESjA5WnBuQXpncThSK3NFRUZ3Zy9zdFhDKzQ0UEQ0dklJTWFiRlFBVm5qZ2NPWVdsYXNtcG1mVy8wVzNFWkRZdHloT29RMkhJS1ovN01IMFlVMjdyaC9lbkx2RjNRc3BiallGYkV6dEtvMlZGUGUyOG0vQmR2VDBabDllalg4TnZSczhCTTNZMWZJQmQ5WkNYT0ozUXVpaG1RcCsrVWRUSUFkbWkyQnZXQyIsImV4cCI6MTczNDc4NzI1NSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.ZdbryZSxWnPXZn5XPmlcR5VgK-DS7pZeVnQrKLhacVU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fdeff7b7-f552-4904-abb8-e6e15b47c713"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

//String inputPhoneNumber = "1234567890";
//String number = inputPhoneNumber.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="b29c438d-fb25-4f27-befc-284e31168325"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
       
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="12811fbe-3521-407c-a6bf-e8fac434c19f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        
    "emails": [{
            "primary": true,
            "value": "Update5456Email@condecosoftware.com"
        },
        {
            "primary": false,
            "value": "testemail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM_UPDATE"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
//
//// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//
////Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
//
context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

////Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")
log.info ExpectedStatusCode

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request
//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber



//String inputPhoneNumber = "1234567890";
//String number = inputPhoneNumber.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info "number"


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="14951568-5de0-4772-9325-c068cb4c48dc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_yuF6UZKT</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_yuF6UZKT</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>06fc17b7-9f71-4cfc-8b9b-61941d077df1</con:value></con:property><con:property><con:name>email</con:name><con:value>Update5456Email@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="4746ff75-c856-45ae-98c1-661fc58bd4d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify by updating users first name attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8af4d2cd-ab18-4671-bf21-088272a27e4b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InJ6OU4xY3FXaWx0dFlvdWlMUmJUWEppZlZ2bnJTNk5DSldpKzRaSmppbGo3YVlHb1U3NW9OcFZXb3VGTG5XVGRRTG9hUWVWOVdYcGFCdEEvMkIrMU10THJSWDlaZFIxb3VCUEcxRE1od242TjVIb2UyYmpheWFPcFlOSVdaa2h0dFNxeU54WkVINVZRa29CbUkreXhOcHBteXM2ZXNiOEdwQyttc3U2V2IyUT0iLCJleHAiOjE3MzQ3ODcyNjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.lgnYZTNpJj-hifRnDBAliH5pnlpujDwr8QXEiU3BCK0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="ae942f8a-fc0f-4bbe-b130-7656834bf25d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="2fe0e5eb-109f-4518-a96b-35d63dbfc9eb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="7a5a4f9c-66db-4107-9f40-028b86a5833e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM_UPDATE"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

//String inputPhoneNumber = "1234567890";
//String number = inputPhoneNumber.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5f76cd78-1446-4e0b-8d51-7c6e2c327309"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_rXo0rTLZ</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_rXo0rTLZ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ea275cb6-a520-4b6c-8c61-c5cfb6022811</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdateEmail@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="da6aa803-947d-442e-ad29-5e250d34e073" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify by updating users last name attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="582d93b9-6aaf-4ffd-bbfa-0d3fedf120bc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjRjR0FXc1pRc2h3SHkrWXZJajJ4Wm4wSks2dlNGY0FXcGJYVy83eHFiY0NLM0ZNVVpqdklDSmgzdDFTTk9rc2pZTlp2cHFweE9uQU9zRjNTZVFHMWZNZVRJbkhoSjJRb2xOdXVUd01vWkI2UmlZa0MrcXh0a0xSVlI1bGNiUXAwNmJGbGErSkhVV3A2TEhQZkZEMjhFMFA4TGdZL2RhRncwdTA3R2tCRGJ3MTd3bVN2RWNzUjJiTXVxRGxLMzJZQiIsImV4cCI6MTczNDc4NzI2MywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.occzyDMNROyVqSBTXXXJnqFYVfN6XJNtlfAd4HDTdTo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e0be2a00-2bc3-419d-a0af-ecc37f026bd0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="7e682743-635b-4956-a278-70a075a46644"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="024897a5-e52c-43b1-bb0c-bb06ab1aca28"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER_UPDATE",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="54549304-ca8f-4a6e-99e6-ee058d874829"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_529k8nsU</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_529k8nsU</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>000aa658-5bef-454c-816a-09f37d62ca4e</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdateEmail@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="5d920e23-877f-4165-ad01-9f15b3e32283" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To Verify by updating users Telephone no attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e4425e43-a553-4736-addf-9092d45afd21"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImRkMmZ2WldFN3oza1FVNGtheTcrcFFVSGpRMi9Yd0RuWHpHVlZYRHRsL0I0RWNCL2JEZTZnQXl4Q3M2aDNVeUVTZEhuYUZPYjJkMHpxb3VnY2NxU0gwYW1BN3pmUFBCRG8zT0oyM2tWR3dCTnJEcVNORmRDc2xrVDNqdWNKd1RSVzhUZFQyVk9YRDBLenNKcVpIK2RwSFNJK1ZyblM1SWJMWElnbndzWG9ReW80dUlzazRNZmtzTEFDNjBIci9zdSIsImV4cCI6MTczNDc4NzI2NiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.d0gsFx1xKjRnHfTrwN1V96W_RooULfRwjZEHfjEVPrU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e8304397-2bab-4dd1-8901-3fe7578f7f4a"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="bc55358f-0da7-4c43-88de-89734af527f7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="de241910-bcf0-4ab1-8b6b-aacb5de5dedb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067159876"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="15058300-fb06-4c7a-80e4-7fc006d27ad1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_YwxKUrrv</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_YwxKUrrv</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>dfb56155-276e-44c8-ac3f-934697184210</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdateEmail@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="cfa6911a-8e35-416d-a11e-725b9592ccae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To Verify by updating users Mobile no attribute" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e5f3a89e-dc01-40f8-8f32-525a6ec3b650"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlZvVE1Va3NVVnBZald2UlNuSS9CMzFSYURJUnIrNk9GNUMwM0J1UEFpYUFGb1ZwendHNloxN0h3bVllQzVJYjdhM1kwZnlFR3VEQkp3Q3FFZnBuODZTdmFtVUlJOU90NUd6NG1DS2xyUmtPSG1ZRi92d0sySW02bndObjVGcFp4a1EyS3ZSQzF5QThQUnRKRU9UQ0dDUjBqNWZ4cm16cHFsVmlydWtoK0JJL0oxMmN4V20vUmhDYmlxNzZ4c3JtSyIsImV4cCI6MTczNDc4NzI2OSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.pw4xE_D7csrPGQvLlHjU0Z8iWdRkKUQ71mRkRzcVu8s</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2e10dba5-fde9-4b48-916f-3a0812dadc58"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="933d893e-c928-49b0-9a2d-7702f520ab9f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="302249d0-fd07-4504-b0f0-27f81afc09df"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "Email@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178248960"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request
//
//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0e359c3d-a55f-43f4-b22f-dad513c174e3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_eZoMDqVu</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_eZoMDqVu</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f9b21a90-ec18-46c7-aa75-88de372ba3e2</con:value></con:property><con:property><con:name>email</con:name><con:value>Email@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="a9cf62b1-cce3-489b-882f-4bba435f0b89" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To Verify by updating all the Users attributes" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ecad137e-7e43-4493-89f1-8401f6e8e04d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IldiZnF2MTQwTjJlU2JkOHpEa0ZqdEFYbEpRK1pZbHFnT3FWQzMyNWpibmpZSGFmVU1IT1MvTnNQWG5sZjNVaXN0L05SQ0MyV3F1K0NTNVN5dTBSUzZMRlBuZ01BdVMrNWE3U0pDYkx5VHUzZElZcnJzSytiRy93b0dFNTU5QitzS2Yxb0lHVWFWQlhub1NkUGNCMjBlNXYyZkpYUUFaOUgwQ0JUOXhpL0FRND0iLCJleHAiOjE3MzQ3ODcyNzMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.eTlxMRzJm5lbqFUh2jMVNvtUiKEz-2GoxojD1klM7nI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="841a96ed-feae-4e82-a3b7-bbc5d90ae1a4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="a0c3a02e-8fc8-46ba-a035-1a21358929c2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="7c67a401-90ee-4787-9618-54be412501af"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111127"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178248789"
        }],
   "name": {
            "familyName": "USER_Edit",
            "givenName": "SCIM_Update"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1dbcc799-a70b-483b-bab8-ffc6fa4cdd42"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_PsBbksSn</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_PsBbksSn</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>efdac45f-1825-416d-abc6-850c990326e6</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdateEmail@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="bd9e347d-47b0-4fde-acc1-7d7e082c09b4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08-To verify that updated Username is unique in Condeco DB" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="aaff5ba9-bf0a-4a5d-82af-9bc891a2ee35"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjUvMHM5b2g5SDh3QXduaFFyejRXQzJtMTRGeW1hVVVhSjFtMjBLclEwajRKaCtkenpjMnQ4a2F3R25wYzQyS3NrUzNXYWZUYXdkdWRacnhCR0s2VHUyMkplMHNRd3R4TGU5blNkRTVCVmZPQmorTnhscFV5VWtlRU9NUEplZmdzaVZEcGFHbUhkYW1CZE1rcU9SVk5SNlZmdTdPTmpTV2pDRlJHTG5CSWUvUmo1YjFnNzVSM0RKUUNZUENlZFUwTCIsImV4cCI6MTczNDc4NzI3NSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.uL1Gpl4XxrXpOteqbGSwXW1GZ7w69ufvhm5uxvEcb1o</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f5287896-7d43-4923-a5ca-664d40f899b2"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userName1", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="83fe55b8-740f-4432-a7ce-a7755caf3f12"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="c3b248ed-9be4-4584-ac8c-56fce0000ef7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User",
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
    ],
  
    "externalId":  "${#TestCase#userExtId}",
   
    "meta": {
        "resourceType": "User",
        "created": "2021-11-16T17:39:06.937",
        "location": "https://scimqa.condecodev.com/scim/api/V1/users/1202"
    },
     "userName":  "${#TestCase#userName1}",
    "name": {
        "familyName": "firstname",
        "givenName": "lastname"
    },
    "active": true,
    "emails": [
        {
            "primary": true,
            "value": "audit@condecosoftware.com"
        }
    ],
    "phoneNumbers": [
        {
            "primary": true,
            "value": "98765721033"
        },
         {
            "primary": false,
            "type": "mobile",
            "value": "9876543210"
        }
    ],
    "preferredLanguage": "en-GB",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "110233"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

//Verify the Language for User
def ActualuserName = jsonObject.userName
def ExpecteduserName = context.testCase.getPropertyValue("userName1")
assert ActualuserName == ExpecteduserName
log.info ActualuserName

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a938b35e-d67b-4cde-9559-52d9d6ab1c62"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_YCAzitCR</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_YCAzitCR</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>165fe930-23f8-44ea-8d05-9c365d11c15d</con:value></con:property><con:property><con:name>email</con:name><con:value>audit@condecosoftware.com</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_YCAzitCR</con:value></con:property></con:properties></con:testCase><con:testCase id="bc78dea4-34af-48b6-a86e-22e496822e74" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09-To verify the response message when Username given is present in Enterprise DB" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ce1c712a-ac59-4aa8-8930-d11e14633681"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Im1xaHVxVFRsYnFSOFNhUGFGREwzR3A0dnkrT2drQnNxWUxCWG1WRFZpSitHODlXa3d5RUM3UVAzenVHdWdTMkJXTEFLcnNzTnhSQ0VNa0srSnZOSXZ0Snc5RHdpakJwclpYQ04wOGR5OVdDOEk3a2FVb1cxSWZlWkp1Zmx4cytIQVV6TGZnZGxoczIyNUFoaDF4WTJNZU4wKzFtYVQyUHJEUHVQSUhoVjVSckhtK3NDc1Ztai8vNkdUdmovZlJqciIsImV4cCI6MTczNDc4NzI3OCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.VRR3JDRV-nrkIlA4LYS1Vg-XUaAinwN0Y5bCDUTCcEg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="ca948ef6-0123-4cc8-bcd1-b73754abdf26"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userName1", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="3261ae32-da53-4117-9bde-afab48b6031b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="dc6dbe3a-c8c2-4dd2-b41e-e846dbc3a9c5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User",
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
    ],
  
    "externalId":  "${#TestCase#userExtId}",
   
    "meta": {
        "resourceType": "User",
        "created": "2021-11-16T17:39:06.937",
        "location": "https://scimqa.condecodev.com/scim/api/V1/users/1202"
    },
     "userName":  "admin",
    "name": {
        "familyName": "firstname",
        "givenName": "lastname"
    },
    "active": true,
    "emails": [
        {
            "primary": true,
            "value": "audit@condecosoftware.com"
        }
    ],
    "phoneNumbers": [
        {
            "primary": true,
            "value": "98765721033"
        },
         {
            "primary": false,
            "type": "mobile",
            "value": "9876543210"
        }
    ],
    "preferredLanguage": "en-GB",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "110233"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)



//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.meta.resourceType
//def userLocation = jsonObject.meta.location
//assert resourceType == "User"

//Verify the Language for User
//def ActualuserName = jsonObject.userName
//def ExpecteduserName = context.testCase.getPropertyValue("userName1")
//assert ActualuserName == ExpecteduserName
//log.info ActualuserName


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("Conflict")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2856277f-97b2-4a33-861f-40c408c29687"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_lkOHA2Bl</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_lkOHA2Bl</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c2420d74-3f73-42eb-a28d-d3b920051322</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_lkOHA2Bl</con:value></con:property></con:properties></con:testCase><con:testCase id="ea601ad8-3c77-46f5-9d5b-8f03f8538eef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To verify that Username is not updated with special characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="128bc4f0-4a85-4931-9cfc-cdb25189e67f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InZlQlJBMEtQR3VseXYxeWNRSlhnN2xiNlFZK2YvdUI1MWtKT0hjc0tBc1h4S2NUNS92WC9JRGJvTTlpTFNudDN0Qkc0UFdCNjhqQ3cyK05rL1hLRWpjaCs1WDJoTkhJSndPdW9yMFkrckFvclk4cll3U3A4UU9zT0lFaXh5dWVaLzFsdVFBcHR5ZnVoUm1pbkhRVEM1WnhiSXdmWkNPRDZPUFdTK1lKTFovWWtBRGlmdTNXRWVlRWdwclkvZkN1NSIsImV4cCI6MTczNDc4NzI4MCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.QW2aM5uMgmwFRb5Tr3zEXgbQ1vqXZBCXC5XdFuqpMNU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8eb2de09-3959-46da-9138-deb0fa4d5ee9"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userName1", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="11a5c88f-9097-433e-adbb-33d12856955e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="4421d2fd-083a-437f-9ee8-3c78b65b26ae"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User",
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
    ],
  
    "externalId":  "${#TestCase#userExtId}",
   
    "meta": {
        "resourceType": "User",
        "created": "2021-11-16T17:39:06.937",
        "location": "https://scimqa.condecodev.com/scim/api/V1/users/1202"
    },
     "userName":  "admin@%#",
    "name": {
        "familyName": "firstname",
        "givenName": "lastname"
    },
    "active": true,
    "emails": [
        {
            "primary": true,
            "value": "audit@condecosoftware.com"
        }
    ],
    "phoneNumbers": [
        {
            "primary": true,
            "value": "98765721033"
        },
         {
            "primary": false,
            "type": "mobile",
            "value": "9876543210"
        }
    ],
    "preferredLanguage": "en-GB",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "110233"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)



//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.meta.resourceType
//def userLocation = jsonObject.meta.location
//assert resourceType == "User"

//Verify the Language for User
//def ActualuserName = jsonObject.userName
//def ExpecteduserName = context.testCase.getPropertyValue("userName1")
//assert ActualuserName == ExpecteduserName
//log.info ActualuserName


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)


</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="60324f25-112c-4fbe-942d-cd5a209e58c8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Xx52LN8I</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_Xx52LN8I</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>baa01b22-792e-485d-a953-26a4d1a8b4c3</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_Xx52LN8I</con:value></con:property></con:properties></con:testCase><con:testCase id="6d0d7d9d-f3f8-41d7-9741-cd014d17d54c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11-To verify that user is deleted after updating Username" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e783a469-66bf-408d-a021-5fcd368748e6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjB0dU5tcUt1YVM3elJxSmtncDIvelc1MDJiOG5WL2dYMHJWZC9pbXhoNUZxRU0ya3gvWldiRkk0VnlSRFVvRWRZdHllNCtRNXRjZGM2TTBZRDJRRWdMRjlFdzVjc2xHWHBVQVVzNGZGalVzTWh3MzJCYmN4UjhHU1lpMFdyci9CNTBQUlNqM1hZN3hhMWU1ZU9vcDlVRFBoU3o4aW9NOFZFMS9vczcrSUg0Yi9TOU01aEpNNnNBOEJOK2FFUHJsTCIsImV4cCI6MTczNDc4NzI4MywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.ZJkcpNS4Eg-XbKcs3kb1023dy0iMdmkgSLS1zU4VSc8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8bcaaf3c-0a72-4ea0-adf8-9375fa16aeb4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userName1", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="af54cd5a-d334-407b-9dbc-8fe2a2f08cee"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="58aa8272-5da3-4826-9463-46440742fc75"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User",
        "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
    ],
  
    "externalId":  "${#TestCase#userExtId}",
   
    "meta": {
        "resourceType": "User",
        "created": "2021-11-16T17:39:06.937",
        "location": "https://scimqa.condecodev.com/scim/api/V1/users/1202"
    },
     "userName":  "${#TestCase#userName1}",
    "name": {
        "familyName": "firstname",
        "givenName": "lastname"
    },
    "active": true,
    "emails": [
        {
            "primary": true,
            "value": "audit@condecosoftware.com"
        }
    ],
    "phoneNumbers": [
        {
            "primary": true,
            "value": "98765721033"
        },
         {
            "primary": false,
            "type": "mobile",
            "value": "9876543210"
        }
    ],
    "preferredLanguage": "en-GB",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "110233"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

//Verify the Language for User
def ActualuserName = jsonObject.userName
def ExpecteduserName = context.testCase.getPropertyValue("userName1")
assert ActualuserName == ExpecteduserName
log.info ActualuserName

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="b6020653-96c2-46d1-b435-4667ffca1d2a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="38455655-faa8-4ba5-8bd1-b3d6c52378ae"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WJKfpGe9</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_WJKfpGe9</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b41ce0a9-3c04-4f71-a7c6-29b7a8a4494a</con:value></con:property><con:property><con:name>email</con:name><con:value>audit@condecosoftware.com</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_WJKfpGe9</con:value></con:property></con:properties></con:testCase><con:testCase id="a0f394b2-cbbc-495f-9c80-16eb172e2614" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12-To verify response when no value/parameter  for location is given under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8cf058ff-a060-4629-b170-f80e0895b1b1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlNpdkVPQU1FU1QxeURud0Uwc0Z2N2N1ZjhyQ09BTDkyZi9ub3E2a0EvYWtnUUx2aGZpQmhvdWd1RGRoS2tvQmtPbjV0QVZuRWhjMHRBMkZzT0U2MDlKbkdKN0NSM3Z0YjczbWY4ZWNleVBPM1JYTnJ0UlRKUHkzeW9KNll4VHhob0NtU0RydEF2a0srcTZucVRjQTl2T2swcmxsYWU5VjhSbjhDMXZlMnNaWEdqQk5QdlE0NmRHWkE2RUFuN2EwSiIsImV4cCI6MTczNDc4NzI4NiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.HlVJWDOHyBQwcAWei0UvJ15iVeEMNtllnfEUd0VwrBI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b015c1dc-aed4-4c3e-b34a-cace6ab2546e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="9500ef04-0a54-43ee-8c47-fb20aedc535d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="5f850e5a-c97a-4392-9473-b9d179d14692"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": ""
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId



// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality == [""]


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="9cf77669-855f-4f51-91d1-7d4483afe738"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India"
          
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality == [null]

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="21bf0528-4506-4c48-9f04-21ebad7232a7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_1kTAGkRB</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_1kTAGkRB</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6cad826f-f816-4db9-8191-c62a7e49f604</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdateEmail@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="308f6f7c-dcc3-4c1c-a6b2-df2a0c9b00f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13-To verify response when no value or Country parameter is not given under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="20410e3d-e8d8-46aa-9693-0667efe5c438"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ik1RYTlEdkd0b0tQNElVUkV1T1ZtdHRhZG10N0xSQ0N1bXBIMHRLT0ZZRmVyKzRhUWZVRFA4clVEL1ZRMWM2MzNralBPdGlPWk1XYmJYMmtYbVljSXZBeXpmSU5tMlhucEFYS0FROGhTU2wvb2dnaTN6c2ZlK3haOS9vVFRhanVTYThabHJYa2FGNkhPaEpuU1htVHNlYkp4Y2x5bU9waU9QSUYvYUY1a1JOeGU3Z21OOTBISnVybysyVW9oUXhPbCIsImV4cCI6MTczNDc4NzI4OSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.73kfXW94qg5s9hjhHdSLosOlk3eQ_iWN40P-xSzskuw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cbceed5b-c5a2-4620-97dc-67f410ff066e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase

def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="d1ca9e1a-8e52-4d5a-85d8-aeeac619190d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="d01479d0-2044-497f-b077-1958fc09ef22"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null


//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="ace21afc-5530-4558-8741-ad13c111225d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "UpdateEmail@condecosoftware.com"
        }],
    "phoneNumbers": [{
            "primary": true,
            "value": "9067111289"
        },
        {
            "primary": false,
            "type": "Cellular",
            "value": "9178222390"
        }],
   "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="92c400be-c56f-4355-8f57-0e6f532c6393"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7oAwtm5E</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_7oAwtm5E</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7d1ff4ba-63ac-4d85-be33-23ea8050ad99</con:value></con:property><con:property><con:name>email</con:name><con:value>UpdateEmail@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="25cad89a-a7ae-4cc1-958e-e8217d5bb7ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14-To verify response when no value or &quot;preferredLanguage&quot; parameter is not given in request" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ad6aa051-6491-493f-80bb-07deb22ac9d8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjM2NEZUSVpIV0Y2a0ZHK3F0YjFWNWJPRjBsUC9xbUYvWll6Z3h3ZXlmU1Y5WkdHN1l1VkFHYzdNRWF1SStQcTFOQVBXY0liYmlmSG9qakx1RUkwSU1RSUp0MVhwSU45TTVKSnB6WUplWmR4MXJnM0g4Ty9ZZkp2dGxxTVJCSFZrRGJsV1AxM0ZYdGx3blFkcHVhdnNjQkhYMDF2OVJrQ1Y3VTdoL0hFODdTMXdNM1liUDlXMkJHbTVkQnVPdjVBaSIsImV4cCI6MTczNDc4NzI5MiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.rlt99yd2PHDbRBbshzSoCU6r6yDKsUnPLQoiA5wwvv8</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cf38d7c8-74e5-4dd0-b88d-983345369617"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="ad20718f-5227-456d-ab0d-109ebb6c9cd7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="312294aa-520c-41bc-9f26-96df8d297304"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "West bengal"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "9014238482"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="a93d37b1-5d5f-4073-870f-517908fd699a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   "preferredLanguage": "",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "West bengal"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "9014238482"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a91fc7e7-de91-45b5-a7f2-8047d621799c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_0DY1A3O4</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_0DY1A3O4</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5f458a39-b3a1-4199-a4cc-d5b03071c09e</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="fdea4d18-f48d-4de2-a376-32aeefeb3a2f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15-To verify response when null value or no attributes are given under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="55196f3b-9a80-488a-8ff1-3bb0f0a576bf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InVwbDliWm01MnFMalp2ajlSSEZrcytkT3lYbG0zbGl1Yk1jVVB0cEo4V0E1eVNhWDlGUEhDU1AwMUNtS3o3VnZCMll0T05MUnpjSFNRYWNCbHFjVVpxTUV1RmJUTTUybDArcThtZmMzT3NCck1OSzFjMGplMUVFbS82RStiUWtjaUM5akd6VFBCZG1BUzBTemVDaHpvVUZOQkEvRUNWSG1IandZbUxjWUNtekZEZVBhcnRWVEV1Wk1OTWY4QzhGbSIsImV4cCI6MTczNDc4NzI5NSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.d3MLnotKiJutPlqhb_Qx-RfHyeS5p1yLQjAlLLEaHvo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fbdcabca-51c4-454f-af91-54968849daab"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="37389b04-ff61-46c4-ac4b-45f26ff66076"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="9629c6cf-8eac-4080-a515-471cff12c3c1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   
    "addresses": [
        
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "9014238482"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request

//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="725c9bbe-5cf3-4a4b-aa80-68f38d0f114c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   
    "addresses": [
        {
            "type": "work",
            "country": "null",
            "locality": "West Bengal"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "9014238482"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3be7c4de-cfbe-443c-a0f9-3a584cbeef7b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_qjZpIH7c</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_qjZpIH7c</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>13b2d2a3-9cf4-4aa0-87c9-ed0918a3b004</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="e59d4c20-a667-406b-bc6d-d0ba59c59b07" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16-To verify response when no attributes are given under &quot;extension&quot; schemas" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="fc95f478-f392-4ac2-b336-d3233ed286ab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkZjWHNzSHd0M0VTYU1WK3BOM0FVN0JBU3ZJTzl2djJsc0sxcmllSFgyNGl4emVnT3lHOEVTZ0ZSVitnRTQwTjhIUmkvdklqR2c3dWU4eHVOT3pKb0hIc09wUHdUbFFHYXROd1AvSWxwVHF5QlhEaENyamxvZHNVN2FHMVlDNU5nalIvd0YrMmdhUW04ZG1rZlBoL3o4TFFpcUU4SWEyL01pN1pILzJjU0gwM0wrYXlYTU5iaXNOaHpzUTFIWnJNSiIsImV4cCI6MTczNDc4NzI5OSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.M3WtcEJlhp9SQsdphI-8rPYEgCWTgY1HipDc3Vj-lpA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="de1fe6b2-2606-4735-a7fd-7bd894d50b95"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="62f222bc-cdc0-41e9-b4ba-2f62cddb77cb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="cfd5da92-5922-4983-bff3-aecfc729228a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   
    "addresses": [
        
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="290fd8cc-d639-484e-9233-967f721330a1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_rlwPtuGN</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_rlwPtuGN</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>d11252f7-042d-4509-99cb-4f51f4d7a9d8</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="3cbb4833-6564-48b8-a65c-05923e884d5c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17-To verify response when no parameters are given under &quot;phoneNumbers&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f8f121f5-9866-4743-b8d0-84c2b5fb3092"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkdTUHRnZUIrZXd0RkFXdzJBQ2xKdS90Uk1yNkpMOTFNZkwzSEdEbkljWnZYZG1uYStuYWJZUXA5VkMwS2hvRXFJakEvaDlrRWc0Rk12elVrOVpTMDR4MWlvRXNNTmxKZTRsR3JneEZxMXdiajdQa0NlbHJBbWswdWcvY2FYNVNoTmx2VlVjUmVKZmt2S0NaQ09ibGM4ZWVZZ2ZJNFBRa1dMWmFWNTBWRFdjS0ZPUXZmSEFhOFdUTitiUnhhQ2VMNFlnSy93bGkwMmRrRjBrYlRRLzhaYkE9PSIsImV4cCI6MTczNDc4NzMwMSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.mdABZbVa0dimomQ8FcwnMi_PjrL_dGaW2CsmPBszzgY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="05232385-d59b-4156-87ba-0df2fc3ba947"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="bca89704-f27e-4d43-8b33-b5d75f95bf89"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="80a5a8ad-fe8a-47df-b3b2-1b7f1ca3f085"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   
    "addresses": [
        
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c2b542a9-d1e1-4f44-96d0-bf4690b30010"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_dsSuac0Q</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_dsSuac0Q</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>049680c6-7080-46e5-982b-607f7023c24a</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="5dcf26ac-f979-4ad4-9d47-e4a98c224d98" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18-To verify response when null value is given for location under &quot;addresses&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a5b1e1d9-d873-4cf5-8c1b-34f17913264e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImE0alFLcG1NRGtEWHlMcEJjU2Jpd09tVW51L3pTb0V6L2drM1BnYVozZmZ6RElkV2x4cDFxOXNlZFRYM3VyMTU5WWViLzM2OCtYeEVMdXJFYjN3Q0MwT0pZZVNlbFRIQlIxRE03M3RMRXowcld3OVNFUklhSnpKRGxvTzdka2xPblIwUGJKc0ladzgxYkZNUDM2Znd5K3ZSWldxR2l2SmtBblYvZTZybGliZ3FjNkpRYWphUFNsUFBLaVlEWXdPTyIsImV4cCI6MTczNDc4NzMwMywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.5frtMFSIbZQPmf_vIr86IQkdBaavofBjdMYoV0Ckyac</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e88507e0-8ac7-4742-bdbd-73b857277474"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="484d7854-7a41-4e80-aca7-9d94bb0b9ad3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="25aae2f7-64d9-48c1-a42a-8a2ce3907ce0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "null"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f35e54c8-4c71-4ecd-800c-33b9171b7ca0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_o09rBu0P</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_o09rBu0P</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c90ee4cc-8259-417a-9a66-a3154958be64</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="d7a54494-f0ea-4b17-ba65-f264d07b1f1c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19-To verify response when null or invalid values are passed for &quot;preferredLanguage&quot; in request" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7ca950e-7432-4335-b711-d93135b4fb47"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImthWTRnZmhWSEJLWnpIU2ZuWW9Ka0h5clBwbEpoeGJHdVJvWUQwZFRMM0pTQUFXM2pOcnRNdnZpOEJWbUsrVkZPTVloZEdXbFBMRWxBNm8yTHVSVkRRYlN1Y2NYTFFiMkZxS3M4RmdTUXF6YStWcEtBdFRBRHBVYTdKNzBPRi93Q0YwNk82Q2F6WUR6NkhkZ3FZZXpzZmpBdTRMZDZjSi9NUFlTQ3FhWU1LeFNsWklVS1VsbW5vWGE5OHBSMVBaUCIsImV4cCI6MTczNDc4NzMwNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.gGHp9CFKmDtweT6eRL9ZEgxrVlu4aMh9ldu4AYaA5EA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d1fab44e-dce1-4dc5-9a61-5b2c18f2de66"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="36b43300-fdb7-4aab-a250-3845a222c9f8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="e11f60c3-eef7-4ec5-a109-1d9f32545fde"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   "preferredLanguage": "dfbbd",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "West bengal"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "9014238482"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId



// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="01987d9e-107e-4d20-aa7f-06156992b119"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   "preferredLanguage": "null",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "West bengal"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "9014238482"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="146f391b-84ff-4490-972a-fde744515273"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5SaGa8q5</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_5SaGa8q5</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>715c0820-5cf1-48a6-8231-ab08f1a89ea7</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="b4dc2b69-0292-4c80-84a5-5857c3cc5e57" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20-To verify response when location of other country is given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="10cf49a0-9072-46b8-8997-8deaa80ae882"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlcwV29QVDVIRC8vd2lISVBaaUlVS1ZHcEhKemNtY3NJM1VlWHBOKzNlaFVXUW81azZlR1o5ZjFQdDEwaXV6dEQ4WFBiMUpxSWpudDBWeDcyRjhySW80NHBiMUs2bG9yM2Q3NVljWllxOTZMZU9RdXI4eHhIaHZCTGMvRUoxT1FOTFpIazNsb1pmMG1nTGJUc2cwU2xYTXlmc1JEeElQbDNRWHdnL3YyaVRmR1JzdEQ2Q2QvMWtubzBzYy9zd09mZCIsImV4cCI6MTczNDc4NzMwOSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.LvyifNPkRrmyhggTVXaQ9VfYHsXD2eXeJChjCeqLIr4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e79e64e3-dea3-46fb-ac3f-87564c69f372"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="a35e4560-0127-42b6-84f7-830d6cf6fa2a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="70f2144c-dc06-4c01-bb25-56f4662f2a4a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   
    "addresses": [
         {
            "type": "work",
            "country": "UK",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="286a5c29-da84-4431-8524-0da5a58d4646"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_34ET3r7D</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_34ET3r7D</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6c12fa6e-49ed-409e-bd21-4e768261601b</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="6deb5c90-fb0f-4af2-9cc3-28e954d02a55" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_21-To verify response when null/no value is provided for Department" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e098069d-365f-4c73-82c1-bea0a126cdcc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImxLNm1QUWNQUWFVQXh3WWpzWW5iakhLNXNqSEg3YWxGMjBmVnFrVGppcWVkOGtyaU1saEtJMFhtcGlQK1JJOWcxR3Zxay9Bd1ovckUyMjNQbmo0eVQ1NmhwZ3pyTEphSE8xWDZlWllHazcrZVhYR1FqWGJmVnhCTG02a3dkc2tNTURrcFF5TzY4ZkdodE5wWi9vODNMaFp1N2I0ejRXSG5xemUrcS9GQTlvWT0iLCJleHAiOjE3MzQ3ODczMTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.uITU6XeKTDTyYKQ3MqEvetSGKN-uuD1KQAb7NizJfJo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e41bc35c-fa63-4ed5-9a2b-67d94a28ddb1"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="7afc063c-bafc-473f-aa46-7013d5bd2e81"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="88f83244-0109-4e52-aa27-d4dfe5f8594a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   "preferredLanguage": "en-GB",
    "addresses": [
         {
            "type": "work",
            "country": "UK",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "null",
        "costCenter": "123456"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="b52e5309-d2ee-4fb2-b354-dd273df73b36"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   "preferredLanguage": "en-GB",
    "addresses": [
         {
            "type": "work",
            "country": "UK",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "",
        "costCenter": "123456"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7f7955ed-3657-4e86-836b-654f0359ec1f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5LNGBXge</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_5LNGBXge</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8aa48367-2cf4-4d6a-9ae1-9199916add31</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="1442f41b-bedf-40c8-910d-0ab147ba9a13" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_22-To verify response when no parameter is provided for Department" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b985c707-14c3-44ec-9842-6c37b0d7d903"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImVQWmpGTUhnOENyOGNYWWx3V29KQmVDTk9VdDVhT3B6ZTcrSjBrQ2NuTFdNbHkrWWI2WHJEZFRWd1RTMUVNeEpsSEtTMEFkcG4rd29uTm9iQy92MzhGRlVYb0dPaFNDaHg1amlWMnVHZDB3ZkdhRkJtL29ZbFpiZmFtbTdkdTVlMlZzQTlBUHFPcnRZemEwSS8vdFpOd3YyS3JzTlB0L0xWYWg4RFkrSGxRb2kxSGxkYi9vdzRJM3psUUtoL2pOTyIsImV4cCI6MTczNDc4NzMxNSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.2R86j3rQB9wCi2DZsCdaB2O-lDSHJLNM2eeNVSUZ920</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1cbc4356-709f-4cbc-abbb-f520494ac4b7"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="3a4f6de7-dd3b-4514-b8dc-fef0eb2a8c98"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="f086bc11-5652-442f-b745-f28ce816b666"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       
        "costCenter": "123456"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4e54c46a-2e94-4b38-9d17-67eb33cc169b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_NMXUR7vF</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_NMXUR7vF</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>56e317b4-9a18-4507-bb90-7fa7835a1e3d</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="06c9996a-fc52-43b1-a829-7a87dcea0655" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_23-To verify response when null/no value is provided for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b04b3a43-0df6-443b-a983-7382c8a22d8d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImhXSnhwb0xRcnJoTGVleXd3SUl1QS9yR0VDN1R4TWtvbmdBSHVjSkVxak5sSmRxWmN0S2pQZzRSUHRVVkNod0VKcHBmUUV0VnMrT0ZRN1pQcVM3bjYraWlmQXczejVJdmNKemNUa1J6eWM5UDhYeVVZVnVkZVh1Y2dlUGVyb0JzSmlMUWU1UkdKMHVuRVJOTDJNdXFaendPTThMcTlwdUdzM1Q5WEtiWEpXZWxDMW1Xb2V6UGZmcmdMYmJ0Mms0LyIsImV4cCI6MTczNDc4NzMxOCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.Strax1AyGFN4tXZNwDtLo8hRuk4YS-VwkP7KYxnqYaE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="32a63f31-f039-4c11-a54e-60c119fcc366"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="90331236-1ebc-49de-b400-496e3bd25781"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="f1dcd058-edc3-4604-8789-1e3a056ab2ce"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
    "preferredLanguage": "nl-NL",
    "addresses": [
         {
            "type": "work",
            "country": "UK",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "null"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER1" id="511771cf-7e3b-43c2-9fe2-5b234067d8cb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
   "preferredLanguage": "nl-NL", 
    "addresses": [
         {
            "type": "work",
            "country": "UK",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "Support",
        "costCenter": ""
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
def ActualPhoneNumber = jsonObject.phoneNumbers.value
assert ActualPhoneNumber != null
assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="bc1ec182-6f2c-486e-8788-2255f4608e9e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WMlIsi2L</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_WMlIsi2L</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8d343f43-f204-498c-ae0e-505594f4e728</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="d636d87e-6b93-45d4-ae0c-cfe89476d518" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_24-To verify response when parameter is not provided for Cost center" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="34fa107f-a4f7-44fc-b4ec-bbacad73b86a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkdXUjgzT1FUbkhKRjdEdWRndWVkcWNZVTZOUmkzQUdwMit4ZUJrUjl4VG1Hd01GVXQ1bldQMjVsamN2N2wzMENBRTlaUmtnb3hmaWpyNTZaTjJQS1ZqZVZhWDhSUFN4SVUxMlBIanMrRk1hUnlFNXduQmJHWjlKMFZVZ3VnOHFoVGRmZDBEVGg2bUdlcnN0dHB2dWpnNzZiZFBLOWdpS1JSUytaQ0IzL2hDT3BCSC95Qkg4ekxEMTM2Nlc1NUFsSyIsImV4cCI6MTczNDc4NzMyMiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.ta6Bh8dNGql268FtxJN9Utamf_bTDxE03pLNxFPuRqQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="053893a9-b7b3-4b9b-a6e1-b4ccf7c6691d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="5baeea86-770f-4b4d-8464-f21c12c8735d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="28de84cc-8d0e-452c-9132-42ba3b6ce60e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
    "preferredLanguage": "nl-NL",
    "addresses": [
        
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4d63e314-4f10-4128-815f-bf1008e3e42f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_zviQ0lpK</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_zviQ0lpK</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>80e04813-824c-41b8-bc0a-1ac738f305ad</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="1c37240f-0a10-4391-89a3-5450b5921505" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_25-To verify response when &quot;preferredLanguage&quot; value  is updated" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bc39acdf-f225-4cc1-be1a-12913693480f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InZlN2lyVlNiVEt1RUlWRUJmYUtrdmR2VFN4eEJqNjRibytydWdvaGJvTUwyMWgxSXhoT1ROaTlUTmxnbjB6cFR1bGRxeTRjRHBpd2R2eVBaZWlLajlyb1FKYmI5K3BNR0xieE05bVEyTG9vM29SbnB5bnBRSmpSV283Z0FvZjBJeWE2NUxHSGc4aTRQamJYY00zY0xDQnJjc2VXMnBFcUI3ZmhXSUpabmZjL2Y1K2tWRmdaK0lKQ3JERHhEajZHVyIsImV4cCI6MTczNDc4NzMyNCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.Bc1w2gYP7em7EwIMYC-zgte7WM16Wy7vJTOCTtgDhyQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="78da001f-afff-4bec-911e-a4627be7770b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="df8c42a2-4871-473a-8e6b-c604233acf16"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="b435fd92-a395-4a5e-9910-5d7268acec15"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
     "preferredLanguage": "de-DE",
    "addresses": [
         {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       "department": "IT",
        "costCenter": "123456"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="46eb220e-3013-433e-a445-45907fb4895c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_YBR5KUvJ</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_YBR5KUvJ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>147ee820-2b49-48d1-b646-b68fe8766945</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="a5179eb7-a6c2-4f3f-92a3-f4f78dc449fc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_26-To verify by creating user with passing Country value with Alpha-2 code" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e1e28cb8-9f7f-461e-9c17-2b2faeb5a5e8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkRYMEp6NG8rb1ovQ3VyekpMbXAydDVPSUVuMjNEMXAvL0NHaUtrOERLZWJ0aG9zc0dGNUVNYVd5cDB2V29TSmtaL1BGNXZEd3VyV21RUjgrMlRka1pPeW00NStVUkRrOWpFRnE2RjJYQU8weTlRdWJVOWlWYnc5cWtOa1YvczFNUkV0OS9ORCs4RmxsMlpFdkdNaFF5Unlqam40VW4wVWFWUThhUERkaGZrZWdHN01NaGlzYjZlK2JvdDNVVDQ4L293SEdkbHBwY0VoRXhBTXF0K1ZWdEE9PSIsImV4cCI6MTczNDc4NzMyNywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.p81XcMbCs9fbc4xj22L7TSYUzB7Z0oSndxya6bwAUos</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="52287ed7-a904-4317-9494-a120a4a1d712"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="aa338edc-a0be-420b-aec9-edb3468c8ac3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="66056e9d-3f54-48c6-8505-ecd280b2b0b2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
     "preferredLanguage": "de-DE",
    "addresses": [
         {
            "type": "work",
            "country": "IN",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       "department": "IT",
        "costCenter": "123456"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f4f50b22-fd2f-44b3-8c42-6f0aa04a319d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_HuKU3Gg3</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_HuKU3Gg3</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>fb35eb22-5ee6-4525-b523-1ca3c499e49b</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="8ab82b1d-65e4-47e3-8c56-675ce30a8b07" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_27-To verify by creating user with passing Country value with Alpha-3 code" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="91595400-03bd-48fe-95f5-4e354d12fa70"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InJaSDhTU2syT0hNc1lyYzJFRFNKQlNNU1ZKY2NxS21pOVQ5alppdVR4SDFhMUp3b2wzOVJETjZGOENJZVhwQis4NzY5cHJJNzAxY3ZCZTRiS0djUlRxWFFtS0xxcjl1ZWszaHFTdGlIalRPNFFRNldSV1ZUSGxsVkhMS2JDVGZFQ1A5cGNKYkcrRkpyalc4ekl6bi9IYTAvL1VVNTV2ZE4waXBOcVpGa2RnZ2tSem5QUUQ2WThSQWs5dTMrTW1UMSIsImV4cCI6MTczNDc4NzMyOSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.cr0KmqUNiMC7i6vvSnpjXwC42EXB9cqwc42SSLBCVrM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f682bf05-65e5-4a98-9230-e41e553ec624"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="25794c19-8f24-4a59-aa2f-849422cba856"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="d19b027b-4706-4524-9530-9d7a56456916"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "9876543210"
        }
    ],
    "name": {
        "familyName": "User31",
        "givenName": "Condeco31"
    },
     "preferredLanguage": "de-DE",
    "addresses": [
         {
            "type": "work",
            "country": "IND",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       "department": "IT",
        "costCenter": "123456"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify email and phoneNumber in Update Request
//String input = jsonReqObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonReqObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1e59d21e-541f-4a3d-921d-b0d1562aaf91"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_zTvHPeHR</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_zTvHPeHR</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8e93d028-f5fd-4f0c-9bdc-479eff8492e1</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="662d6f53-608d-42cb-9eb1-69da8b4108b0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_29- Verify the response for user endpoints with invalid Group and floor attributes in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a91bbc2e-9a82-43bf-ba3a-f4c107f1c310"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlQ4VHRPN0pOMVhzNG9naTVnTFgwTHBUNmR1TktqWGZNRXlhUG5QOEVXTnRGY1NJMGhlaWtHblhTdll3WW15dEhXNHJ1eXRUV3cxMVFGbkxMQ3NZeGtYY3d2b2FnY2hzWnpUaTUxcE9XMTA0VlE5U2NQM2hTRllLSUZ4azRMRjdSTFpmSGtDazJpWCtmeWFjUXhBM1FRVzJ6L2RXUzltTXlQY25zbXlYRHpSeUtRU3huK2MyYm9iQjVsREsxaXc5ZCIsImV4cCI6MTczNDc4NzMzMiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.hWXouLW-5q_DX9zADIKJvOu-5T136-FLC_n5gXVIUrc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9804d347-a1f1-4180-abeb-984681c2a690"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="c0365f1e-9a75-4d54-9055-570912c52d16"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        { 
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "india",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="691144e0-9a21-493d-9a99-04ae6c2d9c85"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "8279313667"
        }
    ],
    "name": {
        "familyName": "User31AdiUpdate",
        "givenName": "Condeco31AdiUpdate"
    },
     "preferredLanguage": "de-DE",
    "addresses": [
         {
            "type": "work",
            "country": "IND",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       "department": "IT",
        "costCenter": "123456"
    },
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#updategroup}",
        "floor": "${#TestCase#updatefloor}"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a3b99cbc-4540-497a-a740-8f72a809825f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_pUVRUWHZ</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_pUVRUWHZ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>10153eff-6ab0-4edd-82e9-a50064becf07</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property><con:property><con:name>updategroup</con:name><con:value>a1!@#$%^&amp;*().,>&lt;?/[]{}+=</con:value></con:property><con:property><con:name>updatefloor</con:name><con:value>a1!@#$%^&amp;*()_+=-{}[].,&lt;>/?</con:value></con:property></con:properties></con:testCase><con:testCase id="22bebb7d-ee46-45ac-bb0f-b8c0ac225290" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_30-default Group value gets set for user if Group value not provided" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c187a6da-c838-4654-8978-5eaa77d4c69d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IktKcnNhRm5rZHBBOW5kaTBUTmxMbmFaMTYyTkt0VW9PL3JuSVFmeW1qTXpXZlBiOTl3Q2FZWW5kVjdseXFEYmltb1VkWjlCVVR3NldvdmRVVzFnMVFVTW5hZWIzb2hiTEJtUHJIaWFhUVFoZkFCRTNrZFBvNXl3UFJRa240RTlyYVEzS1RaUGl0KzBrT1FJMzRFWlFkc3pLV1R6enhPSFhadFlvWTEzd0hzRTJTbzdTOVZhc052bnB0dDBzTEwxdyIsImV4cCI6MTczNDc4NzMzNCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.GogqZtwdNTPsDav4xSzQvVF8gm34Q9cNlTPuSuwRGLM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bce75fee-1222-43c7-b51a-7687fee20bad"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="fdc07670-a6d6-495a-a893-a4250509e9f3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        { 
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "india",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="718a554b-8fb4-4003-a98d-7bc4d5ceaf20"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User"
      ],
    "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
    "active": true,
    "emails": [{
        "primary": true,
        "value": "user2@condecosoftware.com"
    }],
    "phoneNumbers": [{
        "primary": true,
        "value": "9876520033"
        },
        {
        "primary": false,
        "type": "mobile",
        "value": "8279313667"
        }
    ],
    "name": {
        "familyName": "User31AdiUpdate",
        "givenName": "Condeco31AdiUpdate"
    },
     "preferredLanguage": "de-DE",
    "addresses": [
         {
            "type": "work",
            "country": "IND",
            "locality": ""
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
       "department": "IT",
        "costCenter": "123456"
    }   ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "hawai gk",
        "floor": "0"
    } 
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e7bae5bf-97eb-44e7-b99c-951dc2f58786"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_m7okh4Tn</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_m7okh4Tn</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>aabde582-0f2f-4621-9d74-7fd6346c8bbb</con:value></con:property><con:property><con:name>email</con:name><con:value>user2@condecosoftware.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="b8058a0f-162a-4345-8be1-498b6d0118fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_32-Verify the response that Phone number and email with invalid type" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="43660307-244a-47b1-8fe0-6e9a5756a257"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IllDVjN3Y3JmMU9ubVB6T2JHc3RZSFpPUzRhdkliZHpzek9td2h4S3ZuSmh5KzhCS1V6a3RBdi8wYWJ1SWxoU0FVeHJ3K1lrbW4zaUVrSUVPZXlqejV5b0xaWnlhWDlZdzZISG0zM3l0TXRBQ1hGZnNNbUNhQ01lMVdMa2ZqM3YwZnJiOTFuM1NnbGRaVEZiYlZLS25JSVkzcHpkbWlTWlNHemZBdDAwNnlqU2tKZTd3SmtyZnN4SW5EOTJ0cXZHVmVLNW9BejdIRTJBdTdxbWJwZnlqSXc9PSIsImV4cCI6MTczNDc4NzMzNywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.Qk7H1xwJSNfYr2BCkOmLjadBnTme_m_H_iLJiA85g-k</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2215b030-e5d3-46cf-b6b3-3f2af7bae701"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="b9b613a1-deb6-4a48-9140-d5f167452b8c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        { 
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "india",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="a1ad8a83-7064-40c9-a1dd-c0eff9eceb2a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User",
         "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
    ],
    "externalId": "${#TestCase#userExtid}",
    "userName": "${#TestCase#userName}",
    "active": true,
    "addresses": [
        {
            "type": "work",
            "country": "Australia",
            "locality": "sydney",
            "primary": true
        }
    ],
    "emails": [
        {
            "primary": true,
            "value": "user2test@condecosoftware.com",
            "type": "edit"
           
        }
    ],
    "phoneNumbers": [
        {
            "primary": true,
            "value": "96844431111",
            "type": "test"

            
        },
        {
            "primary": false,
            "type": "cellular",
            "value": "9684443519"
        }
    ],
    "name": {
        "familyName": "UserRaja update",
        "givenName": "CondecoTest 22"
    },
     "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "112233"
    },
    "urn:ietf:params:scim:schemas:extension:CustomExtensionName:2.0:User": {
       "group": "managedkkinvalid",
        "floor": "2"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)



//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailSyntax")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a6f3e89c-7f8e-4051-9f8e-bd284e138732"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_tLg1jInd</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_tLg1jInd</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>26edc202-960f-44c4-9282-f2c4017e2f52</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property><con:property><con:name>updategroup</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property><con:property><con:name>updatefloor</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property></con:properties></con:testCase><con:testCase id="5d0e0970-38d3-4f8d-8598-d3038b26020b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_33-PUT User | Verify the response that Phone number and email type is added" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="08f2448f-53d7-488d-aaa1-78e305e9586a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ikt0cVVERU43VlpJTHlWU2w4dWkvNlFvVmtGUFdUT2d3TnIwYnNDZUpuc2J2U1FUQjZWNEZrKzllVDMyMXRkNFg5dlRGMTFybjIrTHBXV0FBcDVleDl3czJsRlNJUzNyZlZlYTFac0FzdHhNNm5qQnk5bU9aT1FSNGJxbU9wZTEyK3RGaGVOSjJuUU1pakNIYzVjSGdyUmd0aWc4WWthdm1FQ2w0R3JCdEhGRUVWNmJIbFR2bGNLQis2MnFWWk9xUyIsImV4cCI6MTczNDc4NzM0MCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.V9xlqZha1bhVR04bGmyxqofmWCdexHqk3QrjUF09MEg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6e2869b9-6823-4249-8129-b70d29c4703d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="f7982a9e-a8a0-480d-8fe2-9bd176f1f707"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        { 
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "india",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_USER" id="9c61b18f-3424-4fa8-976e-96a51a4882e6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:User",
         "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"
    ],
    "externalId": "${#TestCase#userExtid}",
    "userName": "${#TestCase#userName}",
    "active": true,
    "addresses": [
        {
            "type": "work",
            "country": "Australia",
            "locality": "sydney",
            "primary": true
        }
    ],
    "emails": [
        {
            "primary": true,
            "value": "user2test@condecosoftware.com",
           
        }
    ],
    "phoneNumbers": [
        {
            "primary": true,
            "value": "96844431111",
            "type": "test"

            
        },
        {
            "primary": false,
            "type": "cellular",
            "value": "9684443519"
        }
    ],
    "name": {
        "familyName": "UserRaja update",
        "givenName": "CondecoTest 22"
    },
     "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "112233"
    },
    "urn:ietf:params:scim:schemas:extension:CustomExtensionName:2.0:User": {
       "group": "managedkkinvalid",
        "floor": "2"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="6d8dbb67-c461-4815-a329-dc55ead51611" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Parse Json Request
def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

def ActualupdatedGroup = jsonObject.group
def ExpectedupdatedGroup = context.testCase.getPropertyValue("group")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null and similar to request
def ActualfName = jsonObject.name.givenName
def ActuallName = jsonObject.name.familyName
def ExpectedfName = jsonReqObject.name.givenName
def ExpectedlName = jsonReqObject.name.familyName

assert ActualfName != null
assert ActuallName != null

assert ActualfName == ExpectedfName
assert ActuallName == ExpectedlName

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null and similar to request
def ExpectedId = context.testCase.getPropertyValue("internalUserId")
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId == ExpectedId

// Verify email and phoneNumber in Update Request

//def ExpectedPhonNumber = jsonReqObject.phoneNumbers.value
//def ActualPhoneNumber = jsonObject.phoneNumbers.value
//assert ActualPhoneNumber != null
//assert ActualPhoneNumber == ExpectedPhonNumber

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d703fd63-cd0d-4f01-9499-37b19246bd92"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ciZITKNx</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_ciZITKNx</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4a14d52f-d9ab-4287-be6c-c68e9d16fa06</con:value></con:property><con:property><con:name>email</con:name><con:value>user2test@condecosoftware.com</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>0</con:value></con:property><con:property><con:name>updategroup</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property><con:property><con:name>updatefloor</con:name><con:value>a3!$@%^&amp;@*(@>&lt;</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="d8f02aa9-9902-45db-974f-c308e6b1c740" name="PatchUpdateSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b0f20aa2-7399-428d-b884-34f8ec2cf556" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify Update single SCIM user using PATCH" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ae1ec3a1-892b-4ca1-88d7-1a0623f43c16"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IndCY0ZCM3VHTnFvaGZTa0ppRWZ5SDUrNDJMa0FDNDV3dndpbHFZLzQ5dWNyNStkS0w4aXlDK0kyQ0ptcXFJQUY3MDBlTUZQWStzalRQZ0dDNkpOdVBNcjFtTVI4NXNYVzlPckdLUzRkMU03a2RYTVAyc3dDSGJwOFo5clFHY2RNWUhWbmVyNWpNdXpLM29mbDNaamdSNXBRVk5NZnBDMUhtcGxKOVZtZkxaZW01NTFNajJNMlAvTEtaUENaOGNybSIsImV4cCI6MTczNDc4NzM1MSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.59OqmnkgsiaiH_XEHxjsM2fObbXfPS-pNkgd_QrwZTk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0c8390e6-aa73-4900-8287-38dcdf498554"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)
def updatedemail = "Updated@xyz.com"

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("familyName","Test"+randomGen)
context.testCase.setPropertyValue("updatedemail",randomGen+updatedemail)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="be19621f-59c8-45d0-a9c9-c693cdd03dbe"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "991818892"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="7584b0dc-2071-4815-bf53-b2ddf59cd6c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "name.familyName",
      "value": "${#TestCase#familyName}"
    },
    {
      "op": "remove",
      "path": "phoneNumbers[primary eq \"true\" and value eq \"991818892\"]"
    },
    {
      "op": "replace",
      "path": "emails",
      "value": [
        {
          "primary": true,
          "value": "${#TestCase#updatedemail}"
        }
      ]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5fd5b8ae-5ff5-4241-bb7c-9df03cd623ab" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5b4a499e-00de-4063-8e02-38ec270807c1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualfamilyName=jsonObject.name.familyName
def ExpectedfamilyName = context.testCase.getPropertyValue("familyName")
assert ActualfamilyName == ExpectedfamilyName

def Actualemail=jsonObject.emails[0].value
def Expectedemail = context.testCase.getPropertyValue("updatedemail")
assert Expectedemail == Actualemail


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User


//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null





//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="af6d6777-20de-4019-9a0b-ce3b73659a6c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_HZ6JXcyW</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_HZ6JXcyW</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>69946299-7711-4bb3-a6a8-f4d411ffd55e</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>familyname</con:name><con:value>TestHZ6JXcyW</con:value></con:property><con:property><con:name>updatedemail</con:name><con:value>HZ6JXcyWUpdated@xyz.com</con:value></con:property></con:properties></con:testCase><con:testCase id="8fa2d291-40b5-4686-aff5-ff09f46fab68" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To Verify, user is updated by any single-valued attribute with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="56b171b3-dee0-40f2-88bf-7a5ed2a07317"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InFXQVNFZ0NvVmphYWRlV1FrWVdEME9tKzN6Z0c1V3g3YlE2WEE3RElPRC95ZmprOE12V0l3a25hblZhZ1RpbURMRm5UVDJzSElFdlozQk8wZmhIUzJWamlwUjcxNXVQUGJxVzl0R0FjaGxlcU9xWk5wRVA3ZkswMzJJVi83M1pIbUNPZVhxMnVSdnBjSUFxelVRdEVYUHBLaUd5TWJXdkovRUlmc0V4cUxUbkxZbkJXWWRlaDljYzI5UW8zcnIrUiIsImV4cCI6MTczNDc4NzM1NSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ._M_M_u7qYcSIfh2lI4pd8ib9PNQRJQG6W0kH6cqFyu0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bfeb03c5-e236-4f9f-8818-cf483b454716"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("familyName","Lastname"+randomGen)
tC.setPropertyValue("givenName","firstname"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="d68ad707-704a-410e-9cc6-3d5f4da2d4ef"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="51d3b0d7-5828-4f6c-b1bb-4279698d6418"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:api:messages:2.0:PatchOp"
    ],
    "Operations": [
        {
            "op": "add",
            "path": "name.familyName",
            "value": "${#TestCase#familyName}"
        },
        {
            "op": "add",
            "path": "name.givenName",
            "value": "${#TestCase#givenName}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="a2ff8d42-93f1-4134-9321-76293de8cd4e" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="5c934bb1-93c2-4396-b95c-a67c24584eed"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualfamilyName=jsonObject.name.familyName
def ExpectedfamilyName = context.testCase.getPropertyValue("familyName")
assert ActualfamilyName == ExpectedfamilyName

def ActualgivenName=jsonObject.name.givenName
def ExpectedgivenName = context.testCase.getPropertyValue("givenName")
assert ActualgivenName == ExpectedgivenName

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9ca74d3a-d567-4b06-bd7d-ea9ab77c7794"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_thnBvfGu</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_thnBvfGu</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7b5fb835-321c-4ec7-af75-1f8b4fbe84db</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LastnamethnBvfGu</con:value></con:property><con:property><con:name>givenName</con:name><con:value>firstnamethnBvfGu</con:value></con:property></con:properties></con:testCase><con:testCase id="75384f39-410d-4381-887e-5d8e48ae4214" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03 - To Verify, user is updated by any multi-valued attribute with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="430eaec7-dd63-47eb-ba1f-0416f57b7de3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Imt2cG1uaGFwbnBaSUNXMkZ0ODhiVk11ZEN1RWlES205bldsU0Y3QnpvTUhkZkNDeCt2YkxiaTgyVUFjcGVvUVFpSnBXdzErVUFueVZ4M1Q2cllZQTY1elAwMEtqMlR4OW5KQUNCOGpvdXJmR3BJbTFjbFkrV0RlcUQzK1Q1Mm9palRkL251MXBTaGFXaGFYTzczejlGeks5TUhyWm1zTEFadlIxR1lWdW9qM28wK0tjdnNKMUpsS0FYMWVib1dQUCIsImV4cCI6MTczNDc4NzM1OCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.icq7okioi3KhDFayvhSgIZo_TBP3zfMRlqWj4xF0zxA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="014b32a2-2f41-4455-a867-c7390ccd0089"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="dc8f9ab4-a0bf-4df5-ae30-48e35fa29b74"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="72aba27f-1dc8-4afe-8ccb-ca2cb161e389"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    
    {
      "op": "add",
      "path": "phoneNumbers[type eq \"work\"].value",
      "value":"${#TestCase#phoneNumber1}"
      
    },
    {
      "op": "add",
      "path": "phoneNumbers[type eq \"mobile\"].value",
      "value":"${#TestCase#phoneNumber2}"
      
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="607edc54-1f61-40e6-b38c-7c749ff34488"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="abd26813-5632-4fef-aada-26ef70941d2a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_MiMpBS08</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_MiMpBS08</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>37f2d732-5e98-4139-8ff7-915cb7394f4c</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>phoneNumber1</con:name><con:value>8877777999</con:value></con:property><con:property><con:name>phoneNumber2</con:name><con:value>7788669900</con:value></con:property></con:properties></con:testCase><con:testCase id="a6b3914e-efb4-48f8-9e9d-e5f0430f4c8b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04 - To Verify, user's telephone number updated with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="14d82c39-5b31-4ca3-9f8f-2515d0c1f3c2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InBybnlsbVNsWi94cko4T3NaUGJhVUY1d1NTSDRyMEtXeFV6c3NhQzZrNjR0OXdOc21ZMS9TeStSQStPem1IS1ZicGx3VzNIWmVSSWVsMnJ0dUk2TUQrVmRyQVpYTTRtM2RQU1QvSVVkTnB4MkFFV1VyUHB6eWtIQUVjeTZnaEVTeFB2ZkcxN0JlbFA1aG5ITjF1WngzT0hkKzZ2cHBndW0wMmxYSlhrUmZNSm82aGRxMDUxNkZvU2t4cU42UGZyWiIsImV4cCI6MTczNDc4NzM2MSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.rgctaWX9WECSuxMbbJPeMPjHpuJwNgyBddttnFkl6Pg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="843d6339-5e50-4e25-93b9-c1a8c55acb31"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="a986754f-a3d3-4f01-a6d1-7e9c122e39ad"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="ef65e2ad-6534-4bef-8a39-bfc85c1295e4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"urn:ietf:params:scim:api:messages:2.0:PatchOp"
],
"Operations": [
{
"op": "add",
"path": "phoneNumbers",
"value":[{
"primary":false,
"value":"${#TestCase#phoneNumber}"
}
]
}
]
}
</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="abe951d8-3cd0-4050-80aa-32a03a371855"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualphoneNumber=jsonObject.phoneNumbers[0].value
def ExpectedphoneNumber = context.testCase.getPropertyValue("phoneNumber")
assert ActualphoneNumber == ExpectedphoneNumber
//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)


def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code




//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0a118fc7-73f2-46f8-89d0-8d92d166c8c4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_NeoPOGBz</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_NeoPOGBz</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3530b45b-a019-4f94-beea-5c3b042397a9</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>phoneNumber</con:name><con:value>8899009988</con:value></con:property></con:properties></con:testCase><con:testCase id="e4cffa67-a49c-41a4-ac3f-5c6829318183" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 - To Verify, user's Mobile no attribute is updated with 'add' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b2f05341-894f-49d0-b8ab-fccabaaac01e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkM5YXFidGFVQmx1VjlEUVk0OXpVU1Y0STZyaTQ0aitHaC9qL0htdG00K2VHc0RQZnQzMGxLZVM5aG5JU0lJOCtDSngzTXhic0VtS3lOSGY5NGpEQStVUlREQnllZXRjK3BHcTR2TG1zV0QxenNGbC9TTUNXWFFIZXZZdE9jK2VBMVhla2N4S01UUFVacGI5VndrRmhTbEFxR0hCWXBibGU3QzZDM2UzUDh3RmdiNmFJSmtsbVQ1UE1GNzBaZUZNSyIsImV4cCI6MTczNDc4NzM2NCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.sJ4rRqonMNFjaccMcBhN-5bbzY_vnvrPYOKWVD8oo3g</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4bc21f6b-5c4f-4c76-b867-54c7e7983cd5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
String mobileNumber = RandomStringUtils.randomNumeric(6);
tC.setPropertyValue("mobileNumber",9875+mobileNumber)

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1e49a9e6-ac88-4116-bc68-b2b12c0ba7f1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="f6676a6e-8080-4721-96ba-e3d72fa086f5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
   
    {
      "op": "add",
      "path": "phoneNumbers",
      "value": [
        {
         "primary": false,
         "type": "mobile",
         "value": "${#TestCase#mobileNumber}"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="ec0da515-5b95-41da-9c60-3ee3fd6b54f5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualmobileNumber=jsonObject.phoneNumbers[0].value
def ExpectedmobileNumber = context.testCase.getPropertyValue("mobileNumber")
assert ActualmobileNumber == ExpectedmobileNumber


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code




//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="704af12c-1e5a-42e2-8d6f-03ecd4bb8cd6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7csbkETF</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_7csbkETF</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>d7a474ec-933f-4889-9a30-34cd9703699e</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>mobileNumber</con:name><con:value>9875280962</con:value></con:property></con:properties></con:testCase><con:testCase id="57883e79-8040-4617-a4d3-44435b6c065a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06 - To Verify, user is updated by removing primary phoneNumbers with 'remove' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="39625f19-a908-4b3b-b212-e5222be54fd4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkFya0UyN0wrTkhOL01RNmltczZXOTY4N3h0NnZ5VTJsdUlyZHA3aW0wMHRWQmN6VEE5RUl0cFJzRGNGa3IwWGZXMUlvTzZZZUNJS2dGb1ZHQUhhRDZ2eUNnSlVNWnR0b3RoUzl6OHplbFU4NFRQZnhaYjdQa0Zyakl4amZWbm1ibjgzMjgrKzd5SGYyVU0yamxmNFRIRWo0SC9sc2k5ZWRwNjhSY3lscXBiOVRxMmJMbExKMVpsWHNENGlUQ2ZxdiIsImV4cCI6MTczNDc4NzM2NywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.u1IRoy5uew65dni-lR4jVsT2tcighWk9-Wqp36fN6lo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7c0dcc9f-7886-47b1-a42f-550bc76fdce2"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="51abe581-f201-43d8-b0d6-6828266d2603"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="98190586-157b-4388-adba-d769dcce1538"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"urn:ietf:params:scim:api:messages:2.0:PatchOp"
],
"Operations": [
{
"op": "remove",
"path": "phoneNumbers[primary eq true]"
}
]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="672c534e-bf03-4fb6-91df-f43f1c70bc99"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b83ffed1-b84c-4cda-a4e2-0903ba41e8e9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_4QW9euQr</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_4QW9euQr</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>50a1d159-6a93-49de-adb2-5985a8cae417</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="0a20cbfe-8166-4258-b120-e5b3b15f4ddb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07 - To Verify, user is updated by removing non-primary phoneNumber with 'remove' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a62a8627-9cbb-4b0d-aa61-5e91989a7153"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ims1SnE4aENqUysxSUE2V1pxT1d2TVNLZkVRSmNyVkhucDJ5RVc2a1ZVZXJsbTJyY0dDMFlITkVTUWxyQmF2LzlTQ0tZS1NaY2luMGp6SUo0aDQ4QWx5TkNVdWt1WnRGZW5UcFZuK1hFbGdRODJDUjRKa3poNy84a0FOeHpycSswM0duUUxJbVBFL2JWSUFYS211MGVmR1EwOFJMMzluZ0psOU9QVEhQTWNlWW9jS1UwVG90TXBvT2JESFJtMmxCNiIsImV4cCI6MTczNDc4NzM3MCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.is6xzAc6UsCTQIIb837izsPlmfcmKLLaaC3X4pctmqQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="01ecf65c-cb1b-446f-bf64-a799f8b71fdc"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)


</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="0a4d492f-9fff-468e-a557-4fc5d5320640"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="be61245d-1fea-461a-9ddb-1a3a0f02d379"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"urn:ietf:params:scim:api:messages:2.0:PatchOp"
],
"Operations": [
{
"op": "remove",
"path": "phoneNumbers[primary eq false]"
}
]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="3a020ec3-3d3a-49b5-973b-ab73749a383f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0c58719e-b7a4-45e8-b8bd-d783b9b25a29"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_zxA8e7HP</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_zxA8e7HP</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f8ef5806-3845-4922-acc1-a2795cc13427</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="048497f1-3490-4a0a-8cd8-9549eef16506" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08 - To Verify, user is updated by removing Phone number attribute with 'remove' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="6abb6138-b67a-403c-8bf9-854e08413af7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Im1pcTFqdXRVUFRnUnJIRmtRZzNmSUs1K1FBTWZqTjMyNGhxSGNvN0NSTXViMmVCU3BveFp2bXJhS1NrVXU5L240bGhIQTEyQnFJLy9tZklkQkRidEUxS1c1V2R2N3pNczBiNjUrMHJCOGVFUmw4NGdlWVBRallzc2daa3hQaGJ0RThnZGZqbHlYSGhvZWEyR0I4Rkh5MURZZ0YzamZtaEJmRGMva3ZkNTB6TjFXd0Nhb054YkJIbXdaWklYS1p1LyIsImV4cCI6MTczNDc4NzM3MywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.ugqmB9h1VxPBfrJk7nLBlGbchN30jHXUJJcX9C6ZUT4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="899408a9-7801-4623-8423-5bf187aa0a2c"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="3b7119f2-733d-41d5-8f5e-22bcd7bf88d9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="6a62e893-44fb-42dd-9e14-7e67e79fd3e8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
"schemas": [
"urn:ietf:params:scim:api:messages:2.0:PatchOp"
],
"Operations": [
{
"op": "remove",
"path": "phoneNumbers"
}
]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c53e78ce-53f5-4270-849a-77487b92e7bf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="62df1f3d-f74c-4fad-8511-1412d2244483"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_HwxSRis0</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_HwxSRis0</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b30dcba4-4f95-49d4-9175-776217e8fd32</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="0c28688a-d4ae-413d-8701-5a94d089715c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09 - To Verify, Family name and Given name values are updated with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b3e9598c-47cf-4380-a56c-93d211fe6b3e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkcxL3VmQjBHLzVzeGVrVGpHR1VaZEY1MWFoblIxMEJKRnk4MVMrUzVaWkxWS0RZY213VlY3VWlMQmZ1bi9lV0NNTStDdnhRQk9IM040RzU2c2R4ZkEzOGxnK3A2RWZhdTBTZlhJWjhvQlNJNFgyWHlNeEMzOFBsRVJtb0JTU050eTJ2bUltQjZETDRIT0VDLzYwaFNjbEhEUkI1MEJHelQ3eStibkR3UjE3c1BxUE5vL1puQW5FNEl3TEp5QWNNNCIsImV4cCI6MTczNDc4NzM3NiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.yUKwR5fH5OIefk3vo1ftCd1DP2euMY5TCSLMxxXQThc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="70acabab-a0c2-49e1-850b-a14ddf3d4e36"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("familyName","Updatedfamily"+randomGen)
tC.setPropertyValue("givenName","Updatedgiven"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1cfee96d-e179-47aa-9e2a-6bd10ed50b91"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="bd551081-2caf-46d2-8b8c-d2c722387d4c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "replace",
      "path": "name.familyName",
      "value": "${#TestCase#familyName}"
    }
   
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="77286008-d52f-4098-860c-c82545e640c4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    
   {
      "op": "replace",
      "path": "name.givenName",
      "value": "${#TestCase#givenName}"
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="59a94fe2-fd56-4ef6-9f21-adfe0177bc0b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

def ActualfamilyName=jsonObject.name.familyName
def ExpectedfamilyName = context.testCase.getPropertyValue("familyName")
assert ActualfamilyName == ExpectedfamilyName

def ActualgivenName=jsonObject.name.givenName
def ExpectedgivenName = context.testCase.getPropertyValue("givenName")
assert ActualgivenName == ExpectedgivenName


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null




//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="82f6bdea-1cbb-4572-ab8a-916f39247461"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_AtmBecus</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_AtmBecus</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c385667f-1a52-4868-91b9-1ee00a2efedb</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>familyName</con:name><con:value>UpdatedfamilyAtmBecus</con:value></con:property><con:property><con:name>givenName</con:name><con:value>UpdatedgivenAtmBecus</con:value></con:property></con:properties></con:testCase><con:testCase id="4c2da08f-691d-49a4-9e56-9dae45d37f94" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10 - To Verify, Phone numbers values are updated with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2c50a5d7-85b5-485e-a877-115626c69bd5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IklaNDMranlOYVlUdVlWTy9ubWFRNDg2NERoL1pwVUdMeXQrZ3B2NkEyZkpWcWJYV3VuM0g4ZThzcFd4TWFjVDZZajBhNmxyMWRZcWhOdko1aTBIcjE3aGNNV0VxVEszN1IxUW4zcm1kSHFKUjR5emNBRSt1Z2hmUXE5TnNMa09jM3JmclhRdGorWHJIdVNDeEEzZklEZGgwd0U5TXYrTExRVWVHUzY3bGo5VzNadjBPUCtOZ2E5ZWlpR1o0Qmw5byIsImV4cCI6MTczNDc4NzM4MCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.irN3_h7p8EVutGFjfRQ8hP5H3jzxlQ_gTUNjO9_53Ng</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c0108e07-2726-4e75-a51f-5dc648a1b50a"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)


</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="81ab3767-3674-4407-8dc0-56519f52e356"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="e1957695-cccf-4c0a-a6f5-18af7879dd26"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
   
    {
      "op": "replace",
      "path": "phoneNumbers",
      "value": [
        {
         "type": "mobile",
         "value": "9874563299"
        },
        {
         "primary": true,
         "value": "9874563277"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="2a874bf7-90f3-4037-b544-89f530d25a55"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="633204a7-e5df-48ae-b3b5-7d21d654fa39"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_dmELZRoD</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_dmELZRoD</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ab198e43-dd7e-4fd9-927d-a45d4c3a808f</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>phoneNumber1</con:name><con:value>8888666677</con:value></con:property><con:property><con:name>phoneNumber2</con:name><con:value>9956778899</con:value></con:property></con:properties></con:testCase><con:testCase id="9a4693c1-3fd7-4f61-8fa5-e3cfc7cb7583" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11 - To Verify, Mobile no is updated with values with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ca4b683c-1a79-4dc5-9a65-b7aab5cc6c8c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImFUQUlMQkREMnlIdFVnMHp0bmxrQk5NQ1dVWmRzaVJ5QUU0UWtldkd2NERzdjdOVGFBM1lZYUJ3K2VkRHo3Sk5CRkg2UnhXWFlyT1d3RWo1T05JNEFmUHoyMjhZSWw1YkpuYXFEQmRuRys2d0Q3MTAvbFFQUiszL2lqZkIvby96V2ZhSnRXTllrWlVDNmxUNGpuUy9VSldleFNKM3hTU0lRV3RUdnN3SVVuYz0iLCJleHAiOjE3MzQ3ODczODMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.sCsO3_cWcbdEJ1x9H9wMjoUtc9eZAjswMeBAJShdQFE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d2c596c6-d229-494a-91df-668bbd180a6c"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1f2b0bc0-24ca-4fdb-ac95-4963dc9dfeb4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="4f543e5a-a654-4c50-b39e-d140924abc78"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
   
    {
      "op": "replace",
      "path": "phoneNumbers",
      "value": [
        {
         "primary": false,
         "type": "mobile",
         "value": "9874563278"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="78046564-4ade-47a4-b141-88e3575fda14"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
   
    {
      "op": "replace",
      "path": "phoneNumbers",
      "value": [
        {
         "type": "mobile",
         "value": "9874563277"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c6b6e041-19a7-4de6-a4fd-ecf065651fac"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="76dc56bc-5f3d-4bad-bac7-d93554da2990"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_9waSq1cd</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_9waSq1cd</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>94d3a4a3-ecc9-4afb-8428-e289a4c22d2a</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="92cb6bf1-f219-4c51-be26-96902b1e0a0d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12 - To Verify, Telephone no is updated with values with 'replace' operation in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="18d1b325-f06a-4a41-b612-fd3d4de2a379"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImNHWDc4dUFna3ZsQVZyQldtazJxT1AwNVhBUlJxMjVxZmZxOW9kc3l4T2cvRVhWZUJlZDhQQkR6WUtjazlMbXhsMHdCQytkcFRTcXY5cVBVNGx0T3NXZFVLb1VNR1VVQmFGS1VSbGQ5UzZSdTJ4TFp5bmd4K3VBZHJRZkIyRmtMbmNjUlp2WU9FOHc2WGNscW1oaWZFUkhyVUJ2ekZ4a055L3BKUzV1UHc2TUt4RXV4N0pTWGRESXBBdGNnbEdQayIsImV4cCI6MTczNDc4NzM4NywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.bxcknhUZrok7DNRtgZCo5rZv5LW9u43-Thoh5-xB4-w</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="18218c78-2b0f-4e3f-810d-ef6bd689e4fb"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="f1a0bbc8-ad8f-4a09-a7bd-a22ab0fc9a22"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="a7f8c500-8b83-4fbd-aa9a-8c50aa322d28"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
   
    {
      "op": "replace",
      "path": "phoneNumbers",
      "value": [
        {
         "primary": true,
         "value": "9874563456"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="7dc7ef39-d4d9-4d90-980f-daacd088e300"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
   
    {
      "op": "replace",
      "path": "phoneNumbers",
      "value": [
        {
         "primary": true,
         "value": "9874563288"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a443b3e7-c99e-43a6-a57b-1cd61a187dcd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b904b04d-19ff-4658-8aec-979bf162c792"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_fm4bf0ha</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_fm4bf0ha</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c8c8d1ce-c3bf-4c1f-8062-0b6dd71e50a0</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="f9cf5416-caee-4af5-a738-f645a50459d6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13 - To Verify Phone numbers values with invalid path for Remove/Replace operations" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="27f9c64b-6dcd-4c2c-8be8-244ed54f4b34"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjdUY3dENlJxU0ZHN01HRnc4SFh6Yk5Dc1d6NXdLQnM3cnBQQk5VSXFmbE9rNVNERXJYUWVnQTVYazF4VCtkQk1sM2NUYnBYL1JQRWFMQm41WEtOYVhhV1MxdnlRUU9DU1dhVk9RdHUrSDNPOUVDZnUxUGVGMFd5U3Fabm1YWVllMTZkbFAwNkNMVmNJZTJuRm1wd1hITWZ4aHMydytuWXdjUEduemNMcFUwK0VSOTYzMkZEemh2QyszWXQ5SnluaCIsImV4cCI6MTczNDc4NzM5MSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.jlG8qM1iWFV3S77t74PcOgK4EE0hQaSHesGwszggPqM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bd918858-3f42-4e96-aa73-9d3b433f3bd9"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="49d8cbf7-f260-462b-8639-96996d490f1f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="2c8d4e14-d070-4524-955d-4e509868cdaf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    
    {
      "op": "remove",
      "path": "phoneNumbers[type eq \"test11\"].value" 
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="bca72a8f-7c51-45e6-8400-c433b0763d02"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    
    {
      "op": "replace",
      "path": "phoneNumbers[type eq \"test\"].value"
     
      
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==true

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="36b7d7ba-e145-4824-b67e-950e7ea4402a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="aa41dec3-7ecb-41f6-8c61-3228a570f67b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_OrRCcQ6N</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_OrRCcQ6N</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>d94ded22-2d8d-4cbe-bcda-f4109b9d26bd</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="a7d6a56a-14f5-4091-92ae-8cbc0fe0b2bb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14- To Verify Addresses values with invalid path for Add/Remove/Replace operations" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="5139ff38-9d39-4f8d-a030-2609e51db1ef"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IktIb0dtWkpnRFVvYkVGTStBdDRmQjlhYlV2bTJFa1M1Y2Z2OHZMWHduZEswK0dwQldsVFU4TUZTS01WWEh5aW9EdEtmWkhGTDI1cC93TGJzbENIRFFmZmxDZ3ZOWk1NeFliOTdkdzUyT0J6R2tUajFPRy9NdDlyNHhVNlBsM1lGdXRHbm54Zlg1RHVRRjA5ZjJTQ3VtaStlanBPT1cveldvZDZYaXNETXZiK1B4TTRqVUorcm1WZzVHMHU4OURPeiIsImV4cCI6MTczNDc4NzM5NCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.mJ0s4x1-AWL9wuTaxDdrZTYR0qPczi_E66ImDwqZjSE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="dacfcb82-f232-4108-979b-b869c7c9690a"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="7b696d66-e7b0-4330-9f76-77bf4805123b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="1a4c1b37-a62e-4a9e-a3a8-5f3a429c1db6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
				
					{
					"op":"remove",
					"path":"addresses[type eq \"wfbork\"].locality"
				
				}
		  ]
		}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="61131190-b1d1-4377-8f76-bd1bce181887"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
				
					{
					"op":"add",
					"path":"addresses[type eq \"wfbork\"].locality",
					"value":"Grugram"
				}
		  ]
		}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER2" id="26df0eb6-eac6-4682-bfd8-9aa20a3c37f3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER2" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
				
					{
					"op":"replace",
					"path":"addresses[type eq \"wfbork\"].locality",
					"value":"Grugram"
				}
		  ]
		}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==true

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="c62f7c2d-4965-4e94-8d1b-c0d54befde53"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c0b2d4f2-a432-46ab-9036-97b0eab9aff9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_pYnuBPqr</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_pYnuBPqr</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c3ef2178-93a5-48d0-a489-adbd3a32b827</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="c5e045d1-8888-4936-a7dc-ec0839fce258" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15 - To verify replace operation is working for Telephone with below payloads" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7b32232-a902-49d7-8a7e-f5fc7b6ec14e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IldtTk1mSzlOb3RhUkpweWJjUllpeG14eGF6TmRsU0Y1UDZiTmsrcHdHNnYyaFR2citFNTAzMWlhZHdTNC9ORWIvYUlGYklabDd0THk0V0kvS2lVTllVMmgzSGtMTXFWVEg3NGVrRTJRVG1TOE81S3JJMzNnay85Z0FaNWRxaEZEMGFPMGp4alZhMjZrYWtGTGoyeWNoU0czaGZVR3ZJQi9WUHpzNXpRQ200VkNTbC9YTWNST3FUdTFDamhGYTd0byIsImV4cCI6MTczNDc4NzM5OCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.VQzJWwGGLw2EyhDNRWZ8UfUhY1NA_ABV1YzE9HJx8JY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f6e44b09-bcba-425d-a290-aa11461f514f"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="507adc51-a577-4ae8-956a-a7f05b5b9ce0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="f31c0c91-8e00-48a3-bc11-b88c5b50ccda"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:api:messages:2.0:PatchOp"
    ],
    "Operations": [
        {
            "op": "add",
            "path": "phoneNumbers[\"value\" eq \"9874563666\"]"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER2" id="a3c10874-ca6c-46de-b05b-a58f8a54a25e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER2" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "name.familyName",
      "value": "MaheshV18"
    },
    {
      "op": "remove",
      "path": "phoneNumbers[\"value\" eq \"9874563666\"]"
    
    }
  ]
}
</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="bbb59865-5699-41e4-a34d-a1e55bbd0c47"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="12c572b3-2507-4b1a-bf76-61d6945f4790"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_psE6hObO</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_psE6hObO</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>a4050175-7607-49e3-ad10-706ca8650ce8</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="e9c24918-d148-4458-9461-96a279a96dcd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16 - To verify Add/Remove/Replace operation for multiple attributes" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4ece4901-cba7-4a20-a537-860db39fd5ec"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ii91OWhldEpieHRZTXg5UmlhR0VuM3MrbmhrLzl4cTBCYUhSYjRkSFMvcnhHQUZ4WmtoUjNoTW1yTC9WOHZsY3UrRlpBTW1XUzRUdTJpa29QaU1OcE1GOENJdG13aHgvT29Rb3R1V3h5RTlFaE8rRndGejJoMnVVaDBtMEs0U3RSQ1RkaWROSGQvZlhLbnZzdklKOUdnTmpUM0xKeS9qcEhESzVML1lObHRhOWQxM3RsYXM2MENEVzZNaXlFRjN2ZSIsImV4cCI6MTczNDc4NzQwMiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.fNGMJiPbtfr4uJk4ltWFUeEJ2WubCSQa-TpzHps7eLY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="29abc6b6-e5ad-4158-b38d-4ec2300e4ca6"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1146de04-651f-4db2-9792-e54d1ba870a1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="6b17c4eb-6bf8-45d9-a1f8-34fcac3bd342"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "name.familyName",
      "value": "Mahesh896"
    },
    {
      "op": "remove",
      "path": "phoneNumbers[\"value\" eq \"9916616577\"]"
    },
    {
      "op": "replace",
      "path": "phoneNumbers",
      "value": [
        {
         "primary": true,
         "value": "1234567811"
        }
      ]
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="60cf66fb-dbcd-478f-a4c7-583ab9a911f5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
   {
      "op": "replace",
      "path": "emails",
      "value": [
        {
          "Primary": true,
          "Value": "abc12@xyz.com"
        }
      ]
    },
    {
      "op": "add",
      "path": "phoneNumbers[\"value\" eq \"9874569876\"]"
    },
    {
      "op": "add",
      "path": "phoneNumbers",
      "value": [
        {
         "primary": false,
         "value": "1234567789"
        }
      ]
    }
  ]
}
</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER2" id="0dc876df-99ca-4305-9759-8c11896e3c36"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER2" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "replace",
      "path": "name.familyName",
      "value": "MaheshV12"
    },
    {
      "op": "remove",
      "path": "phoneNumbers[\"value\" eq \"1234567811\"]"
    
    }
  ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a22d4ae9-b9b8-4942-a0e4-6767a26c80fd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="590d9399-34ba-40d1-beee-8798672cf584"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_4DqGDjr5</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_4DqGDjr5</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>29aa09fa-d993-4d0a-9ffb-08d00ca5e9e3</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="2b932d12-13e1-4f5b-91ac-fe8866fd3522" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17 -To verify that address attribute supports remove operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e0f11fa5-22ed-4370-b3f1-3e840c5a71b9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ino3NGpZWlhwU2NpYm56RU9EYVZ0Qk05UGJFNGtReEJVWWdMZW42eHp1RUhwOFRHK1RqQW5TQU5pK0xqQm5SdnNXRFQ1dFY0WnhBekh2YWthNE1vM2ZQd1FYeWtBUXJQcGs3bWhqUit1U2xnMENneFhwam0wZmxIM3UveW43dXV3OHYyQVFBTndCdDhvZGdPOXgrejFKeGhoL0c1Z2FZZ3J1TzhuRXpRVHFUTkMwQlMzb2dZUlNwdlJOWFBENTgzRCIsImV4cCI6MTczNDc4NzQwNywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.kuTf3SSKR9Cnl3iJiIEyiC9kFPAJ1VMr0K7N3WgQ2_s</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3b55d708-0e0f-4e7d-b7be-2527af3b78ff"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="4c522691-7cf0-414a-bfd7-1ac6c0788d95"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="98cac802-45b5-4cd7-b0d8-23b39717396b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>	{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
			{
					"op":"remove",
					"path":"addresses[type eq \"work\"].country"
					}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="f531e163-8676-4b44-8964-0a9af0a12fd1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="508368cf-5006-4e81-ae3c-8ee60f3672ee"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_DUC0d1YH</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_DUC0d1YH</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>68aca9f7-c227-4327-9cef-357f8e747190</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="97e07095-3b92-45bb-b33f-cfd74a47012d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18 -To verify that department attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9b4f5e9a-187c-4a43-93eb-48c8bd6da0ad"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlVTVDZTdXE4cW11T1VBN2t0cjg0M1NRSnBDbENwK21ZL2p6U1RLbnpRRkZaSThmaGs5dkFIWDBEcC90bVZYS1FHZ2NtcEtkNm1wVGhkUGxnUHNFYmVONWRRRXZBUUxoVURyTEVCaVc0V0g4MHZpaFJDYW9PRDdSbTdSMmtLMEpUS0dBS0NIUDBkMCt1NTlwcVJJc242SG9HaEEyenVsMjFuY1pRaFRtcTVOL0VQMWI3MjBHd243Z0FQSk1WZ25vNiIsImV4cCI6MTczNDc4NzQxMCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.aUNd1xvfrz26cbaghvRG10dL4NGjNNWOV07fr6ZqUEA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="51e90695-eae4-410b-95e1-c5c3bcb0794f"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="f4d79caf-b665-441b-8ab7-67864f76371b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="416b1e76-bfab-4148-b7c1-58c2795657da"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"urn:ietf:params:scim:api:messages:2.0:PatchOp"
	  ],
	  "Operations": [
		
			{
			"op": "add",
			"path": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department",
			"value": "support"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="cfb93071-3655-4f7a-9b14-8e1d3d0b885a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"urn:ietf:params:scim:api:messages:2.0:PatchOp"
	  ],
	  "Operations": [
		
			{
			"op": "replace",
			"path": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department",
			"value": "IT"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="9c636452-72eb-4c4c-a1d9-8dcd7a1fceca"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ae8186f7-d611-4562-8b96-c8abd49bc62e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_TxKdLAz0</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_TxKdLAz0</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>658f9ba5-f413-45a9-9182-3bba93476f6b</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="460d2ed8-6451-4b29-b4c6-1908e3879f93" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19 -To verify that department attribute supports remove operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="96c88b4d-c980-46d9-83e5-fb0ce9240cde"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjhDN1FlQlZ3TDdRVnczNWdLL3FpZDJCZUlvYUFCL093cjlZR3FjWk16dlBEVmRCWWZjSmRuV3J3Wm94d2x5Tms0OWNDRkppaTloeTc2d0N3Z2ZwWFdhaW0zbGl2R1RoRnZzUUxDZDhXMUo0b1N2Z2xsVzlKU3Nud2s5eFNoYlJsWGYrVGRiTnkxUGNpd0JXUk9yWk5XdzhnRUxwM2paV2FBMFc5cDJZUGF3RT0iLCJleHAiOjE3MzQ3ODc0MTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.M6pq533C-JT2NCpdTiRqEamX3HjI8GugIXOVF0vt_NE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="ed1f742d-25d2-48b9-b93b-9079393ff0c9"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="6fb7a598-5d41-4dec-ae0c-38ed319c5a43"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="27820855-f459-4c68-9e12-f1f098b336bf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"urn:ietf:params:scim:api:messages:2.0:PatchOp"
	  ],
	  "Operations": [
		
			{
			"op": "remove",
			"path": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:department"
			
			}
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="ea267d77-3989-4035-a5c3-c750e86e7540"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8ac158c1-f3d4-4717-aa51-c4cb8fe5d47e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_LFnJrrlQ</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_LFnJrrlQ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>62109627-b226-4be8-9885-3a68181fa0e6</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="c8249a96-6dbf-4251-9d09-2cb72dfec20f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20 -To verify that costcenter attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f92dca28-6de9-4e94-b367-d13c3117b589"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlRoYkdwVFdrd0VrS2lKbUsrTUY2VkplWHh3WXZobU9jeFpmSUJsSXkyQXFWVlpxSXJBdW5wdUhkNjJadUJaV3VoWGF4R09ldjFpNnlzNWEzWVdJcHNrcmtidUNyT3c3cDlzZENZTmZ3K1JTT0NveTNqb1F0NFRJeCt0WTdYd0t2cjNpVG83N05qTkF3bXdacVJzVnc5dzJxTU5HYVdrM0tyR2FkbE9jMmJqdTJCNGQ4bFZaUS9iblltYmc5bkc0cCIsImV4cCI6MTczNDc4NzQxNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.kAx_nczirdpQARl1Jq_FXkyhndM1OdTR5uzLbojOOSQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="73e52ca9-16a4-437e-ab77-84d9d3f04607"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="796be6f9-0c8e-4e5d-9a5e-ae733e310430"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="4cf84b65-70f2-4ebc-b2d3-0b2e1780cb41"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"urn:ietf:params:scim:api:messages:2.0:PatchOp"
	  ],
	  "Operations": [
		
			{
			"op": "add",
			"path": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:costcenter",
			"value": "123456"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="2a1ebfa8-1180-4555-b8f3-f00fee5613bd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"urn:ietf:params:scim:api:messages:2.0:PatchOp"
	  ],
	  "Operations": [
		
			{
			"op": "replace",
			"path": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:costcenter",
			"value": "110022"
			}
		
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="e2b77042-0a52-4915-8e11-d0f3140a427b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1737c832-1cdd-459b-be84-79700429cb1d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_xJbVDL2R</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_xJbVDL2R</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>20439313-d32c-4b5f-acc6-743064205ac6</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="2458caf8-4ff5-4f2c-999a-01b407648091" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_21 -To verify that cost center attribute supports remove operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7220b37d-9030-48a6-88a6-25919cd3b76e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Inh5akVESkpsTThWVE5Pb2V3WkZuQ1hxK3dHVU9LVGZsSHg2eE1XUHZpOEJXb0xRRXMwQVE1M29sNTB5V2JXaWtSa3BGeDc0bVducmxMRVFWak5XZVJZdFptQnhGQlRyMUx4N25UdTVyRklMb2lKQVdSVmFzczdmY0ZFYTVKSm8yMkNCQlMyZFUxaUNlQUpHdEptb2gwUjRMa3NBVzFyRkw0cjdpdmtjMy8ydEpnNC9hZUUvcFo1YTJlN3VLRWQvYSIsImV4cCI6MTczNDc4NzQyMCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.JSqQB1g0uEScEZcFpRR6i0c2EaomKv0rA5Pgv6Vc3Q0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="43fad2fa-3f8a-46ec-ac26-1544ae67e705"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="845a3cde-a8ba-469f-b8ab-65bddc51f5f2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="94c85ca2-2c21-4417-968e-a3f1b1792cc9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
	  "schemas": [
		"urn:ietf:params:scim:api:messages:2.0:PatchOp"
	  ],
	  "Operations": [
		
			{
			"op": "remove",
			"path": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:costcenter"
			
			}
	  ]
	}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="53affc6c-9a10-4d5c-a341-de4497740f0a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ee9725d5-14b7-46f5-a700-88d47818683b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_lXe5A5H5</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_lXe5A5H5</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>338c616d-d948-4345-b72c-90d6903dff32</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="b2a1ede0-c06a-4ada-a5e8-ea7694c032e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_22 -To verify that country attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="163a241f-7e43-4b3b-adcc-4c6e50776a00"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Im1OMHNpQlg4MmpUYlRQVmdyREdsYW9nSmYyc2ZCbzlQSU8wc1g0cWgxd2dDdHdZRHRubXlGcUVIckN1MXlxVkR3V09kbHlwZWYrVVNsa0RaQ3pkbkoxcFkwRkdHTjVSc2RsUlBYb2hmU3d3WlF0YjViaWlBNUVzR1d4cU85Sm45cjcvem9SNkJzV3RaY0lTVG45L3J3U29SOTV3ZEZsSjdFZy9MRk16anNPYTNDRGlwOEJKYjZxM1VHQ25xeHgzNCIsImV4cCI6MTczNDc4NzQyMywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.fVfXwlEANfn83pz1QCejZb01Zpxs4jWbx_OzngoLKVw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9bec0f68-a169-4a76-8af2-86d3ed8de270"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="6de1ea16-2055-4b81-9a3d-30c6ac77c4d6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="69194922-7781-4a4a-9339-5e9196e2f1a9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
				{
					"op":"add",
					"path":"addresses[type eq \"work\"].country",
					"value":"India"
					}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="6aba1311-3053-41e7-9448-702dcbd952af"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
				{
					"op":"replace",
					"path":"addresses[type eq \"work\"].country",
					"value":"Canada"
					}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="118c9f49-ccb6-42ef-93e6-e3e02a7f3412"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="806fb854-51b4-4d31-9bad-ac118e8d8593"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_yt1Ocohk</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_yt1Ocohk</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>55342d1d-5734-4327-a6ca-1ccfbe9597f9</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="9f3b446d-bb30-45f6-a1ea-105ecc24e0a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_23 -To verify that Location attribute supports add,replace operation" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="fff0cc1f-6fd1-480b-a244-a1279ec31266"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ikx0QWpFZ21ySDlURVBHVzdlcE11VkZnRkFrWHFwRmJFMGVteXFQYzlJN25SYWhxSkhDVzRnQklnWk5wQ0lSUGlNR0x5QTA2dGgyUm1Kdit6VmJIQ3dqZUpYNk80RDdpeTFrcGk4SlZqQXB5MVdvdTdtdTF0Ulh2T2wwRXJCblpueWQydW8vUUs4NllTRHhXNG5GZ0lXNERRL0FCU1pVMG1BZ1BGNFhDWTd0eGEyV1c5VDVwYjB5WVJqenk4Ym5oUiIsImV4cCI6MTczNDc4NzQyNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.Y15em1UUsdF-W5u4pSLg3c0M5HoJTdIPgeu7h_gMU3I</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fdfe1af4-eec6-4ed3-b0fc-dfec5771d8ef"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="680300df-b641-4c02-bbcc-407054bb9163"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="bcd10c6e-bb7b-4ed5-ad3e-dabccc65bb70"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>	{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
			{
					"op":"add",
					"path":"addresses[type eq \"work\"].locality",
					"value":"West Bengal"
				}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER1" id="5c542011-5ae3-4eeb-8b8e-eafbd6ccdfda"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>	{
		  "schemas": [
			"urn:ietf:params:scim:api:messages:2.0:PatchOp"
		  ],
		  "Operations": [
			{
					"op":"replace",
					"path":"addresses[type eq \"work\"].locality",
					"value":"Delhi"
				}
		  ]
		}  </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="f82aab16-b0e9-4716-9d49-a137d8f355d4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}



//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8f398cc6-f2f9-4c84-b230-ca880a89d9b0"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_c9lkqZQS</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_c9lkqZQS</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>cc82db58-f1c9-4a83-9e35-7cc06317e053</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="a3637af5-bd0c-4bfa-9fed-8ed4d836bb15" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_24 -To verify that Username updated successfully" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ba1d3377-6591-47dd-aa0e-f4db7cb2ceae"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjdySGZkVzFQMkJOZ0xSSDRnakU2ZG81NWNHN0ZnQVhxTlRVVWJ5YjhQemFGblRNUE5pazl0VEV3V2VNNG44STdJdTVhbzlqTUwvV1liMDI5Sk5aenlwMmJwWEcxdzVMOWFFSzBHUks4bEIrWDBmUkZvQXg3OEVlUUcreHBlL1phYlFxUGVYcWFWcUNFZ1FBdFZUck1uMzdiT0R5c0FZMUowVFBpa2d2V1NUY0UzSC9nMDBOZVAzMmpFVDc2SXFMVCIsImV4cCI6MTczNDc4NzQzMCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.oBrrV6zC9dPYTQDJrx7tyKBuzdqWaHGJn6NCOAGDwKA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1df17b87-2f7b-491c-825b-29c6931699e0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userName1", "scim_"+randomGen)



</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="ca8e1376-58b5-423c-a0df-084474456dc0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="6c3cb62a-1e05-403a-97a8-daf4645f1d7a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:api:messages:2.0:PatchOp"
    ],
    "Operations": [
        {
            "op": "Replace",
            "path": "userName",
            "Value": "${#TestCase#userName1}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a868c9cc-a593-4b46-9a2f-2c157670d697"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualuserName = jsonObject.userName
def ExpecteduserName = context.testCase.getPropertyValue("userName1")
assert ActualuserName == ExpecteduserName
log.info ActualuserName

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4f17b906-b935-497b-b759-72a102a590d4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_QRfVMy4k</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_QRfVMy4k</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ca5bf004-2f03-4256-9920-c6571c8acd79</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_QRfVMy4k</con:value></con:property></con:properties></con:testCase><con:testCase id="fa831ee4-b644-4b24-b566-6ff528c5b0a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_25 -To verify that Username is not updated with special characters" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e016665f-3578-4c95-88e5-4f2c4c5d031a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkQzbVNJeWQzV1pLTkI0dVNPQ1c1OU9lMk1YTnVrbGkvdVNQK2pLZXFHdEhVRnhVT3ZzVVZLaGZmazhya3RscWNEWUtLK1NPTkNZYXZNTk9walNvWlRLRHJtQ1dwRDRzK2FrbERxUmRLTEdZVityRC8yd0FwL0RUZXNjb2w3YUU1MkxGOXEzSHlIN0wramxOYnJ6cUp3T3B1Uk1vOFJQYzQ0aUI1L2tVL3QvVDRTTmxmcGF3MEhPbFp4WjM0WkhodCIsImV4cCI6MTczNDc4NzQzMywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.xeEeploo2RFeBt9lgB2T_CARD2kAvd3TakYbGte6e5U</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="259328f9-c640-43de-b8c8-24495d4040e6"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="96ebf9af-b102-4ea7-add8-fa376c5681ce"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="ddada559-7168-4e3b-9cc4-49dca09e91b6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:api:messages:2.0:PatchOp"
    ],
    "Operations": [
        {
            "op": "Replace",
            "path": "userName",
            "Value": "updatepatch$#@"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==true

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="bcdde97d-464d-4d08-9e14-106ca3d83428"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_V7hHVUXD</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_V7hHVUXD</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0c919429-7238-46a3-a7ee-72edc1e47bed</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property></con:properties></con:testCase><con:testCase id="37dd2566-04bf-4467-8831-121578f8fc58" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_26 -To verify that user is deleted after updating Username" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1e4954d2-4a74-4bda-b5bc-1c8f6ec77c2e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImxtMnlFbFBKTFdJUGZuMDV6M00rQUFsUzdKbThETnliNlNyUlcvbGt2K3Vjc0tJTWdNS0NEVXh2ZUxtOFdRWVVERS8weVVyODR3Qnd5ckdtQTNwQTRBVGs4cWd6THA5amNyUE9KQ0NWUDI3R3F1UUMvZnBybHNJaC9WMnQ4ZEpOUUtXSlBoUDk3QlFNTnRnNjU4NERNUW43RVR3TnVKNUoweXBzV0poQ3NpNUxzS0J4YnBoVkJxayszdWlVR0NqSzhDSGJIbTF2MW5qRGd2K1c5eTlwVXc9PSIsImV4cCI6MTczNDc4NzQzNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.LhZfGYQ4N1Gh5wJJRTq3MoxwvYF0iaH_aXzMOtSAHNc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b455d6e5-195d-4188-87cb-d9a808647cd8"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userName1", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="0b7b38a7-a644-48ed-b6d9-8c040031e145"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_UPDATE_USER" id="50957f6a-e323-4f23-af72-f7c746c23ce1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_UPDATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:api:messages:2.0:PatchOp"
    ],
    "Operations": [
        {
            "op": "Replace",
            "path": "userName",
            "Value": "${#TestCase#userName1}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="7549125d-08bb-4b66-93f4-d0331f1aca2d" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="125dd120-edd5-42d8-a607-44e884ff926d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ce9acc09-c3d1-48a0-b948-43778576be79"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_RI3Kd1uw</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_RI3Kd1uw</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b4ab3805-6caa-44ee-b68b-9e75641a10ff</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim_RI3Kd1uw</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="5d6fffe2-f812-4ca9-87d9-f2fb451f6df4" name="GetUserByID"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="98af9057-99f5-438e-8457-362f304efeee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-Verify that user is fetched through User ID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c1a9d4b9-3c3a-4266-b362-84ceb3be08dc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjlsUmVhT1hOempqdURYbysyYisrMlRCM2RabkcyUndXS2FjM044RTAxSkRwcnA1UVRVOWJhTVdKQlVEV3M5aCs0emhNNGp4QUNaQlRnczZBTlhiV3dhMHVMT2EraCt1M1cvSG5vcU03WHpremVaNzA1SHhwR2VoajE0UThnT2hsSmRjZXhyd0Q0b3BPRHhtZzczeEY0NGJFczN2eGlTekxhYkVxRkRLQ2x1Mk84bElJWWlVODE1QSs0aTlMWXdNVCIsImV4cCI6MTczNTg5NzE1NiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.IRPkBDqbCwwKIayzqqc-5QfdGfGYocnO_icNK8de45E</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="6fb335d2-852c-4949-b5aa-8aa1e746498f"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f5d2c032-a125-47e4-824e-caebb0148aa7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="0125577e-942c-4d44-bdcf-4f5b3e19e1e5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3af52745-10eb-4979-8f31-2db379d5991a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2c480417-2659-42d6-8bb7-6ddddbd27146"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>/api/V1/users/</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_LVsCwUoY</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamerJKesn</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gk</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ftcne</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ecd72996-ee65-40ec-a9a5-1715062f403b</con:value></con:property><con:property><con:name>email</con:name><con:value>rJKesn@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidrJKesn</con:value></con:property><con:property><con:name>Work</con:name><con:value>92581893041</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>5655920173</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnamerJKesn</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnamerJKesn</con:value></con:property></con:properties></con:testCase><con:testCase id="8b15c701-442f-45e1-96c1-b2f40426b46a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02- Verify that Inactive user is fetched through filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7ebb108-c074-4c4f-be62-51c1e095136a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlRUVi9wbS9JVDhDb1JUUEp6Z0taU3B5RStmQjdHamRiL2k1OHU0dEtSOTAyd0h5NEZxNGRWUHRIUlo1eUNmd1hDb2lHSlhSdkJOamorNGNoSXlXb3ZDWlpXaHpFbDBoc0RkVzRKS1JGOHh1aktaK0xnZzlST3ZKVURydzhSTzlxeFlVTEZWdXo3MURGeks3SWdLWlRmcVptUDlLbkN5YnF6TzZPTFowa3M1MjFIVGt1SGFyNzNieXQ4Tkxvb1pCTyIsImV4cCI6MTczNTg5NzQ4MCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.5K4tn88S5HwEd4bvbN_ePOBQT7cVfD-U8USqxMZ-CLE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="ea2f1f94-f882-4331-82c3-47051fe099c8"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="04f71091-43c2-4ee1-b41b-8e4325b4ac7f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#activeFalse},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="4504dbb0-ca8e-44dc-85b9-d88adec36509"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3af52745-10eb-4979-8f31-2db379d5991a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

 //Verify active value
def ActualActivevalue = jsonObject.active
assert ActualActivevalue == false
//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="includeInactive" value="true"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="90e3b161-fc94-4854-98e5-393af26406ef"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>/api/V1/users/</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WbojsxDb</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamef1hRwq</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gk</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ftcne</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7f03b627-c720-4ccd-8ff7-97f1245d77b0</con:value></con:property><con:property><con:name>email</con:name><con:value>f1hRwq@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidf1hRwq</con:value></con:property><con:property><con:name>Work</con:name><con:value>20858894824</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>8868776853</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamef1hRwq</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamef1hRwq</con:value></con:property></con:properties></con:testCase><con:testCase id="e1a8f1b0-8140-4e59-aeec-7a9b5234d57f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-Verify that Deleted user is not fetched" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="efb417ab-e357-40ec-b6ed-fbf2f301723b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlVKNnVzYldyUWE2MXUrc1dSMkpzTnNJV2o5SjFobm5BeXZjdStMNW5EdlFaY2g4d0lXTFp0TkQ5MmEwOElGdVRxN2psakdwUG92UGdxT2xXUVV1emNoVm9EWFc3YU5KZzN6cWpuSUtLVmJ5YkF5em80MFd3b1F0MTNKaHFCeFN3a2NOYjlDRnF5alNvblBkZWloY1RiZUMwMTgvNnhSUVd6a2ZrSG5EdzJQbGg3eUhZay9ZSDE3czRkZGdMOStpUSIsImV4cCI6MTczNTg5NzU3MiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.DFGLABACWm5D9o5TpasvjMVSY1JuLTo5rRiC2mCboRI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="0c68915c-961f-4f5d-911c-b68a86b64589"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f6117bf4-c5b3-496c-ac4f-d0f180283d54"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="5bbdbe98-5c27-4bc0-938e-88fbcfe03001"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="7eb4e040-4cf1-4310-a2ad-2108893a4ce9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="3af52745-10eb-4979-8f31-2db379d5991a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="e85058e2-1d98-477a-b6af-adc7be566bbd" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6c999950-0594-48d7-b386-de3c9a3f1db7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>/api/V1/users/</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5nHl7Qkk</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameyIFiMY</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gk</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ftcne</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>40bdcc75-09a3-4ac7-8918-5784b2bd2357</con:value></con:property><con:property><con:name>email</con:name><con:value>yIFiMY@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidyIFiMY</con:value></con:property><con:property><con:name>Work</con:name><con:value>30652123674</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7439322930</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameyIFiMY</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameyIFiMY</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property><con:property><con:name>activeFalse</con:name><con:value>false</con:value></con:property></con:properties></con:testSuite><con:testSuite id="ece61439-e876-4ebf-8ce2-397e2fd76c97" name="DeleteSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5945b83a-5fa5-4a2a-afd7-fff04a6d6e9c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify that correct response is shown when User is deleted" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="729b5349-8493-4191-b176-c2217a1ce34b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLcXJQYTcrNnVqaVZGMVFtTlJ1Sndod1hac2JsMFNOTTZtenRueEM4S0k0WU1FbyttNVVqYXVHQlJTb1hZVHY2SUIvWGpRcGdxcW5jYnBHd3A5cS8rajFjcUxpeE1DUzJMWlpvejF5RkttUHJOalJ1cGxOeXNPVHJrSTZzYXdIWTQ2SGJHazhnQ1RhWWlHVkxlZXg4cyt0TTR2WUJjekJTZzlKbkdaQ3VCK1YvK0FLNm45Q1QyT2NSaGtJNmVsYnUiLCJleHAiOjE3MzU5OTgzOTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.xGz3jd3GzUuwEL9emTW-77MiUgFX47ugCeV69kXzKcQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Driver Script" id="f8d3ea31-d1b7-4871-a834-ba8ae5f24c71"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="f0b845b5-7553-4d55-92e8-310e2a92b4f1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="d016732e-8cb4-49df-87f2-cc2eb68c3bb6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="08bce3a6-4e83-46d5-bb0b-0c159aab879c" name="Valid HTTP Status Codes"><con:configuration><codes>204</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d0a1a690-5613-4a8f-aa05-be22aebf0e76"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>05583239-3774-4f6c-ad0c-0845f5af14ed</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_WM6dMPRJ</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNameMC56K3</con:value></con:property><con:property><con:name>email</con:name><con:value>MC56K3@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidMC56K3</con:value></con:property><con:property><con:name>Work</con:name><con:value>11965935987</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0922280840</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameMC56K3</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameMC56K3</con:value></con:property></con:properties></con:testCase><con:testCase id="de7b64af-0301-472f-8c42-390816f1da44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify response on deleting a deleted User" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="817bef0c-3b8f-4c31-aa44-1886e3251ef2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ1a0RtZ2JoWmpXUEtGTHpxeG5aZzJmZXM3VXNWWFZoNmtLSVpQN3dpbWJ2emk2dmxIemJhZ2dtZGZEbEZCUi9XdTYwekxySlBjLy95SGR5WXBxdmR0a1QzNkZjb2pWYVhRY2lPQlZLT2FLYmc2WXVlYldrOU1YTXBseFhGNElTZGtPcTBKWHJvR1dJUmVuR285cWtiS3Q2SHFGYmpYOHhYSVdObklZVXg3OW89IiwiZXhwIjoxNzM1OTk4NDA0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.RFpdp3kNB-qf-Gl2skQa3s1HN7351gAyKItrNw5h6wQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Driver Script" id="2d7a0e26-a5e8-48e1-a2a3-bcad26064d4a"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="0f951a87-d3de-49f8-90e5-c24a068ca904"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="96045ad7-3c40-4944-ba30-23aa4d766369"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_DeletedUSER" id="d3ad4c0c-5990-4715-8398-607ac7087543"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_DeletedUSER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="f882f171-851c-4619-84e5-98dd22f44e41" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="582fe5f4-ce81-4be0-9dbb-247647b5fdba"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalUserId</con:name><con:value>94c7f42d-0717-4c76-a95a-3f42fa0f6459</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_hSGI8fou</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamem6Y4aA</con:value></con:property><con:property><con:name>email</con:name><con:value>m6Y4aA@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidm6Y4aA</con:value></con:property><con:property><con:name>Work</con:name><con:value>54258998995</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>6483546552</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamem6Y4aA</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamem6Y4aA</con:value></con:property></con:properties></con:testCase><con:testCase id="b59bd95a-d8f9-40b2-b3c1-d71ca8589ce6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify that deleted user is not shown when we fetch User through GET endpoint" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d3899801-8d7a-484e-8397-8fd65264fdc2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJuS3VUd084dGRHb3ZaWUczeTZMK0F6cnNSb0tMVUJYNHc5Zk9zMzlnYkZYNzNDS2dySUNjekZtMlh5NG1hOEpYak5aZmNUWlhZTW1oU1FpZTQyRjJmRnlQS3BpNDV0M1Rrcjd6Mm02V09Kb1dROGRHZE9MTi9VU2cxeXlWTlo2Vm5zUUpJajk5ZXQ2WTFmWGRYeVRoVHdKaEdHOFBhSXV2SFp3SFFzdCs2cjNGTmdWaHduMi96K01IWHJWQS9xVU0iLCJleHAiOjE3MzU5OTg0MDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.zNqOjkYOa4ebjHFWavSq-cRhQQkBTioRQ7LLl6RATAo</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6fbc13b9-74b0-4906-8dd6-19f8f2d60828"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="772b51be-0c9e-4ca2-9e89-3b475d2b751d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="f50a0424-9209-4acb-957d-763d7fd1bbf6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="a4af9edb-f365-454d-818f-6128bfc40c31"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="1a6b3292-f564-41f9-b59e-11aeda87da54" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4be2dbd7-e5c2-4c4a-9c80-74fb9783ecde"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalUserId</con:name><con:value>5d49cffd-5b2f-4986-9506-ddead73b3dcd</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZlCAClFG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNamexlb42W</con:value></con:property><con:property><con:name>email</con:name><con:value>xlb42W@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidxlb42W</con:value></con:property><con:property><con:name>Work</con:name><con:value>52808579223</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>7855833921</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lnamexlb42W</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fnamexlb42W</con:value></con:property></con:properties></con:testCase><con:testCase id="03afff00-0817-44a2-ab89-9710adaaae07" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-Verify that user with accented characters gets deleted successfully" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="562e5a05-eb31-4d6f-af4a-c918cc6312dc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkxFZ0U1RWRwT2J5cXRBQ2Y5WHJYZTFYdWhYVzRINExnVGFMd1pzUHBNQUJjb1IxWHc5ZlFyZmp5SGNIdjN2UXFkb0ZVRlZsUStSUG5YNUl6NDl3aktNeUg3YlJpamhGc25zSktkc2I5VjJqREdNekU3S2lkSUd4S2xFNWpoKzRXc1hHQnRXUURUZ1pZS0FSRktsYjE3V1AzKzd3cVhpNWNYMXExTWxZZFdycWxha1liNTZHRVhTU1B1eXlzZzhpU1ZYQzNHUWkvWlNaQ3h0aC9KdWl6SUE9PSIsImV4cCI6MTczNTg5NjE0MCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.K_-Y_rPM4rfb8lN4TURdHtI-qIz2HMmZ7LXtV2bJ4sk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="Driver Script" id="d6ca6dcd-9754-4586-a1c7-7be01598fc73"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
//def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
//userName = userName
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
//context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create User" id="d3655939-d85a-4250-b507-cb07a151b90c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": true,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="b566ff90-3885-4ed4-897a-202ebd1981d5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="4be2b69e-a6aa-499a-a18b-1c803464e017" disabled="true"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="f402ae17-5d64-4334-99d0-ea80f0047822"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse


if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

//def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
//def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")
//
//def ResponseHeaders = messageExchange.getResponseHeaders()
//def HttpCode = ResponseHeaders["#status#"]
//
//
//if(HttpCode[0].toString().equals(ExpectedStatusCode))
//{
//	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
//	  
//}else{
//	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
//	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
//}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5f3db941-9eef-41d4-96e3-753d5834c0f5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalUserId</con:name><con:value>5ce830d0-fa6e-4e4f-8747-72a7164d9863</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userName</con:name><con:value>sciméñø_iitimq</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_RwSJberj</con:value></con:property><con:property><con:name>email</con:name><con:value>Lnj0NC@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidLnj0NC</con:value></con:property><con:property><con:name>Work</con:name><con:value>76757872187</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>4133196428</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnameLnj0NC</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnameLnj0NC</con:value></con:property></con:properties></con:testCase><con:testCase id="7080ac73-ed59-4c2b-be71-d56eaad29aac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To Verify that correct response when user try to delete the user with invalid user ID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e6e1bbf3-7510-4fca-b1c6-5ef2ad27b681"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>accesstoken</con:name></con:property><con:property><con:name>token</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJWcFNPR1p4WVNzRUVQaUJpMGR1SlBkTjRDQkF1NzhwY1FEdTFCeG5iT1RvbGFuZ0pJQ1ZDZm1yS3paOGNIQlV6aERDRXViUlhLRGFveVk4Qjg4NEF2bXRTZ3JibmIxQUVkSkkya1RqUHB3VVNYbmxwdC9YeDFVT3NRdjZYNW9pcXU4azZIUXNJc0RCZEZRa0QxeVZ3YUdRNVJncVlVbzV1WnE4T01iRHFibUk0Yk5uTkhnZmhRTkg0SEJHOE16U1IiLCJleHAiOjE3MzU5OTg0MTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.fwOQjMwgkqvrvG_P8FHk4-t_QJD7DurdMRfEVNqx1j4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7b7ed46b-fe13-40e8-adf4-01ead7a01de6"><con:settings/><con:config><script>import org.apache.commons.lang.*
 
def randomGen =RandomStringUtils.randomAlphanumeric(6)
def randomGen1 =RandomStringUtils.randomNumeric(10)
 def randomGen2 =RandomStringUtils.randomNumeric(11)
log.info "Random Generated Values is   " + randomGen
log.info "Random Generated Mobile No is   " + randomGen1
log.info "Random Generated Work No is   " + randomGen1
//define variables
def externalId = context.expand('${#TestSuite#externalId}')
def userName = context.expand('${#TestSuite#userName}')
def Email = context.expand('${#TestSuite#Email}')
def Work = context.expand('${#TestSuite#Work}')
def Mobile = context.expand('${#TestSuite#Mobile}')
def familyName = context.expand('${#TestSuite#familyName}')
def givenName = context.expand('${#TestSuite#givenName}')


//Add random variable value
externalId = externalId + randomGen
userName = userName + randomGen
familyName = familyName + randomGen
givenName = givenName + randomGen
Email = randomGen + Email
Mobile = randomGen1
Work = randomGen2


//Set properties value
context.testCase.setPropertyValue("externalId",externalId)
context.testCase.setPropertyValue("userName",userName)
context.testCase.setPropertyValue("Email",Email)
context.testCase.setPropertyValue("Work",Work)
context.testCase.setPropertyValue("Mobile",Mobile)
context.testCase.setPropertyValue("familyName",familyName)
context.testCase.setPropertyValue("givenName",givenName)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_User" id="afa232fd-b349-42d6-acf2-895c36adae7a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_User" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "${#TestSuite#schemas}"
        ],
        "externalId": "${#TestCase#externalId}", 
        "userName": "${#TestCase#userName}",
        "active": ${#TestSuite#active},
    "emails": [{
            "primary": ${#TestSuite#primary},
            "value": "${#TestCase#Email}"
        }
        ],
    "phoneNumbers": [{
            "primary": ${#TestSuite#primaryFalse},
            "value": "${#TestCase#Work}"
        },
        {
            "primary": ${#TestSuite#primary},
            "type": "${#TestSuite#typeMobile}",
            "value": "${#TestCase#Mobile}"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestSuite#preferredLanguage}",
    "addresses": [
        {
            "type": "${#TestSuite#typework}",
            "country": "${#TestSuite#country}",
            "locality": "${#TestSuite#country}"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed963066-1eea-41d5-9272-b9f949ee62e3" name="Valid HTTP Status Codes"><con:configuration><codes>201</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c381bf2b-0722-4046-bc79-421cc3d6f4a3" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("externalId")
assert ActualExternalUserId == ExpectedUsersId




//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.testSuite.getPropertyValue("preferredLanguage")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_USER" id="4b569d26-bec9-4927-8b9b-f21e5f43f155"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc92f091-e4bb-4d74-86be-4e22daa99101" name="Valid HTTP Status Codes"><con:configuration><codes>404</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ee0df66a-b841-4f5a-9d27-9d3a3c736bc6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalUserId</con:name><con:value>9e699f36-7bc4-4115-b1c9-7216a268e6a0798989</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZlCAClFG</con:value></con:property><con:property><con:name>userName</con:name><con:value>UNametK7zxZ</con:value></con:property><con:property><con:name>email</con:name><con:value>tK7zxZ@xyz.com</con:value></con:property><con:property><con:name>externalId</con:name><con:value>extidtK7zxZ</con:value></con:property><con:property><con:name>Work</con:name><con:value>56166941391</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>0691975220</con:value></con:property><con:property><con:name>familyName</con:name><con:value>LnametK7zxZ</con:value></con:property><con:property><con:name>givenName</con:name><con:value>FnametK7zxZ</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>externalId</con:name><con:value>extid</con:value></con:property><con:property><con:name>userName</con:name><con:value>UName</con:value></con:property><con:property><con:name>Email</con:name><con:value>@xyz.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>Lname</con:value></con:property><con:property><con:name>givenName</con:name><con:value>Fname</con:value></con:property><con:property><con:name>Mobile</con:name><con:value>MNo</con:value></con:property><con:property><con:name>Work</con:name><con:value>WNo</con:value></con:property><con:property><con:name>schemas</con:name><con:value>urn:ietf:params:scim:schemas:core:2.0:User</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>primary</con:name><con:value>true</con:value></con:property><con:property><con:name>typework</con:name><con:value>work</con:value></con:property><con:property><con:name>typeMobile</con:name><con:value>Mobile</con:value></con:property><con:property><con:name>country</con:name><con:value>India</con:value></con:property><con:property><con:name>locality</con:name><con:value>delhi</con:value></con:property><con:property><con:name>primaryFalse</con:name><con:value>false</con:value></con:property><con:property><con:name>department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>111</con:value></con:property><con:property><con:name>preferredLanguage</con:name><con:value>en-GB</con:value></con:property></con:properties></con:testSuite><con:testSuite id="34aefde1-3122-45f8-ba12-27e9349893a3" name="GetSCIMUser TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9d43953d-b363-4ba3-83d2-ede95b07ff53" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6272-To Verify SCIM User by valid UserID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="aab525b8-8910-4092-8db7-22c3b13bce13"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Imp4eDY2dU9iaUNMMi9MeWJNVkxxZGVRKzl5QU5BaWk1RENnSTR1ZFJqR1FNQndmS1FwZE9LMHVIM3BaQ2hvTFZKbXJwT1puUUhaZVVQTi9KM29OVUxWcWtNSFc1ZXUzNW8ybHV4VnJCNTQ1UzhlanBjUlVkS2hpS0kxOFlxZTRmbkNLQXo3ekcxZWtBSm11M3YwZDNRaENhQkdyTXU4SU9mSXZadHk0Q2ROWT0iLCJleHAiOjE3MzQ3ODc0ODEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.EprMpBS2DAWJ3hVh4BBYT6Y5uq40zXExAkzLOmKKg6M</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c561c37d-c64f-4f8f-91c0-53b35a4890c6"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)

 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="b27c8f11-b379-4d15-9c6f-7143649ff2bf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="9cc9a376-6750-400f-81bd-77d174605444"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//log.info ActualExternalUserId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//Verify the Internal UserId for User
def ActualinternalUserId = jsonObject.id
def ExpectedUserId = context.testCase.getPropertyValue("internalUserId")
assert ActualinternalUserId == ExpectedUserId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalUserId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="68b8132d-0757-40a8-8a01-94f5377fbf05"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wLwju5Xx</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_wLwju5Xx</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>48025b1d-f539-41ff-aa4f-ca880a7a8d21</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property><con:property><con:name>group</con:name><con:value>hawai gp</con:value></con:property><con:property><con:name>floor</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="29172bcb-d2aa-41b9-9967-f51fc5789c97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6273-To Verify response for ALL users" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4663b5e0-1643-4004-b092-8e1e311b8e6e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)

tC.getTestStepByName("CREATE_USER").testRequest.setRequestHeaders(headers)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

// SCIM Create User Data
String extId = RandomStringUtils.randomNumeric(6);
tC.setPropertyValue("userExtId", "extId_"+extId)

String uName = RandomStringUtils.randomAlphabetic(6);
tC.setPropertyValue("userName", "scim_"+uName.toLowerCase())

testRunner.runTestStepByName("CREATE_USER")
testRunner.runTestStepByName("GET_USER_BY_FILTER")

	
if(DB_FLAG.equalsIgnoreCase('TRUE')){
	    testRunner.runTestStepByName("DB_VALIDATION")
		
}else{
	    log.info "DB VALIDATION SKIP..."
	}
	
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="9c9b6542-36b7-4778-b24b-b1e796b07084"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="6410fd1b-58dd-4a9c-9e4b-aed987b4ef20"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MzMwMDk1OTUsImV4cCI6MTYzMzA5NTk5NSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.zGme65G2OyRdWxErXexLJydSgVamQNWWfGPSk4p69jM" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="de9cb0d6-5a0d-4844-a00e-c277557da903"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MzMwMDk1OTUsImV4cCI6MTYzMzA5NTk5NSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.zGme65G2OyRdWxErXexLJydSgVamQNWWfGPSk4p69jM" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="https://condecosoftware.atlassian.net/browse/IN-6660"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="calltestcase" name="DB_VALIDATION" id="9ab4eef3-ccc7-4bdd-b922-b6ffd7552180"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>831d9922-7df6-4e80-8c5e-8f49f8a78df4</con:targetTestCase><con:properties><con:property><con:name>internalUserId</con:name><con:value>${#TestCase#internalUserId}</con:value></con:property><con:property><con:name>userName</con:name><con:value>${#TestCase#userName}</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name></con:property><con:property><con:name>GROUP_RESOURCE</con:name></con:property><con:property><con:name>internalGroupId</con:name></con:property><con:property><con:name>groupName</con:name></con:property></con:properties><con:returnProperties/><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="delay" name="END" id="5bdb6547-9e69-4578-951f-f068db4b63a8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_739859</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_adqhwu</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2937</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="345a65f4-8d0f-4b66-ac7c-14b0f7ae863a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6274-To Verify response for attribute &quot;userName&quot; with valid Operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8b3b7e04-d771-45d3-afec-f7b9f645f13d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkMvaVkzdzFJenFVZTZsM0s3QngyU0ZhYWV3dGhmbTNRaEtWb1RvNEtPUzdoRFlScW9jNkFDUHk3KzRWemZ6RXZFYzA3am5FTGJUOHhwSzVtbG9zY2NzVEhkNk5OSkZ3cTl4RlVxYmpvZXpZQzdVSkZIbExVVGttV01TRW9veG9MbTBUSHUyNGd2Wm1YY1R0bWRURWNoSTVPYzQ1T1pTKzZkZVpDYnoxeW4zb3pzeE9PT0xmTUNuZWh2UlBlaXkxSCIsImV4cCI6MTczNDc4NzQ4NCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.z4nBpvUBHCUsYLDJ0Jd3iV-SDPEM_QSI7gPlVObNJqM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="51420576-429b-4e13-8998-a98d5298b446"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="396482df-e106-4fd6-a1c3-99b9c0c40164"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="74c340f7-f21f-4fe8-8007-ec288b4b208a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER_BY_FILTEREmail" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify email and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualUserName = context.testCase.getPropertyValue("userName")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName==ActualUserName
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
//def ActualLanguage = jsonObject.preferredLanguage
//def ExpectedLanguage = context.testCase.getPropertyValue("Language")
//assert ActualLanguage == ExpectedLanguage
//log.info ActualLanguage


//// Verify Country,Location not null
//def country = jsonObject.addresses.country
//def locality = jsonObject.addresses.locality
//assert country != null
//assert locality != null

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="49ec7a9d-4cd1-4305-b820-a6d3ec0a93cf"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_6oswI7Od</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_6oswI7Od</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3f99397d-b673-49ea-a150-d7fc033f02de</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-GB</con:value></con:property></con:properties></con:testCase><con:testCase id="8b26f663-50c1-43f9-b710-2e8a5b11d46b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6274-To Verify response for attribute &quot;userName&quot; with valid Operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="69de2240-ef3a-49a6-95eb-8c20302acdba"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkI2OCtxTTNLL0dUcW95NjczRWtLNmZyTUMydnQwd21YS2xGM21DNmtUMDhacWQyTC9jWXIrMjg4K096QWtvRCt1YWw5ZzhtYzFpaTNMODlLSFk0RThHVE1FTGw0MEZ2b0N5KytWdmZUVlZLRWFUVGhzb3RrMXowK1B6V3lpaTIvMC9qL3VGR3B5bWw3R2lSWmR2VWVuVnJacHc0clRuN09iMUFwM09oY2JQOTI3bGNmU2kxakdKeUxaM0d6bzhNQyIsImV4cCI6MTczNDc4NzQ4NiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.MyZkhMENYwjAdR-wH6DsEnjvEJXFTNOssmVIcjaSjqk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9270579a-3a07-4ece-9850-d491d2dfa8a1"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="4019183b-9a0a-419c-9ff1-0d72fefe2f2c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="fcde83de-46eb-40b9-9014-346b9b0107f6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1NjA2NTEsImV4cCI6MTY4ODY0NzA1MSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.aFmfS6qk5EwVyVLScBLBN9mhUFcI7zedvCe1mf9Fn3fbtQMGDwq-gL1IBojdhLtm7c2MJDTi32XzscUFy8tW5g" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName not present in response and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()

def ActualuserName = context.testCase.getPropertyValue("userName")
for (int i=0;i&lt;ResourcesArrayLength;i++){
     assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=ActualuserName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName ne &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ce1f25fb-029e-4e1a-86b9-5cf3f682b352"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_4WUY89rS</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_4WUY89rS</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>a2eb7600-4064-40c8-92f8-fb708d5e2180</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nl-NL</con:value></con:property></con:properties></con:testCase><con:testCase id="9d10c33c-e3ea-43df-b891-a3ccf46b8ba5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6274-To Verify response for attribute &quot;userName&quot; with valid Operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2141623e-2641-4134-b2f7-24335277a408"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IndrZS9YMGVvMXY4SlF2aGxXYU1CTkRJRGJUN3NONnFWKyt5TWN4T1Q3OGYrYjd3R3Z5K0RnUHk3OG4wMjI1M1QzT2N1M3lVUWVJMVBrK3Vjc3loTmhFVTUyeDl6ZFBnbDA2UmlWYmx2OGJ2eENTWHJubFNaajJINWdyb2RUM1cyRGE5YVZVVXBKMFIxb0s2MTgrYm1VVlNrdFVKdFJuUnFlaEdzeFkvaWZMeVUySDBjc3RsU1gzV2xEL2JyQ1VuVSIsImV4cCI6MTczNDc4NzQ4OCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.y1La-B1thmOXg38a8FM3RhrkSNgPXxa6dYHe-wfasEE</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a2ea8a2f-f282-4e2c-96b3-69ade5d8d8d2"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userNameContains", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="17e5d277-c379-411f-84a3-9bf2c166079e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="f955e573-16f9-49ef-a55e-e6214e219a4d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualUserName = context.testCase.getPropertyValue("userNameContains")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName.contains(ActualUserName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName co &quot;${#TestCase#userNameContains}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a4d28e01-1731-45da-9bab-cb4a14326525"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_iPpdg2pE</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_iPpdg2pE</con:value></con:property><con:property><con:name>userNameContains</con:name><con:value>iPpdg2pE</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4048ce75-d354-4f13-be4a-5adc2dda7af9</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property></con:properties></con:testCase><con:testCase id="341f80ec-0c72-4a53-8c35-934fd5c84622" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6274-To Verify response for attribute &quot;userName&quot; with valid Operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8743d247-1dba-4d0a-b476-aebefb1d444f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InY1aWhzaGhKZEFtSGtDZFF2bWp2aFJmQWtuMnMvSVRLWVh0aW8vQ0x1cUxkd3UxR1QzL0JHZktaWFpsdndqK0FaOEZKb2FBeENuOEVVby83OXo0N0lRZ3QyOE1ZWUs2Y2pVc2o1MnZucnpWbnM4MTMvdjQ3ZTdSVzVXa1VNc0pmcE5TUkgwdTFDYXZ0TTM4OEw4aHhlY0ExSGtScHRJQkRRR3Q1UzhtV3o1TT0iLCJleHAiOjE3MzQ3ODc0OTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Sb_fYbV1XZKZDdSDsiQEOR0JZDBdMjcvO5rqE6rIQcI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e2261263-2a5c-4d2c-b9fa-da56252adfd0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+"x"+randomGen)
tC.setPropertyValue("userNameSw", "scim_x")</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="e8a1b1ac-7c75-4ef3-b016-2ee4bf6a7a05"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="bd882b75-1bbc-4b98-89b3-20d4733b9868"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def ResourcesArrayLength = jsonObject.Resources.size()
log.info ResourcesArrayLength

for(int i=0;i&lt;ResourcesArrayLength;i++){
	
def ActualUserName = jsonObject.Resources[i].userName
def ExpectedUserName = context.testCase.getPropertyValue("userNameSw")
	assert jsonObject.Resources[i].userName.contains(ActualUserName).toString()
}
////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName sw &quot;${#TestCase#userNameSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d91cadab-d08e-4c2c-b244-35f89a73932c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_RKL3iGwF</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_xRKL3iGwF</con:value></con:property><con:property><con:name>userNameSw</con:name><con:value>scim_x</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>cdb45e85-3d9a-4c85-aa6e-c0d024b9fee5</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property></con:properties></con:testCase><con:testCase id="30f72948-7796-445c-a6b6-938466a63ce0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6274-To Verify response for attribute &quot;userName&quot; with valid Operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b7e5c458-c93e-427d-a2b0-7480ba455581"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkhWa1g4ZWxLRmk2bCtxejVOY3VMTVk1R3E1YzJuV3Boc1Y3dk9BNFZuempCcm8zNmVCWEU1YTNGNTVoWVhaK1hRdVd1Vk4zSEF4MDd0N3hydERlT3ZTRm9FaVllamlVeUVRdjF4OXpEdEpFNDZQVnoyRExlb0wxdmlmcS92NnNveHVjajBRVFo5dXVDaEFnTk15VFRLSlc1ZllEeElkNDF0U0dsSW9vRmozVndKQVk4b2I4aFNxUnBZTTJ6am1rcCIsImV4cCI6MTczNDc4NzQ5MiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.KCTQSO9olSBA8UsuqNhHM3c_X14L8Qe5f60cQwKmkg0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="29f96a1e-2820-4614-ade5-b7db0b6d9e70"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userNameEw", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="fb8cc3ef-b1bb-4db7-a52b-d8fb49a4f11c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ca1ec872-c351-4dbe-8a74-c4f652ae2209"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User name for User
def ResourcesArrayLength = jsonObject.Resources.size()
log.info ResourcesArrayLength

for(int i=0;i&lt;ResourcesArrayLength;i++){
	
def ActualUserName = jsonObject.Resources[i].userName
def ExpectedUserName = context.testCase.getPropertyValue("userNameEw")
	assert jsonObject.Resources[i].userName.contains(ActualUserName).toString()
}

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName ew &quot;${#TestCase#userNameEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="71efb6b3-8452-4443-8c33-a63ba0af9e1f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_00bIwgv9</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_00bIwgv9</con:value></con:property><con:property><con:name>userNameEw</con:name><con:value>00bIwgv9</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>85c08410-d376-40ca-adcd-2f20c6dde10c</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property></con:properties></con:testCase><con:testCase id="f62525e5-07b0-46ad-80fb-951ffe884dc3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6276-To Verify Pagination in response" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="766a120c-7f73-44ce-8e4c-76ae9b947c52"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)


String sIndex = RandomStringUtils.randomNumeric(1);
tC.setPropertyValue("startIndex", ""+sIndex.toLowerCase())

String count = RandomStringUtils.randomNumeric(3);
tC.setPropertyValue("count", ""+count.toLowerCase())

testRunner.runTestStepByName("GET_USER_BY_FILTER")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="0868900c-1a07-4fe8-b062-af26dba5b109"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="e7fc7ce4-623f-4063-92b3-b4be72caac85"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTAxMjQ5NjQsImV4cCI6MTYxMDIxMTM2NCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.UpSsxdA9t-rW5KK6ng8X9zEALFXpSbcacJHCYi2UD1M" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="userName co &quot;${#TestCase#userName}&quot;" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_ALL_USERS" id="b17ae8ea-6274-4967-bda2-877a7e9ff32a" disabled="true"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_ALL_USERS" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDczNDg5MjgsImV4cCI6MTYwNzQzNTMyOCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.5_LK6yBQSpggtiq5KrXUun_IsTQ3MeIMVeK27loKgq0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName co &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="936b8d2a-6ccd-45d8-8b1a-b92853d6fc7a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_29234</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_wsyid</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>null</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value/></con:property><con:property><con:name>count</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="bdb93e9e-f42b-499e-8b36-4886f36f15ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6485-To Verify response with Invalid UserID--Check scimType 'null' in response?" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bf56def8-254b-4474-8cdb-9f1c5e54c8cc"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)

tC.getTestStepByName("GET_USER_BY_ID").testRequest.setRequestHeaders(headers)

// Set Invald userID
String uName = RandomStringUtils.randomNumeric(4);
tC.setPropertyValue("internalUserId", "999999")

testRunner.runTestStepByName("GET_USER_BY_ID")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="05ea9b96-c3c1-42a0-815e-077e74f7ec75"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_ID" id="4aecdf1b-7159-4059-ab89-a63bfbe39981"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTAxMjgwNDUsImV4cCI6MTYxMDIxNDQ0NSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.nwQgQkJ7bMnICKXiIF1wLvQn28w2fHZ09v7xHHW7J_Y" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.meta.resourceType
//def userLocation = jsonObject.meta.location
//assert resourceType == "User"

// Verify userName not null
//def uName = jsonObject.userName
//assert uName != null

// Verify First/Last name not null
//def fName = jsonObject.name.givenName
//def lName = jsonObject.name.familyName
//assert fName != null
//assert lName != null

// Verify scimType is null
//def sType = jsonObject.schemas.scimType
//assert scimType != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "null"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="id" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>includeInactive</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9b6fbb46-ac26-4b3d-9baf-fa2516c24d79"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>999999</con:value></con:property></con:properties></con:testCase><con:testCase id="96944017-fc67-4308-8051-db358d8efda5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6493-To Verify response when Invalid Operator given in filter for userName" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9677953c-6301-449f-82f9-cc8b5e10a739"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IitTQjFrWnRpblNBdUhRTTFXanlYYWJwbjdBb3FGL2xCdFFSR2dBN09WeUJrZXV1bXZYTExMbUlxMWt4K0M4eTRLS0xWVStUaWszc1ZoODdtcndLcXpKbDdDVzM1dDVreHl5S3VBS1k3Q2ZkYTNpM2I1TXZrdnVpcVF3TWZSVFZPOFBPZlNNOG9zaGlQMUtHR3ZpTU8zanE2TStSYmpvS0NaN2JuNGc5VUJFMThyVDlmdk12TkVVeTlnVlFSd0RSaSIsImV4cCI6MTczNDc4NzQ5MywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.X32LZToSfAzr7tPPwVkx0Vv_DCkyl5YJVzQQmypOSJg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3c45608b-7424-42e6-93c6-6f22d390ebcb"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="b60072f3-a471-4aab-8d2e-08a8e2d3a285"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName re &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9df10d98-4ed4-431b-aa07-cfc438ee6a3b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_wAf9NXaT</con:value></con:property></con:properties></con:testCase><con:testCase id="d8922113-4ce1-4b51-b0de-a5f0ca578491" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6494-To Verify GetAll Users exist in System---Verify UserCount with DB" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3911d25b-e4fd-4ace-a9b3-4daa714f3c12"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_ALL_USERS").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_ALL_USERS")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="94b4aa10-e740-4e7c-a292-8f7a5dfba0f0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_ALL_USERS" id="93aa35b8-b73e-4cf1-a950-30ba432fe32d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_ALL_USERS" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTAzMDExMzEsImV4cCI6MTYxMDM4NzUzMSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.2EbUj5oHH6vdn23W6Yxo9c1G_H44Kxvd4-wLjrOgoZk" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4d428555-fa35-4e11-b836-a049a3dfc490"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_29234</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_wsyid</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>null</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="130cfe08-c4cb-4f43-a26d-dd5e31f0100d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6495-To verify the response when negative value is given in start index" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8f3b658b-fb6a-4449-a3cf-a67242cd429f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ik1hSEN6QVJkS3ZwY0pXbC83Y3VPNU1YMGZMVTdiUGQrU2VlVm1SUXc0SDZ1aW9oY0RnZHprbXRWLzNaRzBOTktEYmw1ZVZlbHBTNHlZd0tUK3NlN2pQbHFQTDZUSE9NYjJxMEhCaHd0dWVnK3k1c2V6UTdOTTRzb0RVZ1BnTEdVSkV3R1VqN1kyd1ZycUxrSDdpR01aOW9ZTjF5Q2VwVnlyNEN3ZFVWSk54UDltZ3ZGb1RORDA4WDRvd3l6eW9mcyIsImV4cCI6MTczNDc4NzQ5NSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.Fd6GTPrEfuRGsWB8DMepzbWm29CQwOio_ayGnJIPawY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bc43a7ce-831f-4b46-8ec1-4958a555e623" disabled="true"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="697be66e-b846-4096-82e2-a144acb0ceaf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName ne &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3d02092d-7738-48ed-883e-c1d65c63893a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>-7</con:value></con:property><con:property><con:name>count</con:name><con:value>262</con:value></con:property></con:properties></con:testCase><con:testCase id="3ce63204-5aa4-46f8-8a6c-d01a1547b4c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6496-To verify the response when negative value is given in count" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="36ce9c5a-6475-4cf8-9afe-f8cc393a4b67"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

String sIndex = RandomStringUtils.randomNumeric(1);
tC.setPropertyValue("startIndex", ""+sIndex.toLowerCase())

String count = RandomStringUtils.randomNumeric(2);
tC.setPropertyValue("count", "-"+count.toLowerCase())

testRunner.runTestStepByName("GET_USER_BY_FILTER")	
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="514e1275-978b-40ef-b9af-2189f1997317"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="d69087c8-ccac-42fa-b605-c11e6f424ae0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IndaNklMdkx0WDlqNDVHZTdtalk0dnpaWklBZUZHR1NLV3MyNmQyRWdKNktBTm1qcEUwcjFXejVoZzhBc0FtZDR0Q0RkdkVzK1hPaDBTMERvSGM0QjBaaEEzVGRZWHBKS216Q2JCNkJCbU9nTTNQMkRqaGtPa2piWFZXVEpET0pPUVNyQlE3eFVBQjI2SkxvbkNXSlZ6aGlqMUpLQkE3V3FnUUdsZVpVMm1jeThlUCtqYjltaE5FK0VxWFRzT24ybyIsImV4cCI6MTczNDc4NzQ5NiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.i394wmW3zhnW0j0Ieneme3R5y0lD_2TyFyez_BIQXjE" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The items per page is not equal to null and must be zero
def itemsPerPage = jsonObject.itemsPerPage
assert itemsPerPage == 0</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b1c91951-6d68-4d95-84d7-dcf428c745c2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>8</con:value></con:property><con:property><con:name>count</con:name><con:value>-06</con:value></con:property></con:properties></con:testCase><con:testCase id="a69242d5-7df7-4f7f-9224-517d0e88e127" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6499-To verify the response when alpha numeric values are provided in start index" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="75358ab2-49de-4c97-b8dd-d5a6e9c5fbb4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

String sIndex = RandomStringUtils.randomAlphanumeric(3);
tC.setPropertyValue("startIndex", sIndex.toLowerCase())

String count = RandomStringUtils.randomNumeric(3);
tC.setPropertyValue("count", count.toLowerCase())

testRunner.runTestStepByName("GET_USER_BY_FILTER")	
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="cfcd75f9-85be-41f1-8fb7-cb8d4ddf3aeb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ee259e37-fa9d-4625-a7a8-2907a301a79a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IjlHSVhheE9JdFZWN0wyZ2hWWDAxNXVBUUN3QjJxM2EyT0ZNeFhCQS9UYktlaEFRR2VubEdxVzdRc05lSllSK3pZUjJPdGlJa1JxVi8zdDJrdGhkMzRERVVaNWhDQWEwRWxIRmNicXBVMUl2ZklzZkllbE8rQ0pjNmxmWlBBYW40eEM5Tk9CUHl1Y3pvcnVkZTZEL2w4RTdmWXRvV3RFRVVhWmlpMlBNM2JUMmJjdlM1MEg1TVY2Rk44SHlsT2pFZiIsImV4cCI6MTczNDc4NzQ5NywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.tQ2Rr6XpYgvMgRg36hz8ZSnM649egr8LXCKhgjKhATk" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
//def ActualMessage = jsonObject.detail
//def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
//def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailDataType")
//assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2c43d70b-8103-407b-b1b7-a1ea571ce8ea"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>epo</con:value></con:property><con:property><con:name>count</con:name><con:value>119</con:value></con:property></con:properties></con:testCase><con:testCase id="98ae5051-37ea-4112-8431-3e403ee9825b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6499-To verify the response when alpha numeric values are provided in count" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="30c8ae44-d665-4038-8a52-e9a0fd9dc088"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

String sIndex = RandomStringUtils.randomNumeric(1);
tC.setPropertyValue("startIndex", sIndex.toLowerCase())

String count = RandomStringUtils.randomAlphanumeric(3);
tC.setPropertyValue("count", count.toLowerCase())

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="85abac0c-89fd-4cc0-a39c-5e4e9e04053e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="6a9bac1d-220e-44ed-884a-8e109d4e7b95"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkdKL2trR051UU5rMXhFT2RGV3ZZN251TWtQSmZDSFFiNFU3eWFQcGQxK0tSU3ROM3Bva1NNditiWi9sOHF6R2I4SXZia1NYSkRrWEZwODdBTjd3NmpyYUJ5cXJUQkFIemVUZWFCTzdYUDhEVzVsQlVOc3V1TDNVc1RTUlk2YmZoVHcvYkJWWUwyTEovOW14YVVSUHVzRGVLdkg3dmszelBBUWxNdFB3KzNqMFJBSGNNZWN6UW52am9WMzRKeXB5KyIsImV4cCI6MTczNDc4NzQ5OCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.bfwLGVCnyDHCtJNzfs7NsUL7hm8hJpzgexbjYyC_dB0" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="55136dc8-40b8-4cb9-a44f-da2bf74c3cc2" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

////Verify the Response Message
//def ActualMessage = jsonObject.detail
//def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
//def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidEmailDataType")
//assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value="${#TestCase#startIndex}"/>
  <con:entry key="count" value="${#TestCase#count}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3a741cff-111f-4d0d-a30c-6fd6a361c80f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_50052</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gezds</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>startIndex</con:name><con:value>6</con:value></con:property><con:property><con:name>count</con:name><con:value>m84</con:value></con:property></con:properties></con:testCase><con:testCase id="2e3de93c-0eb5-402e-936f-7a5413f532f4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6711-To verify the response for attribute &quot;givenName&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="dd9ddfe9-caf3-4877-82e7-164fb5f8ccc5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkRzbDBLQkd5amNXQjZENEdzSUZiYkxQZmRTNFExbEN3VVRONC92RDlvdGY5UUdHTzRaWS91TG9Kdi8zbFBGK0RCTjVHNnZaR1lwbDJyWk96T2Y1enNqbmY3YjVINmRtUFNLWWVNa3JLazRqbzFwUlA0NG1IcXV1Y2o2VjV2azJiRlVJZnNYYjUzMTJ3N0duQmdaUW56SmJGVzZtUTBSNmVtS0dhVklkYzU3VT0iLCJleHAiOjE3MzQ3ODc1MDAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.6oEHHpP86dN0hMnW3gtHo6VD2QqCUsL0hm9jSv5bBBc</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="56ae852e-4371-4063-ab5a-e0cf95e8cf2f"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("givenName", "givenName_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="b0d5b090-2c67-463f-9b87-9c26384a0ac9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="07c933b3-2550-4a2b-a59c-b9b4a381cc82"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = jsonObject.Resources[0].name.givenName
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName==ActualgivenName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName eq &quot;${#TestCase#givenName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2d720e04-c647-4ae3-8d27-27ff7d13be0b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_cG9KqNpS</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_cG9KqNpS</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8f5a5a42-6d98-49e0-b603-01fe7c30e136</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>givenName_cG9KqNpS</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property></con:properties></con:testCase><con:testCase id="d24f84b7-1cd4-4eee-b809-27cc97177b7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6711-To verify the response for attribute &quot;givenName&quot; with valid operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7d240ab4-baba-4a54-a18b-0d5ba4a7a648"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Iit5bHlZNlNTK2ZCVG41ZjJDOEYwVDRkZzdHNVJ3cGh3d2tla1N6RXJGa1lETEl0cUdvUEd4NTRIVnJrU2NpSmZmZzZzVTlaKzFWczU0V1h4NENSYTNPRFF4T2FQWEd2MHdSSWxIM1MzaUFrazBwcndtWjFDL2ZJdEJyS2oraEk2cTRlRlVDd1pnM3l4bjJmUTZCTm9SMDBVVUx5QjdJeEZud2VkYTZWSjBseVprVnBtOFEyaWQxMm9DSFp6Z1Vwb1hNb3hkc0ZyaEFTaitCSW1qNmg0K3c9PSIsImV4cCI6MTczNDc4NzUwMiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.5mLoxa20kXSf6hYFh27G5QPn04ZbnGhdYJPNgs9emJg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="237f72dd-1263-4ffa-9b1d-cc57ba937fbf"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="3f101a7a-a06d-417e-9eac-70134c8d2d03"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="83694955-d3cd-439d-a872-b68089a23005"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName not present in response and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()

ActualgivenName = context.testCase.getPropertyValue("givenName")
for (int i=0;i&lt;ResourcesArrayLength;i++){
     assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName!=ActualgivenName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName ne &quot;${#TestCase#searchName}&quot;."/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1c839530-0893-489b-93e5-11b929f945b7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_kKAbfZEu</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_kKAbfZEu</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>98e17d74-42c7-4e77-a71d-499d676c897a</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>unzaj</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>fr-FR</con:value></con:property><con:property><con:name>searchName</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="aa013748-5380-46d7-a016-54a7044215a4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6711-To verify the response for attribute &quot;givenName&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b95af670-51d7-4ea3-b783-3fe48fda4057"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlVyTitNR3dXLzlXZWsyejFHQUwwb1NqcUhsbHpaU0xDR3VFT1ljRUlUWUMzUzg3RFNzNmdDSlNmRzFYSUVtMXQzSmM0YzF1SjQ0V2NqVFQ3K2liODFDNnVlZ0ZjY1ZMaldMVG1MU2dqVy9sK1plY3FOOHp4NVNqRWtVSmtNOW9JNi9ncE5tTEJST3NnNE1zUXNlQ2lrMUZZbWR3ZUhiQmRBUHl3dHAxSUtKUmdZTGtmdUdaeXlicFlmQlRrZ0RreCIsImV4cCI6MTczNDc4NzUwNCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.z7aYHG_fCuotIXJvvX1REUAgatrsawv2G84_6rdR2nY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fe5293b1-9fd9-42ce-ab11-95968fc9cfa3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("givenName", "scim_"+randomGen)
tC.setPropertyValue("givenNameContains", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="f2bfe10a-25e1-43dc-8c2a-c034603410e6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="4190ea93-0191-4683-9231-29bb16a9c489"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = context.testCase.getPropertyValue("givenNameContains")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
     assert jsonObject.Resources[i].name.givenName.contains(ActualgivenName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName co &quot;${#TestCase#givenNameContains}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="72fe4b0d-6ab9-4ad8-8f2c-944755ede26c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_uN0d8219</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_uN0d8219</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c5a78562-f59e-4f84-b597-2cbee9c8fa4a</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>scim_uN0d8219</con:value></con:property><con:property><con:name>givenNameContains</con:name><con:value>uN0d8219</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property></con:properties></con:testCase><con:testCase id="4efd8f81-b6b5-4448-b3c7-c9a1238d82f5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6711-To verify the response for attribute &quot;givenName&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="87494b28-6293-48ae-9b3c-f8eaf6fffed7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InhJMmE5OU1vcVlvZk5Xa2tQeTdEUVFDQlNFSGd2N1lsN2VnVS9mOHRjVzgrNklIT0kwclJrRk5pSTZCU3lKOU1YYzV1V2FRek5WNlhwT29rR3NTdnBsOXhEZzM3c0xLMERndmE2MVdXRmJoS0Job0J6c3liYUFGWGdJc05zVi84RVVZckJ5L2lkd0VrNElpdEdZZ1FBWmdMU09EaCtiVVFYRHFJKy9ISnVNVDlRNmdVSXdOTVBHZFJ0NUpRSEhCMyIsImV4cCI6MTczNDc4NzUwNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.-b-3YcbvnQuZfjJI6_FjWqd0c3rkIYSysX3OY6NpgC0</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0a292690-20f8-4e5d-8ae9-8948b555eaf4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("givenName", "scim_xx"+randomGen)
tC.setPropertyValue("givenNameSw", "scim_xx")
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="93ad43eb-dae2-4ef6-ba1f-51c0d23de7f5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c50a23cd-2233-4b81-8c9f-8660897b48a2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = context.testCase.getPropertyValue("givenNameSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName.contains(ActualgivenName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName sw &quot;${#TestCase#givenNameSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e2ae80ea-bbfd-4b15-bc51-acbeb1fb7312"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_brDtxcwg</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_brDtxcwg</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4e70d293-0a82-460f-8c43-0e15bb29ecd8</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>scim_xxbrDtxcwg</con:value></con:property><con:property><con:name>givenNameSw</con:name><con:value>scim_xx</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property></con:properties></con:testCase><con:testCase id="c26f3add-dcd7-40df-8cc7-c168e2e5638c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6711-To verify the response for attribute &quot;givenName&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="016c9a5d-ff4a-477b-a98b-fc58ad093dec"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Iklia0VJTXdJM0VvaVZjTkZpcUZUejZZcjI2bDZRSnRuWVJYeWlEWFFwVzBwZnZ3dnU1dTBNNHZLWW5uNGNrWUQ0Sm5yYW0ySjZYUTBTYXA4Zm11bkkzTEpOdXVSWFhZK2g0VVFZTUxFUFYycDQvSzRyYzlNbWFCV3ZrRnlQUXQ2SjN2bkl6SDdveGdLeS9nTkt6Q3A5YXE5Q1pLcTBucTU2MnVrNG9SVXh4U043V0swRUVvZGtHRzQ2T2hRejBaUiIsImV4cCI6MTczNDc4NzUwOCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.tksDmr3GEf5-8aqtHB2_lDrD881niKi6v3YitTl8mOI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="02078549-ad32-4024-8152-541b108b5448"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("givenName", "name_"+randomGen)
tC.setPropertyValue("givenNameEw", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="710c1cdc-6f8c-43c6-8102-b16df513fb79"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "${#TestCase#givenName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="b2d3e9ae-f2fe-4dfc-97b1-05b7ea0ffbbf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualgivenName = context.testCase.getPropertyValue("givenNameEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName.contains(ActualgivenName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName ew &quot;${#TestCase#givenNameEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="24e5e60e-8b41-4488-aac7-32bd2c41e6bc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_gBYM4kYk</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gBYM4kYk</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6756e6f5-0be3-459b-8f30-4f94b8dc7a3f</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>name_gBYM4kYk</con:value></con:property><con:property><con:name>givenNameEw</con:name><con:value>gBYM4kYk</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property></con:properties></con:testCase><con:testCase id="899bbf85-ca2a-4296-9a8c-7f3df2f0491d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6711-To verify the response for attribute &quot;givenName&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e2a185af-6955-410c-9a8f-598e84c35753"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InBKY2ljd0oyUHVVT2NVVjR6d2RodndSMmpOSDJxZXBaRnY5YmJZVW1PQTFBWVd6V3p0Y1VQcFFxVGdFMHZ6MkF6eld2eWVmMDFFUFBheW9KUndHTnNHOXZvSE5uVnJwc3FHSkN3STVBQThjNHZqVkJuUk9uQk9ML20xWHJSanJsUE94TWZoMG5KZUVMYVgxWXhVZmFad0czWWU4cER5blZwRnRIKzB5dHI2b2RSTTV5NXlEUElkbXlFRTNTamovMCIsImV4cCI6MTczNDc4NzUxMCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.jzZonC3PMzz4pXnIBMJBrjbekzY6-E-2y6kbHyM3XgU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="417f141c-d21e-4467-8308-11ab53bdc349"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
log.info "Random Generated Values is   " + randomGen
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("givenName", "name_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="41ffb6f5-97ca-4ef5-aadb-86e4a5f53b23"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.givenName rr &quot;${#TestCase#givenName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="33197c04-69dc-4f27-ab6b-deeb9485ea64"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_vlQo9E8i</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_vlQo9E8i</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2555</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>givenName</con:name><con:value>name_vlQo9E8i</con:value></con:property></con:properties></con:testCase><con:testCase id="8ba1273b-3d58-4ba4-83ac-cd2d4f3303c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6713-To verify the response for attribute &quot;familyName&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="59e36e64-0e81-41e3-8be0-0203e32bc46d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImcyVTJIRVBWL1ZTZWZEckc4aFhqaUlsRVRQVzE1UVUzYlpiQk4raGNnT3hwYldtakNRNGtmOTZQa0dZSFgwbThtOHI0dEtIckFNd3Y3ZFhaSUZKWTQzS0xKMFZZNTYvS01keTdrRlRhWms4WEc0d1o2Ukg0MVdhM0EzUTRUcmVnUGY2NGZZdTJ2eUhUUmZNOU5iSW1zR3lsRnJTOWluejRDV1pwWFU3eTVNQT0iLCJleHAiOjE3MzQ3ODc1MTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.O-hr1Y5CWwahgIPWdSGyPNWOTqXS3sHzNBoTAR0l-yA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4b3bee77-a70a-46c2-8694-eb0c3079f7e4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("familyName", "familyName_"+randomGen)

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1dce5753-1e18-454b-9e86-e718c0263805"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="388d3bad-258e-4b2e-836f-0ab18c228029"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = jsonObject.Resources[0].name.familyName
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.familyName==ActualfamilyName
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName eq &quot;${#TestCase#familyName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="02957637-02ee-4a8a-85aa-542fefd83797"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_gBXf7veD</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gBXf7veD</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>e6cdc6b1-e9d9-4be8-856f-aedee4ef2e59</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>familyName_gBXf7veD</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>id-ID</con:value></con:property></con:properties></con:testCase><con:testCase id="c7d1e287-e6f1-496d-8977-c9267b6cc3c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6713-To verify the response for attribute &quot;familyName&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7dc53c2d-b03d-47f1-af9a-ffdb6db04a05"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Im5WT1RxYjdjWW9YNHlDNWpnekE2SGx5NVZyRmtwdVBURDVSeE5VcEVaSHBHcG8vdGo4cDFJRFAwZCs2YkVySVE0UVplczdkVFpKYkZkem0wTEI5dzJTUTlKNVQ4RlVlUmp0SVZyUmRFRWxIdFhEQ2ZUNzRKS3hxOGxEemo5VXRabTB1RSsyRkJPUWZVOHBzczRHV3ZiaGRPMkcvVnhZTGlUWFdxTGRERVVJSTI3VXlFVXp6QTNzamJjckMvU09GSCIsImV4cCI6MTczNDc4NzUxNCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.6-hjojmsdVeMl-5i597kXBwC1v7OHZ9KMPyG6_-xFdk</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c234c72b-d04d-4270-b5d5-e27993ab55c9"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("familyName", "familyName_"+randomGen)
tC.setPropertyValue("familyNameContains", randomGen)

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="aa1664f7-d4af-408b-b799-63c0349fc2f1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ccc7b823-e649-47c6-9afe-4d2c8a8995a2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify familyName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = context.testCase.getPropertyValue("familyNameContains")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
     assert jsonObject.Resources[i].name.familyName.contains(ActualfamilyName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName co &quot;${#TestCase#familyNameContains}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6f1315f3-1b45-4943-a4b8-a7482345ebba"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ydnNIo0k</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_ydnNIo0k</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>bf2c9e3b-f6e3-432b-98be-970ab728029c</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>familyName_ydnNIo0k</con:value></con:property><con:property><con:name>familyNameContains</con:name><con:value>ydnNIo0k</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nl-NL</con:value></con:property></con:properties></con:testCase><con:testCase id="72470bf3-4427-4607-9e79-96c1edaacc25" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6713-To verify the response for attribute &quot;familyName&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="55e30ffc-5263-4b40-ac20-c99833a7e81c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InRFeCt1azlmMXpoUjJaSVJxU2VYWndFT1FlLzhYbWxzb0ROc2JJRFQzY0E0N1lBR1R3RWdPMmw4eDRKVHd6aVQ2UDBOTm5mNmpMam9PSVV3Z2M5ek8rVnliOUFUOWtKUkZQV2hvQ3NhRmdVQ2EzR28zQ2hxOXRaWVdJRytwTU53Y1Zkd1o3Rmp1TG1QbkJmVlpFWEhpZGlpeGRUaVhRWG53NTdVbDI1NDRnNkdVbTRTeS9ZMU5sMEhTVWZUbWJzRiIsImV4cCI6MTczNDc4NzUxNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.Fl6OOffpPKk6cG5NLrf6581rXp742ZCyI9EwGjJQlCY</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="5ae5b0ff-26d7-4223-9bf4-eeaaa4c189ad"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("familyName", "familyName_x"+randomGen)
tC.setPropertyValue("familyNameSw", "familyName_x")</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="81bf6fdc-fa0a-40bc-b2bd-5752c2db56ee"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="5313e175-57fb-4248-b62a-3384f3cd0130"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify familyName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = context.testCase.getPropertyValue("familyNameSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.familyName.contains(ActualfamilyName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName sw &quot;${#TestCase#familyNameSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1f101dba-abb6-4a71-b910-ea7f3d4e9c7d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_0AlX8yph</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_0AlX8yph</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>9105c2b7-801c-470d-a34c-05c51233a30a</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>familyName_x0AlX8yph</con:value></con:property><con:property><con:name>familyNameSw</con:name><con:value>familyName_x</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>en-US</con:value></con:property></con:properties></con:testCase><con:testCase id="f983e8b0-90a8-48e2-8dd8-b437bec8b5c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6713-To verify the response for attribute &quot;familyName&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bbbadad2-2329-4e86-af36-498a1f0c961c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IldJaHVQNk81bzZ2Sm12Vjd1RWU4bEJ1VUpaUGg0OUU3RHZHSDVac0hUQTVPUVpDMjFBN1g1V3A1SWJnMCt2VzBmVzRSK0I5a0lNeWF1Wk5OczVVZExIYUdkdzBaMzIxVmRhY2JScHcxSmI3cGhtNjIzZHZ5V1FFR0VIbjZuSUlTRU1mM3N5U2o3TkpjVHc0eEpDZGM4WGFncjJScmNtYXlwcW9ZY3hjc1Nyd0t4Y0pKY0l2QTdqaVdmRCs4amwzRCIsImV4cCI6MTczNDc4NzUxOSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.6hPqdUNXK6XQrrStMHl55_D1cjogdYcYItyqODcvq0Y</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e19163b1-7480-4ad8-887f-b326ab356809"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("familyName", "familyName_"+randomGen)
tC.setPropertyValue("familyNameEw", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="4fe92d0e-05b3-453b-8c02-79f83da88684"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#familyName}",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c1c4748c-3cef-47ea-a52f-bf08acc6fe5a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify familyName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualfamilyName = context.testCase.getPropertyValue("familyNameEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.familyName.contains(ActualfamilyName).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def gName = jsonObject.Resources.name[0].givenName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName ew &quot;${#TestCase#familyNameEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3fb59718-d652-4b8d-9116-8362bbf7ea25"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_yPYYGQIp</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_yPYYGQIp</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>99b13162-52fd-477a-8a95-fab21564984a</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>familyName_yPYYGQIp</con:value></con:property><con:property><con:name>familyNameEw</con:name><con:value>yPYYGQIp</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>es-ES</con:value></con:property></con:properties></con:testCase><con:testCase id="863a61d9-d12e-4d34-8d49-80b1a67385fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6713-To verify the response for attribute &quot;familyName&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8cc301fd-4f16-4f33-9cc8-1afa3edc5612"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="3b5c5f53-24d7-4871-8731-b9d96137146a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="9757f2f0-2108-47cb-be47-09ca35a51efb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ilo1S2VRMjRqWGpFaE1MbW15R3RqT3lINUJiaTd2T3cvOU5UOFA3SFhueFJOU2RBeWY3bWxnU0V4L3djYUl5aSszUDVpY1BjOU1NNnh5TlZpZUJBcnd0WmFtc3JrbTFSOCtiTjJ0cnBPUmJBK082MDF1d2JoZ2diUFlGUFVrUG1samtHakpiTFNRT2dtV2wzTTR5cENxcjJlY3RxZWlYNTlwZ1BxK3diZmRWNm56dkZtYTlYQWtWRzk1SEw2UnlPQiIsImV4cCI6MTczNDc4NzUyMSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.DP3kUvfn3fPzXz1XBI-Xt8Dv3iXRQp_l9iMcbutiA5w" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="name.familyName pk &quot;${#TestCase#familyName}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d42f9835-9084-4ec2-8cf5-cb321ad17cb7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_33532</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_xdecr</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2497</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>familyName</con:name><con:value>oykab</con:value></con:property></con:properties></con:testCase><con:testCase id="f43ba974-a21c-49e3-881c-606103230f20" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6714-To verify the response for attribute &quot;active&quot;= true, with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="7c9589a6-857e-45d1-b806-d663168591b9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkdzTHc3aWtQN0FhMUw0N3l0bE96VW5jM2tHMW9PWXA0NFgwRWVkR09LN1VmWnVINnJyVTYySnhnanhIU0FldU5aZWRXNEs5bEI0NHpUNzZCT21DOEJEV1RNRnlhN1VMeTE5U2padi9kWFFmMHZFZ1NJSHhyekJGSEhnQ0NsdGxkRjlPTDVsNktkN0NXUWdIcDZzRXJCY2ZjejBOVnV2OGZ4cGtTYWhySE1ncnFnMmNnN3BRSG1rVFFyRGEzK0ZMeCIsImV4cCI6MTczNDc4NzUyMiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.YyW0qtMI8Rew32BzaDXeREIl1iLT05_KCKDmy8q1OP4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="4fd2d3a8-c22d-4434-8e44-682f6c34a398"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": true,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="10190c49-cb17-4da5-aed7-60422aabbdfc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify active is true and id,userName,familyName &amp; givenName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].active==true
	assert jsonObject.Resources[i].meta.resourceType=="User"
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].name.givenName!=null
	
}

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="active eq true"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="22dc37e8-37d2-41ca-9314-e68bd82ba0af"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_783848</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_jywrbm</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>a57bc632-52aa-452e-a703-7aace96573da</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nb-NO</con:value></con:property></con:properties></con:testCase><con:testCase id="6ac3457b-7f9a-412d-9ebc-07325e076e11" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6714-To verify the response for attribute &quot;active&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0ba27ccb-df4e-4441-8b12-497df3b2455b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="744df05a-aa9a-4167-95e1-01b0a0586fb9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="930378df-89d8-4c51-8e6d-e43c265fbc8d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlFZNngwcUdRYVgyNnNEbzN3QVBhMDdpbFhqVVd2N1hXc3Ywa25PRHBjc0pVVjU1SHgyODVDSXlJZUhXeVNCSjlKUXMxd05XYTI2cklIVktQRjZLMm02MzJST25pRTZaSWlKODNlNlI0UFhPc3F2N1ZWUi90aWQxZCt6UVVqaXIxdmZRV0xjQlhkeXRZNzNHS1NVOFA5U0xHNk5RUWoydXRSQzFRQlhDY0poSnNGWkFhMmpYSlp5UWM0aGQxdFRuYSIsImV4cCI6MTczNDc4NzUyMywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.9BAuOlWYTqVSHwbeh8JBLPlokLhj0PG971WHGP0cfsI" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="active yu true"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="07c0c161-25c1-4eeb-9dc5-dcef9627a5de"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_67670</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gjevp</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2567</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="2497137b-9431-4581-aa47-d4354b48af97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6715-To verify the response for attribute &quot;externalId&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ca15be58-2541-44e8-aa48-8467684ae618"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImwzNDRrYkltWUpnSTBwTlJ4b2VRNWtpZXg2dERkeE9MZGNJekU4a09GQkZOSytJcSswV2o1QzM2czJHVklrRkVXOVN3V0FYZ0QvREVXSlg5cFNYSkJwTVRDZit4N0dXd0g1SHdWSzFzb2ttcXNnTjFJcEF1NW9oTmdNODJXWGR3SGVPY2dJNW9ma01YRVpBRWEvY3Q5RkQrcGc2QVcwWXhDdFlhOFVNR2xvSEowdFNuZEdrVEloOUNOTXRvREpCQyIsImV4cCI6MTczNDc4NzUyNCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.2fTdpVgJPLp2s8vPVrRcfPXxg_bpXMTdZRSregeRe6I</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="37de218a-075d-49ad-a394-febb75f0afb1"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="0bdfcff9-d66a-4173-a29a-41f2b9cfb98a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="dbad68c1-7fef-45fa-92f1-8198fcee6f11"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify externalId and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("userExtId")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].externalId==ActualExternalId
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId eq &quot;${#TestCase#userExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d6689766-8278-4ad5-8cb0-c46da67454da"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_AdTNH8fQ</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_AdTNH8fQ</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f8df02fe-44e4-4ef5-b140-0b7145d26982</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>it-IT</con:value></con:property></con:properties></con:testCase><con:testCase id="af301e25-c28e-479d-b0b6-11794c035c2f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6715-To verify the response for attribute &quot;externalId&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0ce6332a-8566-4d11-ba83-c0b188c3f6cb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InNEdlpjdGdaVDFodU5TVlgrQkhnMmRuNXhGZnJvNDV4eXBrL2NuSG5oYUdNbWxhS3NSZ3d5eWZ0aW9CUFZhSFprY3VKeldlYkVVMXYrU09ubEFURlluSUxGUmozS1RBcWNwdXR3YTNybytNeEJLSjRUOUJ5dVVUdHoyNWxLSm96QUJuYjIyNnFicTlneDU1SkJ1cm9HZGVmd1RyNzArU0pmdEFRWmRiRlE2UittVFNhdXpSdFoyVUZLclpnUTBTWSIsImV4cCI6MTczNDc4NzUyNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.S_fZ4P8QIpJwh34FdCXkgVDZiaB9b7Wtupdi9rR-DVw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="50b0f112-066b-405e-8ad6-96146b931491"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userExtIdContains", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="6f3a92bb-093d-45d4-8147-4e6355b0a856"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="9bfebc85-f606-45de-83c1-c1c78cf93fda"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("userExtIdContains")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
     assert jsonObject.Resources[i].externalId.contains(ActualExternalId).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId co &quot;${#TestCase#userExtIdContains}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="77767b15-4b6f-4f4c-8b44-7e392cfe106a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Gf3OYS78</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_Gf3OYS78</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b0ef3782-3bc5-4b42-881b-9c34237bdf70</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>userExtIdContains</con:name><con:value>Gf3OYS78</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>ja-JP</con:value></con:property></con:properties></con:testCase><con:testCase id="5db61572-23d8-41f8-9158-88d70b4cb3ea" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6715-To verify the response for attribute &quot;externalId&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c8ee4189-bf65-426f-bc76-1d6f4268f2cc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlJzdXE4OEVwdDV2ZW13aTdLTkM1VzVIUTZ0MTFKclBUVnNLV292cnVVZzhxWk9mbjlqZnpBSWRPdWw2cmlobUVjR1pLMnI4dEhLa010ZHpSZ0ZoV0g3SkxQcy9iMW8zZGN4dXZ2RGVUQk1pa2xrZW1LOERuTnZ0cWFQbCtIU0s3aG9nUGxnMjY5TVRxZVdibEwwZ3A5SWlhWGNkVTRzdm9BbzR2clVKWlpDNWFsWHAwaDBQNFpCYUhhYldmOGZHTiIsImV4cCI6MTczNDc4NzUzMSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.9l9Wgtk5Jv9znIK60n0JcB8e1HsnGS1XE-QWyW-YXDU</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="51dd3ceb-0282-4647-b39f-1c48a41ca3cd"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_x"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userExtIdSw", "extId_x")</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="83916402-b732-4588-a3eb-60a13443c526"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="52c07f05-0b1c-47e5-af2d-d5e8523d08d9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("userExtIdSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].externalId.contains(ActualExternalId).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId sw &quot;${#TestCase#userExtIdSw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2f4318c3-d313-48f2-8d09-0654578d7f19"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_xvTS4CFWS</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_vTS4CFWS</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4f2eef6b-041e-46cf-a3be-1d7d6781a9b4</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>userExtIdSw</con:name><con:value>extId_x</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property></con:properties></con:testCase><con:testCase id="fdf5e8e9-5fa7-4fe6-b1a3-0344006a9657" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6715-To verify the response for attribute &quot;externalId&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="54c942a6-93e0-4eb2-8f8d-447f752e24cb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImJESFdEais0WUlXRXNpeExXZVlFaTEwblZxeThiZ1hBQmdRbVpZQUJxVm5mUGF1Vm13T3NlZEFRVjB3TFgrTk1GTUdabjFBV1A3UnkvQjNYWGFBMnhVMUc2VjlpcDB5S0Nib3dWbWluVVFoWmhTRjFGd0tWTlNLSllUQWthbTliRXNOMW1hQ0tqd2xaZlR0cTd0encxOUdQSWkzLzZrNHdvSU52UXVxWkYyUkl1SGlCa2JadXVsL1BLOXFTUVh2RCIsImV4cCI6MTczNDc4NzUzMywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.H8a1ynmHigJEJ10r6l5fB8rtx7HqmXIN_wcr2_i9b1c</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e59728f5-ac9e-4c7d-a4ed-49f5f8fdfa09"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
tC.setPropertyValue("userExtIdEw",randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1cdcc227-40e3-42f4-9b79-0a6ca8563a48"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="2047105e-005e-49a2-b449-bec6b34f8587"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify givenName and id &amp; userName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualExternalId = context.testCase.getPropertyValue("userExtIdEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].externalId.contains(ActualExternalId).toString()
	assert jsonObject.Resources[i].meta.resourceType=="User"
}

// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId ew &quot;${#TestCase#userExtIdEw}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a4d5950a-d265-41cd-9649-3991778c9062"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_IXfxoq1w</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_IXfxoq1w</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0a7b4452-9aee-48ae-aadb-3dabcb49f181</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>userExtIdEw</con:name><con:value>IXfxoq1w</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property></con:properties></con:testCase><con:testCase id="9ccf2b48-7109-4c18-83f8-4028c9d59964" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6715-To verify the response for attribute &quot;externalId&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="383a1d0d-b8fc-4d3b-8ce7-9299c8de07e5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="ba2fdea4-bf20-47b3-a19b-bf46524b1d41"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c2ea0c3e-7018-41b1-8232-66c390c4b28b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InA5TE13dnVtcEc1dVNYc3JIa2dCNFZBT2JiSmFURVowUUtxWVc0SXJBVnhOb3ZWNm44SzlNWGtYNWVaanl1TTBLL2JvVDFoT0hXcWJteHB4UW4vRjRmaFQ5OGNHTXU1UUdwZ2h6djVzQ0VINGhtYlczK2NXanRwNFgrV2JvQUwrcnpKUHcrd20vek5pRnhLelUrQndnbWExZmdpbGFpQ0lhb1A0MjFLNHJmaURNSUFBd0tjYW9RYUFneFNoQWRuOSIsImV4cCI6MTczNDc4NzUzNiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.zrXNbt_DLgqXp1XjhnTp7itBM-WfPvbsd-3Ss_74zqE" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId op &quot;${#TestCase#userExtId}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="72db9f17-6628-47a5-be54-30848d6df0b8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_73298</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_fmnax</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2506</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="72c28532-403a-4bb1-b61b-6f511c46a8f9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6716-To verify the response for attribute &quot;emails&quot; with valid operator (eq=equal) where primary value is true" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c41b3529-c890-4fd8-a9c0-b6f3013a553b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ikk3RDJaS0h4RU1OM0ZDMHUwOENQbDZwT3ZJWmNwUFYvQ3RueHJGY1QvSjdYZy9YMTVnQnd2blhzUVh6R0RJcWVNM2k4T0JlaG5YbXFSb3dvK3VaTnRubVZKdnZpem5OTnhZelg2TzlsMHhtcXlOS1V3aVRlbjhNU1U2UzBLcGRKKzExYk9WN250bzd1K1BsZlJkT1V6MTFOQ1VERk1mWjREdkpWcklQeVF1dExFL3ZZOU9NTENLSUV4L3ZHYjZMZSIsImV4cCI6MTczNDc4NzUzNywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.OihqZza-uAs5cINsaxkgSjFJxUoatqI8cXskhCltVng</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="645c23db-0423-499b-a056-8a20841efff5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify active is true and id,userName,familyName &amp; givenName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	//assert jsonObject.Resources[i].active==true
	assert jsonObject.Resources[i].meta.resourceType=="User"
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].name.givenName!=null
	
}

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[primary eq true]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3d448dd6-39cc-45a6-8112-73b318307f41"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="8a729107-2c69-4c67-b1a2-478b64fb2628" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6716-To verify the response for attribute &quot;emails&quot; with Invalid operator for primary" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="688d70be-ba87-42a3-b1b6-1b90c5cdbf46"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="c8ab6dec-4d93-4d7f-8c1d-96919011bbd8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="04fba1bd-cd32-484d-af41-d4dae3ae4a32"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkJBcXJpYmxZV3FtLzBGSEUyYmxoOU0ybEc2UThMRWpXQVpkdWMxZ1ZELzlPN29hVVNLTDRKeHk4a0tEWU93YkNUSDRoRUJ2UzVUTTJ5bGFEN1RubmJzemhOVmdJZFJUR1BBcEZOQnd0ZzBmNVJiSkVzMUo4Y0RlQk1vTlYxcEZhblVGelhBdENmN0JoR2NjRjNzSHFOWnpYZDh4am9pdm5xWmFncWNldjVjbHoyNmh6OE90VDYxU0V6SmVGL2VCVSIsImV4cCI6MTczNDc4NzUzOCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.vcV-nevZ8ijeYYB6NqG07H6yyzVJHyFRfeX8b2TACUE" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[primary uy false]"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="16504638-d475-424d-84fc-67782ae67d07"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_60388</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_bqhoi</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2578</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="7e5f8a52-1ef7-441a-a1a9-66a9ddbe69c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6717-To verify the response for attribute &quot;emails&quot; with valid operator (sw=starts with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="85e2d41d-0097-45a9-b237-183625046f12"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InV4RnVLTzlmVVMzTkYzV04wL0hQa3RiU1g3UmFBZDNxenhGVVF6UnhqdWkvUWVvRkFYSUpUUWlVMWZWVVVsamxsRm5tdXBPNHpYYnJ6aWlxYlFKR1Q0Q2FBaG93K1dkY3RIMkZXanFETk1CaXZXdnJvQ3Mvak1UalBLRUpMN24rZE53RklTVVJEUGM1Q0NxQ0VXZ1pkeXluVEJDaHZQZ1gvaFM5OUFobnNEVXBLalFEaDZ6a09wY09MZXhQUng4KyIsImV4cCI6MTczNDc4NzUzOSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.o00izEnm1txLALpApwA4Qlys7gFz-FOUwEqMNmcKbhM</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="21114c04-c081-414a-8fef-98df7467095a"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="ecca8e52-402e-4482-b9af-67760cb218ad"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="a4e84c0a-f7ad-4af5-af0d-4372d32f16fa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify email and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualEmail = context.testCase.getPropertyValue("emailSw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].emails[0].value.contains(ActualEmail)
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[value sw &quot;${#TestCase#emailSw}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="63d3844a-5f2e-4824-b8a7-aeee5ec835eb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>emailSw</con:name><con:value>auto</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_MhbyUAB6</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_MhbyUAB6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7aa62a28-4e85-449a-a46a-34cf866d4e69</con:value></con:property></con:properties></con:testCase><con:testCase id="765d1183-a642-4570-9906-f9be9c07a6f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6717-To verify the response for attribute &quot;emails&quot; with valid operator (ew=ends with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="5841523c-e5d0-41ba-9307-c78bc8a01ca7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ik44cGVkMDc2UmxJZGY3VVY0ZWt4SE4yUGVrQzJVVnYrWEM4TGVtZ2tDcWw5VTd2YVdPSkp3S001cVErUVJ0SWJmRml1R2IvMVhOcTJlN1BaQnlLZFQ4L0dOeWRzNjN3VWJYZnhNRmtPMWE0d2tJRDU5ZVdwRzFTNEVlVGZUS1lLZ2hTVmVlM0hXc1l4R1lJZW9rSmt0dDN3SjVKMkxzUmxqU092V2RkWGE2TGZSYmEvd1JTUFUvS3c3SjB4UHZ0TiIsImV4cCI6MTczNDc4NzU0MSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.wy_AjN7ZarvVFQyz0c-cCtO9ravODA6IWRcZF_liVzI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d27e8ad1-3d83-4100-8445-7fdb23300b19"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="f1838a1a-ba17-4304-a98a-0d7f92914e99"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="21053ab0-c4d4-452c-8ea3-8cba0c834cd2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify email and id,userName,givenName,familyName should not be null
def ResourcesArrayLength = jsonObject.Resources.size()
def ActualEmail = context.testCase.getPropertyValue("emailEw")
for (int i=0;i&lt;ResourcesArrayLength;i++){
	assert jsonObject.Resources[i].id !=null
	assert jsonObject.Resources[i].userName !=null
	assert jsonObject.Resources[i].emails[0].value.contains(ActualEmail)
	assert jsonObject.Resources[i].name.givenName!=null
	assert jsonObject.Resources[i].name.familyName!=null
	assert jsonObject.Resources[i].meta.resourceType=="User"
}


// Verify First name not null
def fName = jsonObject.Resources.name[0].familyName
assert fName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[value ew &quot;${#TestCase#emailEw}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="82e8e391-9819-4d1b-a49a-959ab78c8018"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>emailEw</con:name><con:value>are.com</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_KJAnfToM</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_KJAnfToM</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>51a8fc1b-ddd5-4d46-91cd-9261ad6dacd3</con:value></con:property></con:properties></con:testCase><con:testCase id="a30f9439-45c5-4215-935c-5bfbf891d166" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6717-To verify the response for attribute &quot;emails&quot; with Invalid operator for value" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cd163aae-6c7e-4b2f-8918-9c511bab8348"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)

tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="efd898f7-2deb-4a4c-a5ad-e2a25d31e45a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="a4198129-7c3c-4f13-a7ea-ade318310055"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkZUblRReWxuR0l3bkpYdFZDajdhTG82WFFkZDZSeTBiUmVNQ2lnaFUzUkkiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAxNjg1MDM4LCJleHAiOjE3MDE2ODg2MzgsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.bqeDMBPHRjNsb8odzggqLFAG0z8zYDO5rNIvldhI30qumSQ4Coya5UGPEEzlAnveZAwXQNowcgo8cxVAqB9gTBDX4YJe6RPgckUpm4_iog-eAp_avJ-fOoe3wM6EWeUhxbTCkX-hOiFsxK5f_lbj9qWMDCWvITQOxNJMmXjXKptuEOKX60QewdVvVgYG4biAOnUXuUwmggtuB0O2wfyEsmgb2ifN0lE6EazTA1grhuz22Wjv5hTTokyhzfVe8mEaip91zdIZE4ugp8_P7XThJcqwbGtuHXdaXjXyfasTVtF59mM5QbLnYq761ymgiWq27qmauKggGcNgLmSQ6rnNtg" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="emails[value we &quot;${#TestCase#email}&quot;]"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="25584775-0193-42df-8e91-94eb9013e89e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="7a8928ba-7ccc-4032-996b-13e08ce4adeb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6718-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (eq=equal) where primary is true" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3a635656-febd-4bad-9f1c-4ac9824f6082"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ik5LWnpuakZSSFVVK0tXZWgxclNUS0VwVkg0Sjd0VVNjalkrZkNPdVJsdWlwOHBUK2NPUHJxdWMzVEh3OEpkQ214Q3h5SmhiNlRMSWFQT0YrWGtSWGNMbDlabEdzU0lNY0VvTzJ0ckZvbmdGMVhEL0FacWprTHhqMHJmMTk5TkhhTXJFeXYyTHloZDNNWjJrK1hsenRmT0ZuVitvUWpmbEo2clBIQXN3RjFIUHlUaXJNb2IxMFJwZlBHOWdqVUczdiIsImV4cCI6MTczNDc4NzU0MiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.AoVVJVbHIUj5dLLC4eMxh-HcDw9ILooUVFEoaSaOVMs</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="12838e0a-d283-49d2-ad47-6a73f7d60c3d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="ae9354b3-b76a-4d61-b71d-4f3ef5f30ba0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        },
        {
            "primary": false,
            "type": "Cell",
            "value": "9827727688"
        },
        {
            "primary": false,
            "type": "Celluler",
            "value": "8099087659"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="40fb86d7-23f5-4ad4-89a6-f5705b640f37"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)
	

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[primary eq true]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="71866d0e-e2c3-439a-894f-a5a400b6b984"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_mJRDUY2r</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_mJRDUY2r</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>a268e238-1718-4e71-ae52-10f5773bcaa7</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>sv-SE</con:value></con:property></con:properties></con:testCase><con:testCase id="935eaadb-3bc0-4c95-a629-3c7a96acf74f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6719-To verify the response for attribute &quot;Mobile&quot; with valid operator (eq=equal) for type" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="29b59265-ae9c-405b-ac9f-a0aa82f18ca4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkkvOUQxdWpyNVE1S1VoeGY3VmNjL1puN1lJbWdsMVpUM3E1NkVDQzBqREZQKzdaL1JGUkFuT1o0SVhOSHE5YjMyRW1sa0pBOFJPeEFrRXkyclcrTzFveXVSMm0rTnBuMUV2Nkc0N2UxTUIwYzVYRFY0Z011ZGtJczh6M05uTFhXY1VXUWVGUTYrUVh6RkMzYy9PR2tOYzcyeERkU3YvRTdZUHpPNDdFZTh6RE91VVdOSVUzbEtvTjZtaXQ5Qy8vZyIsImV4cCI6MTczNDc4NzU0MywiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.vRJ8LD5pbK4UIIpOBIP3ERaOqfYZ3HLlNZyRPDnukA4</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="7cab32df-1906-4981-b7db-cd73bd55f2c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[type eq mobile]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="77c67550-88a2-4f0c-ae6f-a63e7b217a8a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_16250</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_hnqfs</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>2517</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="597c2c4a-8664-43c7-8f24-78343886e20a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6719-To verify the response for attribute &quot;Mobile&quot; with Invalid operator for type" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c8513dd7-951e-4984-ba8b-e32a9829555e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="8ca7b13d-a3da-45e6-b1a3-42660a69dd90"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="132ce207-8181-49c4-b744-0f7340eff1aa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkw5UHVqQjlwRU05QUdPdGgtVjM2RVNoS19ad08zUk1fMVlBN0daZUU0VXMiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAxNjg1MDQyLCJleHAiOjE3MDE2ODg2NDIsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.fUOL0xqa7lMETX7QYvlH33O5jqVcP1VJQVWHBvgcS-ufx3-ichQjZUzUlcvcZML7An14qNUe3Ni07M7BOjvS80H9YyTMVw0k1kZcyJwlkvY8VwOYBs9parl6j3Rof3rjIWccbaG5-Jw6ODc55FrThXUly4GoXisp38UmN5-4TtHHqHA27FBWlMkghkt2T86j2OJvk4hpHBNY3EE6J6MC4rl-pcYpZ4WpgBDYBnAULCYbAABbRIGYinYIkkv5GH7wjtnN11p5PDeSJIu51RcTZZfV66ukChY_GSJbCyu_NK4ptC3BDnn2M9SpOJZBqATGowS86gzXQPSglQGtQdSFpg" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidFilterError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidFilterMessage")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="userName eq &quot;${#TestCase#userName}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4ab872d1-32a8-4f2c-ab45-8e69c58dcb15"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="aa39fa2c-cfb6-4121-9b64-21b2e8f74d19" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6720-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (ne=not equal) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ee18b7f6-1388-448d-9580-e1a1f7ef9344"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6ImphdW1wblZ2UFpHRDd0QXBRb3YrV0Zxc0d3VUhYbDNiSWs4b1JBQnRKRlpiazdCYUpEdjF0dUMzbmxzRGI4QkRGWm9MNEtCdk91QkV0Q2VTcUNzNFRhcEsrSElPSVhwSnVIem1iclp3T0E3K2NUWDZPWGk3ZU90bjNsRU1pYkpHbGZCeTd3aE0vUlljV0U4ZzRSUDJwOUVaanNWMHBoOVFsWWVZMGZYQkRiMDg1eXB1T21OZHFhdmFQcGtZK0lvQSIsImV4cCI6MTczNDc4NzU0NCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.E0WpOcn4t_uE9dcTRE7FT7WVlaYemon0hMCLyiPTXio</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="caf87406-66ec-47c8-bff6-ae98df402c1d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="9d4817f8-d570-4184-88c0-0cae0d0f3d24"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "${#TestCase#phoneNumbers}"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="96a7cbb6-8292-4de3-bc3a-a5b8888d9d27"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value ne &quot;${#TestCase#phoneNumbers}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="dbc8bb7f-dc76-4225-8c29-7646ae77d69d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Lkgy8MOH</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_Lkgy8MOH</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>05e2e539-08e7-44eb-bca7-9cba67f55bc9</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>3305062527</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>ja-JP</con:value></con:property></con:properties></con:testCase><con:testCase id="697902c2-9bc0-4da3-9e32-a7281ceb3055" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6720-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (co=contains) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="98965c2d-c169-4ef5-9dc4-1210a79e0102"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6Ii9kOEl4YVJadDFBL2JKY3FRN1BsY1EzZVhLZ2VTbjUyTjgxUHNheUhiMU1RRGJDWDVlODVCV3VHTHJYaXBiSDE4N3orY29qMDUwK0NBQXBwdjlmL0pxeGJra1licmJnZEUwOEp1ZU9lNEoyUCtJZzBjdHJ0Y2lZSkN4bEhKUHRZT1hENUVGRjJxdGRyRUZabm52ejFBRlJvZHFIZUUvM3M1THVTRDkyNUc2a201R1loUUdvUm5Zak9LWS9hcEFIZyIsImV4cCI6MTczNDc4NzU0NiwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.ScKqn08UCEgMYsjKa171VFtrO2zgZFsTP9oxEFPifAw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0f300cbe-2a8a-4df3-9594-17d869f13d33"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="a957bb8e-cef0-43b6-a714-ffb1165ccea2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "${#TestCase#phoneNumbers}"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage



// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET__USER_BY_FILTER" id="158ed381-bbf9-4fae-ae5c-1d6517b49b9f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET__USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value co &quot;${#TestCase#phoneNumberContains}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="7255b3ba-b4cb-4315-8e94-c93aba6dae6f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_qeukHtxG</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_qeukHtxG</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>f8f14680-7efa-4872-b87a-7a85a216f435</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>8009151</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>zh-CN</con:value></con:property><con:property><con:name>phoneNumberContains</con:name><con:value>915</con:value></con:property></con:properties></con:testCase><con:testCase id="df55741b-d7d1-40bb-a9d4-5901b33abba8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6720-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (sw=starts with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a4591ece-753e-4fc2-b6e5-c758856a72e2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IlZmcTlKOUpHT1AzT2cvY0JRSzdiUWUrQjZYVjBGamI1VGJhRnVCUlBZS1Y1QWM2OWdyWmpROXJnMzZ5Z1NxZ3lrTER2MlM2bG10VDZxa095NlY5YVNUVzhSMmU1SlFnQVN2dlN0VmFlUm5YdlU3NlB5UnhvNHlIUW94RitmN0dXY05CWWV3WENUdkxEY0VZaXZ3SW1zUTBSUEw1NDBNQ0dmR0lyQ2JGTVh2L2REUi9nRHg2U0hZUUZkTTVGZlhGcCIsImV4cCI6MTczNDc4NzU0OCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.HhqCBASHWGD1oeDLc6QdUHYKZazOvdflQnDfCQf5epg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2b89d3a1-7027-4282-a311-99de4bb10370"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="8d2e2b8c-592d-40d3-9dbb-669ca78e10e6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "${#TestCase#phoneNumbers}"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "80091511"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET__USER_BY_FILTER" id="89c5f58c-8dc3-464f-93c9-2d27d4379b3a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET__USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value sw &quot;800&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5a4ca684-ad31-4ba8-8fd6-d99544fe2004"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_QG6J7dOv</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_QG6J7dOv</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>777c7c14-27b4-41ba-8726-f9798f9c2365</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>80091511</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property><con:property><con:name>phoneNumberSw</con:name><con:value>800</con:value></con:property></con:properties></con:testCase><con:testCase id="23003cb0-6227-488a-ba7b-d84240cb1249" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6720-To verify the response for attribute &quot;phoneNumbers&quot; with valid operator (ew=ends with) for value" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e6c1a5ab-d903-45da-b9af-a37bf0ed6799"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6InBqRGROdU9rMnI0U29NYnh6MnF1REY0NU1DTElNa243UlZaQnRZMytObTBNK2dHOWwvWUpoMVdCQVh3VWxtSC9zZjFWbkNzK25hb093QmJWWTVNN2FsWWprc2ZWSTJCcTRLQ2hBZEw2T3FyUCttRmkzVXpqREl6cnZKQ0xSV0ljR2thajczRlRWVjhhbkZqQmhMRGFMMnpsNmdjSnBoTTZrOWkzdEF5aGtBT1FIS2tSb084ZDVmbkNDWk5zUGZXNSIsImV4cCI6MTczNDc4NzU0OSwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.AsiJzgraUSfQolpe4jcYBjo_9OR39VXyugwlFDrEExI</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="908ef267-8f4d-40a1-b6ee-b8c3280ea886"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="ea9e4b40-96aa-4c4b-9f9c-dbc521cbaedc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "${#TestCase#phoneNumbers}"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="9b721514-2964-4e46-86bc-16db867ffad6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
def uName = jsonObject.Resources.userName[0]
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value ew &quot;${#TestCase#phoneNumbersEw}&quot; and primary eq &quot;true&quot;]"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="59bed79e-2945-40d5-994a-394d439fc1f6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_UOvR6yy1</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_UOvR6yy1</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>c3ef71a9-661d-4d97-bdad-ec2b11c48ef3</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>2184025608</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>nb-NO</con:value></con:property><con:property><con:name>phoneNumbersEw</con:name><con:value>08</con:value></con:property></con:properties></con:testCase><con:testCase id="17a0602b-07e6-45aa-bb08-c4e11cdc4d16" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-6720-To verify the response for attribute &quot;phoneNumbers&quot; with Invalid operator for value" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2ddb497c-bd78-4c53-bb2e-109f3814bcc9"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.*
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}


def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)

def Query = "select * from tblDepartment "
	//def query1 = "select pkbookingid from tblbooking where bookingsource in (8,6,NULL) order by 1 desc"
	def Query1 = "select * from tblcostcode "
	def result = sql.firstRow(Query)
	def result1 = sql.firstRow(Query1)

	tC.setPropertyValue("Department", result.department.toString())
	tC.setPropertyValue("costCenter", result1.costCode.toString())

// firing a query
def  count = sql.rows("select * from tbllanguage ")
// Assign list of CurrentCulture into a variable
def list =  count.CurrentCulture
// Pick random CurrentCulture from list
Random rnd = new Random()
for (i=0; i&lt;list.size(); i++) {
   def CurrentCulture = (list[rnd.nextInt(list.size)])
   context.testCase.setPropertyValue("Language",CurrentCulture.toString())
}

tC.getTestStepByName("CREATE_USER").testRequest.setRequestHeaders(headers)
tC.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)

// SCIM Create User Data
String extId = RandomStringUtils.randomNumeric(6);
tC.setPropertyValue("userExtId", "extId_"+extId)

String uName = RandomStringUtils.randomAlphabetic(6);
tC.setPropertyValue("userName", "scim_"+uName.toLowerCase())

String phoneNo = RandomStringUtils.randomNumeric(10);
tC.setPropertyValue("phoneNumbers", ""+phoneNo)

testRunner.runTestStepByName("CREATE_USER")
testRunner.runTestStepByName("GET_USER_BY_FILTER")	
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="4e6c8e73-0a7e-4578-8a09-c2d9073a30a6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="4a6ef12c-b18f-48c6-bc47-8c36cb4a7288"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1NjEwMDMsImV4cCI6MTY4ODY0NzQwMywiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.iBUTnyxoIuIHFJW-p_O0uwe4uIBw0q_AP-5_ODzGFxWk0MK0SSt3ISx2g8ZNZOXmODo1AtNWaDTCDl-0ybLJAA" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "${#TestCase#phoneNumbers}"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="a2285166-9500-4b8c-b1da-b62b10705d72"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1NjEwMDMsImV4cCI6MTY4ODY0NzQwMywiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.iBUTnyxoIuIHFJW-p_O0uwe4uIBw0q_AP-5_ODzGFxWk0MK0SSt3ISx2g8ZNZOXmODo1AtNWaDTCDl-0ybLJAA" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null
//
//// Verify First/Last name not null
//def fName = jsonObject.Resources.name[0].givenName
//def lName = jsonObject.Resources.name[0].familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="phoneNumbers[value de &quot;${#TestCase#phoneNumbers}&quot;]"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ba2c6eb0-f97a-4596-94ca-ec171783d90f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_310900</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_msmoid</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4045</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>phoneNumbers</con:name><con:value>7560542129</con:value></con:property><con:property><con:name>Department</con:name><con:value>IT</con:value></con:property><con:property><con:name>costCenter</con:name><con:value>112233</con:value></con:property><con:property><con:name>Language</con:name><con:value>pt-BR</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="75132bf1-8686-4adc-bc2a-b92f15663a91" name="GetSCIMUser-LogicalOperators TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="46434443-a0f0-4b66-9a39-06f942268ee2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7026-To verify that attributes will support all filters with logical operator (AND)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e00d9f69-ceb1-41ea-9eb4-a0695e2d1d76"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjYwS2htVFRZVVJhQXI0bU13cURhXzFEOTNaZTRYazlleUtpZVpBNzdQeFkiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDgyNDEyLCJleHAiOjE3MDMwODYwMTIsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.ogM-_x0y1ngpnpnygmSPMfQwiq1PE570sCh8DL2HNwaCveTp9qVCKqS9OKioFmIlmtGY0HjT5p6xZADcPID1uYj3_-gBpnS9ck2sU08b4uOivj8w5LEZX3bpogZhjnUlex5U2T5O30-nicNXnyM3V5KCMysgNmHJKvlxOFOmy430BTXPt_WaNty42eJJOzxVuNTImK79maHARiECrt1egtNXfk1qQdKASmFlAhk1xMfXhfm3KfNKzM45Th6vPEixVCaD3VHf9GlE6rTbi8wx3E-hIsYTueAlWQQIxCRqBu6Rk7fYasyPU8ixv_FrFQLxD7C4FDSOi3MN8FZ3smr39Q</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bd72ff48-9993-4010-990a-ca8839d1fb0d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="7a74c389-94fe-47c6-8028-0482b80ca51a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="cb1083a2-b418-4765-bc4a-8bb94cf4e26e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the userName for User
def ActualuserName = jsonObject.Resources[0].userName
def ExpecteduserName = context.testCase.getPropertyValue("userName")
assert ActualuserName == ExpecteduserName

//Verify the lastName for User
def ActuallastName = jsonObject.Resources[0].lastName
def ExpectedfamilyName = context.testCase.getPropertyValue("familyName")
assert ActuallastName == ExpectedfamilyName

//Verify the firstName for User
def ActualfirstName = jsonObject.Resources[0].firstName
def ExpectedgivenName = context.testCase.getPropertyValue("givenName")
assert ActualfirstName == ExpectedgivenName

//Verify the email for User
def Actualemail = jsonObject.Resources[0].emails[0].value
def Expectedemail = context.testCase.getPropertyValue("email")
assert Actualemail == Expectedemail

////Verify the phonenumber(mobile) for User
//def ActualphoneNumber = jsonObject.Resources.phoneNumbers[0].value[0]
////log.info ActualphoneNumber
//def ExpectedphoneNumber = context.testCase.getPropertyValue("mobile")
//assert ActualphoneNumber == ExpectedphoneNumber
//
////Verify the phonenumber(telephone) for User
//def ActualphoneNumbers = jsonObject.Resources.phoneNumbers[0].value[1]
//log.info ActualphoneNumbers
//def ExpectedphoneNumbers = context.testCase.getPropertyValue("telephone")
//assert ActualphoneNumbers == ExpectedphoneNumbers

//Verify the externalId for User
//def ActualexternalId = jsonObject.Resources[0].externalId
//def ExpectedexternalId = context.testCase.getPropertyValue("userExtId")
//assert ActualexternalId == ExpectedexternalId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null

// Verify First/Last name not null
def fName = jsonObject.Resources.name[0].givenName
def lName = jsonObject.Resources.name[0].familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

////Verify The Internal ID is not equal to null
//def ActualId = jsonObject.Resources.id[0]
//assert ActualId != null
//
//String input = jsonObject.phoneNumbers[0].value;
//String number = input.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number
//
//String input1 = jsonObject.phoneNumbers[1].value;
//String number1 = input1.replaceFirst("(\\d{3})(\\d{3})(\\d+)","\$1-\$2-\$3");
//log.info number1


//log.info input
//log.info input1

//def ExpectedPhonNumber = jsonObject.phoneNumbers[0].value
//assert number == ExpectedPhonNumber
//
//
//def ExpectedPhonNumber1 = jsonObject.phoneNumbers[1].value
//assert number1 == ExpectedPhonNumber1</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (name.givenName eq &quot;${#TestCase#firstName}&quot;) and (name.familyName eq &quot;${#TestCase#lastName}&quot;) and (active eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="c2791348-95eb-4dd6-9032-07f859538abf"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>userName</con:name><con:value>scim_Ga4mHVHk</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Ga4mHVHk</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7bab517b-eb78-40ea-97d4-857942e9febf</con:value></con:property></con:properties></con:testCase><con:testCase id="bc4151eb-a9d1-4063-892e-f78d664e6251" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7026-To verify that attributes will support all filters with logical operator (OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4f82a682-c9dd-4675-b7e5-21098a56efde"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULnhFeDJ4cDlsci1IdlBjVXItZnRUN0ZldGFJZDRxS0hmWE44TTREdHd0MXciLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDgzMTM4LCJleHAiOjE3MDMwODY3MzgsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.mPk0Qi-mjvFb6JR_YaJeCQByXcQrGjVZAvo6n5gYwtmbFRlp8ct1ZVtDn3OyPXXkwxFUThBwHcxqu3yds-Kf51aSd2r9BJe8FlDmw_LmGckNtG9f0X2VOI_9u7QmuEWhKDJTsF6Cl8JiIOX7df4zbfAXYQ__8GKTBa8bbb9X4kJA0uOwZ5uqPr_hkkoSjK8ScfnweO7VhcAdbG97IzkkdtPiJ8T3eituv_0K1oDtVO_kTUpp6iBQ5XC_F_ayUyaGPyblSe-gK7CHJu6CG_B6nTW4f9lCWRYq4K2fS2kgZiDANvIfm7ER1Qm5dnCoJENO-3gsHaY2W49qQcqKptv0xA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9256e502-fe28-49af-a1ff-16b05873ba01"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="7d4594c3-6f16-4f82-b88f-a497600c80c1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="629832d9-8fdb-4f9c-b667-b03ec2d9a5c2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>()
List<String> list1 = new ArrayList<String>()
List<String> list2 = new ArrayList<String>()
List<String> list3 = new ArrayList<String>()
List<String> list4 = new ArrayList<String>()
List<String> list5 = new ArrayList<String>()
List<String> list6 = new ArrayList<String>()
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;)  or (active eq &quot;true&quot;) or (phoneNumbers.value eq &quot;${#TestCase#telephone}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a2ea774b-076e-47e1-837b-0c157d688c87"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_Wp9wfUmC</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_Wp9wfUmC</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3114e5f1-82d5-4262-96bd-914f6d5c7b61</con:value></con:property></con:properties></con:testCase><con:testCase id="35ab04cb-7618-4a63-8ef7-d43c982c6ef6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7027-To verify that logical operators (AND,OR) are case-insensitive" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="22f6756f-a4a3-4e5b-8ad1-9162bf2e08c7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmo1N3dvS1NMdm1OcExON3RSV3N1M0VOVV80M2Nra0k2UUVILVZ0dDV5Q3MiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDgzMzIxLCJleHAiOjE3MDMwODY5MjEsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.j-Cyczkvgke_Rv1SbTKIDkn-x-vPY1ZPuBON8n2hH0t3q9g24Irvvo2cEW_zeh5bvQGzBrrBt3MmcfCs3zQtfkOVqFVa6Hprmy3nAD4hC3UKe_GeuZMXi8yyw9nqOieKEP7wubNfWF4tDR3rnfpdh2HVSwhOI01dXim2_xE4fh-v7cdN7NavBq4RfFhc4moocJ28dNGITgiieRZR3DJog_Kn4SV2h47BghdoAv0rF6I4WR-ggnenHvvmAE6mPEHfuugtrr0HhqTv-Eyw5d6G5ru4ytfF2K28EYXrXCQO6MZPedaM15MXUKizccFHMzJV4ZqE9L1I3Ywh6h_f051tvA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a16f6b6d-77c5-4861-a957-15ad12e9d85e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="6132cfed-abfd-4a99-99e8-f173a75d8edd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="ae41d1e6-61d1-49cc-8c7f-41450501eb81"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>()
List<String> list1 = new ArrayList<String>()
List<String> list2 = new ArrayList<String>()
List<String> list3 = new ArrayList<String>()
List<String> list4 = new ArrayList<String>()
List<String> list5 = new ArrayList<String>()
List<String> list6 = new ArrayList<String>()
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) Or (name.givenName eq &quot;${#TestCase#firstName}&quot;) And (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;true&quot;) AND (emails.value eq &quot;${#TestCase#email}&quot;) and (emails.primary eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b9362c0f-64ce-4284-952d-318cb76f9406"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_tHkIZ7fu</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_tHkIZ7fu</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>5f67597c-23b4-495a-98dc-5aa1c2b14421</con:value></con:property></con:properties></con:testCase><con:testCase id="159137b0-8a11-4f3e-ac05-56c95147c13f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7028-To verify the response when no space is given after logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9265a6b6-c6de-4417-bc77-8f5ef8d7ddfd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjhEYVVxT05WcFF2STNUWEJQYlgyX2d5Uk5Mb1lJNUhSTTAzTjM2UUF1WGciLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDgzNTI5LCJleHAiOjE3MDMwODcxMjksImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.aOJRi9dXj-rQIUomSu1g1EAzWY4AvjYN_KeftiBYHb4UIGrTo1oXb-wlkD7hmg778cGlBqk4dW7w0bhJit3o_tj2onz6nxyCRYEqkuSKLFwm7uR0yiMBZkiNQ6dSudbJ2WhAqVVqsVH04v-g3ucmRomzXOGlmrU6EUsEMVGXyFQxZ6qXzvs5NOk89MWAzuq0N-ED6TF-VIvnv2zsAMEb3iJQvoCqJ-vE1kZzT0TrM9KXp5z8fm4LPZ51RP824DAh6NFKVUyP88on7-H1nUsBc25ABXh_dM8rxok4r5CEPp1MV_RguxEpuYcSE7Tr_iQWi_mGAeaTc1Gx1zYoVOw1iA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="e5f0c49f-5d20-475c-a1b3-272f22b072f2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) or(name.givenName eq &quot;${#TestCase#firstName}&quot;) and(name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;true&quot;) and(emails.value eq &quot;${#TestCase#email}&quot;) and (emails.primary eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="26529f04-1826-438e-b310-932894a0e251"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_44182</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="1cdfd821-17b1-4072-a3c4-bbcf45eeedec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7029-To verify that &quot;userName&quot; and &quot;givenName&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="90982bc2-de23-4223-a0b5-87827d28c5e0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULnY3QWFTYW4xdTBVQXhMVDFZRXlQSkprbUF2TEdsQ1dPd2FicWJ3cWZkQm8iLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDgzODkxLCJleHAiOjE3MDMwODc0OTEsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.lMKZ5h2aRSRMbS-6IQ9R936habfQMLCH9N6s2uWw7TKjO7sfdSkz8U-7dk0Aaz4HqdNnac6hvkmlpImjgZpYAPMT8BLNWwdf6rNLor0f3Ee7o4srQqSj_DIKfNJRSz4m4WIrAvqdIVpXv5-Ei8h6x01QapQns-4IojFC-1VRk-1BXeGQd7wwxe-_fOuGnzUKz9GPOuCNuzXYDVClbd9X6YYKQiX69eczUKVaKaB9dpivINKk4RftT_QkpWowZOGrj-U5dLAnXQx138XxkTXepv2VPSj-XtWXzTTD-ULQt5TnNh8BO35QZXQSi92cUd2QDVaZ_yZTgYQf-C6S2491AA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="160d3226-4997-4fa8-82ae-4b8600ff10e0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="988e4c63-e0ac-4f35-820c-e1be41f6360e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="7a40fb7b-83a0-4283-87c3-1fb17c3801c5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="67afb044-90cc-4658-bcd1-f226f5061298"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_nSvaZ5g2</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_nSvaZ5g2</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6d717fae-414b-4ee1-8926-4971033f95b0</con:value></con:property></con:properties></con:testCase><con:testCase id="79aeba8d-fac3-494c-aebb-ba0ddbbeb7d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7030-To verify that &quot;userName&quot; and &quot;familyName&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="fbfe0966-b19a-48fe-bb60-251a0ae24300"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULlB6ZE0tSko2b3dSbmxsZXJmdzh6UmUyakVfM2M2N3EwSHNtYkdLZURUTDAiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDg0NDEzLCJleHAiOjE3MDMwODgwMTMsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.cH50hHvlJQjy3UN5BKtlm3eoc0A4tIy6d2pgaPCxyrQhTTbl5O_AJj72v7esfBda5wtYwGaBAUr5XuofmJWnalWD_mfN1fANx2UXUbmF7KOKq-1bb2DO7eXz6hAkRagNUk_lZhA7sawhy9QCBMniOjmFLH-QNkfx3FaWqRANzmmhVum1_8Ca39Ryv9XiYCsbtYPMl93DnZz7AbIYT-hxmjntm3XY-GxOqMdL9eDs_trtlBBGjlIpK1MWeIM5s8lKkHSo2-IgTc-Er7bRM-4vbz4dk4n16OXsRS69NYgobudd0Ui4bh67BbxJDXZUKy-PmCoLMHWSFRhsxfOnzOIYzg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a03bbdc1-4f76-47be-af89-ad3e2fa5983d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="62fec379-9f79-42fe-b63d-130a432884d1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="dd360ae1-6eb3-4534-a640-32fd22566d78"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (name.familyName eq &quot;${#TestCase#lastName}&quot;) "/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ba6deca0-f1c1-48fb-bb77-7ec43fde3430"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_AHoecDYz</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_AHoecDYz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>098c36da-53de-4866-a9ff-046fe9a73ecb</con:value></con:property></con:properties></con:testCase><con:testCase id="9a841a4f-6265-4bde-a314-35466bd3b12b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7031-To verify that &quot;userName&quot; and &quot;active&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0baa28d0-45d1-4072-aa29-6f91522d3607"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmpBVVlpamhjTkxjMTJHcWlaZDVRd0ZyS2xGUW1rSEF4aUxUUlJNRWNmNDgiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDg0NjMwLCJleHAiOjE3MDMwODgyMzAsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.fnsQFhfiYZbzfPttb8Y8s0TLM8_dImcaOVimi_u9SnNdQ8d7xX9mU2Kqo6uVArcw3Ad3x24Kk7htAIqekUUtmz1WDfByR9pfbs8IXXldZ7LvITvx_EzO6A-Yziq8tj3Jq0xN5Txc0RNS-hi5zEC0bFi7iTOTIrhJAV53tVR2e2NjiVh5JwYC3-1t9DctI_FVosNDKA7RLQGp5h7-jVpDM4u7wqKHt3XEPub1X_zJ-yrHoXmPdNosW1-YiDafPdzoROcBLfCVCvN0TJ5e82K-xqD6VZiatdW4_NLcXayQDvXe4W30dFy04u4YBRsbDHXHmglPiNm-NBunri-lpUrV0A</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7d61bbd5-d3fb-49c6-8687-647664503692"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="ee98287f-8611-4057-a3fe-cf4b69b54e59"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="4a0051e7-854f-4a9d-9305-a1d4e579ea52"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (active eq &quot;true&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cd4af15f-3059-43b3-b10e-4ea17c4b652c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_yomK3s0z</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_yomK3s0z</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7da5f508-4772-4622-b5f3-ff676dbf1cc0</con:value></con:property></con:properties></con:testCase><con:testCase id="69524197-9062-4c6d-914c-a538ad1823d6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7032-To verify that &quot;userName&quot; and &quot;externalId&quot; will support all filters with logical operators (AND,OR)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="83da8efc-ee3a-4e7e-9593-88d72db1998d"><con:settings/><con:config><script>//For Database connection
import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')

def tc= testRunner.testCase
def tP = tc.testSuite.project
def headers = new StringToStringMap()

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//Connection String
testRunner.runTestStepByName("GENERATE_TOKEN")

 def TOKEN_ID = tc.testSuite.project.getPropertyValue("ACCESS_TOKEN")
 headers.put("Authorization", "Bearer "+TOKEN_ID)
 tc.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)
def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}
	def Query = "select * from tbluser u inner join integrations.tblexternalentitymapping e on u.pkUserID=e.EnterpriseID and e.ExternalSystem='SCIM APP' "
	def result = sql.firstRow(Query)
	tc.setPropertyValue("username", result.userName.toString())
	tc.setPropertyValue("firstName", result.firstName.toString())
	tc.setPropertyValue("lastName", result.lastName.toString())
	tc.setPropertyValue("email", result.email.toString())
	tc.setPropertyValue("telephone", result.telephone.toString())
     tc.setPropertyValue("mobile", result.mobile.toString())

	def accountActive = result.accountActive
     def tcActive =accountActive.asBoolean() 
	tc.setPropertyValue("accountActive", tcActive.toString())
	
testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="e019290c-c929-4778-89ac-8de912b1f3b6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="bb74951a-1ade-444f-b6a9-f860a8bb0a61"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTQ5NjcyNzAsImV4cCI6MTYxNTA1MzY3MCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.B0StVJHkWctY2z7IOO5XsFxDuElzTgILA15-oy9xxLw" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) and (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;true&quot;) and (phoneNumbers.value eq &quot;${#TestCase#telephone}&quot;) and (phoneNumbers.primary eq &quot;true&quot;) and (emails.value eq &quot;${#TestCase#email}&quot;) and (emails.primary eq &quot;true&quot;)"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="099084b9-59d4-468b-9aae-3258c1e3df0b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>SCIM_1</con:value></con:property><con:property><con:name>firstName</con:name><con:value>mahesh</con:value></con:property><con:property><con:name>lastName</con:name><con:value>vanam</con:value></con:property><con:property><con:name>email</con:name><con:value>scim@condeco.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value/></con:property><con:property><con:name>mobile</con:name><con:value>9011223232</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="f16b6cec-ff2d-48ef-81ba-3b5a5f9e1979" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7034-To verify that &quot;userName&quot; and &quot;phoneNumbers&quot; will support all filters with logical operators (AND,OR)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="806a2437-95da-4722-9db8-c5271e435470"><con:settings/><con:config><script>//For Database connection
import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')

def tc= testRunner.testCase
def tP = tc.testSuite.project
def headers = new StringToStringMap()

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//Connection String
//def tC = testRunner.testCase

testRunner.runTestStepByName("GENERATE_TOKEN")

 def TOKEN_ID = tc.testSuite.project.getPropertyValue("ACCESS_TOKEN")
 headers.put("Authorization", "Bearer "+TOKEN_ID)
 tc.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)
def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}
	def Query = "select  top 1 * from tbluser where Telephone not in ('') and Mobile not in ('') order by 1 desc"
	def result = sql.firstRow(Query)
	tc.setPropertyValue("username", result.userName.toString())
	tc.setPropertyValue("firstName", result.firstName.toString())
	tc.setPropertyValue("lastName", result.lastName.toString())
	tc.setPropertyValue("email", result.email.toString())
	tc.setPropertyValue("telephone", result.telephone.toString())
     tc.setPropertyValue("mobile", result.mobile.toString())

	def accountActive = result.accountActive
     def tcActive =accountActive.asBoolean() 
	tc.setPropertyValue("accountActive", tcActive.toString())

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="babe1bfb-22a2-48e0-bf80-a5c735600aac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="bd5f8324-804d-4b52-93c4-388fa0fa666b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1Njc4OTMsImV4cCI6MTY4ODY1NDI5MywiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.O6nnulT_MczYMbB1jttkfwZG-9wDJQguHVqrIKzVX0YyE1Axm3gAuMaS9X85le5SKcpEU1glSVgOOCNB0WTkUQ" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (phoneNumbers.primary eq &quot;true&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;true&quot;) or (phoneNumbers.value eq &quot;${#TestCase#telephone}&quot;)  or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (emails.value eq &quot;${#TestCase#email}&quot;) "/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="34e0e62f-f5ec-452f-9f0b-effb28bd4a22"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="2c3df8f5-c226-4007-845a-14d17646487d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7035-To verify that &quot;userName&quot; and &quot;mobile&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="70c46f36-19f6-46ac-8c06-9c5cb934acbb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULm05aFpxT0hmODlHREE5WE9RVExpZzhvMDZsMGRKVF85U2RDdmhJMDBGZEkiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM1OTU0LCJleHAiOjE3MDMxMzk1NTQsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.GOsciFY3mxeZNuI_JeH7tl_SZUYas42cTZL24CPYI4mL3kFLvAHwj7tOQCIVFmOUMVo-N49HNJntzQz9u0VIE0_yJlxm4PDM8VijMABTqBQE_Gyt1kI8WhDCnUQahRG_bRMRnXW1olEridiQUHkkG2uoqYxCyJ_NQnN-fEN7ib54PwTJrY8s8AJxrAWS7cEqsONeDt2obROogWug6TYtMFSL_0ADaRMuLh9Ec25zvBSGwGldOlIpJnA6OR4uIo4wjvsVvB48jp8qSXqk4KqugeqdP_3004ZenG1DW28dtBZTAxjdf3Tj9VtfbDp2tI9yr5_m8D3cUe9je9sPtcyK9Q</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="894e1600-2293-496b-8d79-c9b7aec3d596"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="02cdcf09-4fa5-4d0f-844a-181af30e4e9d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c447e1c7-e24c-48fc-997c-29a1cad8ed85"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value=" (userName eq &quot;${#TestCase#userName}&quot;) and (phoneNumbers.type eq &quot;mobile&quot;)  or (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (active eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="21861a85-64c7-488d-8128-4b5c5719db60"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_gLjMfLHG</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_gLjMfLHG</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>52bc9b99-1197-4756-9504-1e6d15e6abd4</con:value></con:property></con:properties></con:testCase><con:testCase id="0749c76e-4142-46c8-a589-1171f697316a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7040-To verify that &quot;userName&quot; and &quot;emails&quot; will support all filters with logical operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="de849507-e75c-453b-9c5c-18567b120c1a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkEwZE5KWDU4a2VoZjFRbmN4d0FveVc5X2RNbEFKdkRmVjJTblNnX3VubG8iLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM2Njc1LCJleHAiOjE3MDMxNDAyNzUsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.kxvlxT79x8vuttL_Z8HrQ2QGdHxz6N3SDLdgrvDy2bjPlt2PFoskJJ0NXlop0umpwi8SoF0lew100DEG4PaybXpQRxod-RdFAdTt1Za2lseoD40Csl5guC2tPpIKObvvJKrOmlR5AxEnDep9FRkWJ8vX-eqJ632NX1h-N0D-AJnXSNqw4Mf8KbBVqvEHWOFg3Ny-M-KlH6HSab_TxTwuGtneMUt_intrzqGNnfqZ2SlXsOL-b3zMxsPk8zRC_6PK1HxoIgwlHYqSNRtcLE1jjOH7yEdOs80Yn6XUiuyIJgwTL1D1NWXpmZCBbU70vSsE22LLTpe_v3fd44DzGSCDrA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="2d1aace3-43bf-4297-84ae-18f59368689b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="bb69f359-23d2-4897-85be-9bea0919d8f3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="be77d2ba-07ac-4fb8-85b5-04a43052742a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) and (emails.value eq &quot;${#TestCase#email}&quot;)  or (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (active eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="08f18de8-208c-47cf-b194-5f9958956a04"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_FnvSy6Na</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_FnvSy6Na</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>065c9a32-8a95-4189-a0be-012f211ffa09</con:value></con:property></con:properties></con:testCase><con:testCase id="9995d20f-4715-44ba-b2a7-69123cc61f31" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7084-To verify response when inverted comma &quot; is not given after first filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d6052086-6b6b-40b5-bb6d-1e6eace4f831"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkJlMm9HcWtlVjBESnhyU0ZaT3JWVUlaVHBIaEk2Q3Q2UGJpUkl0UjZlX0EiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM2OTY0LCJleHAiOjE3MDMxNDA1NjQsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.JzO0gx-0gPf3MpPcICM7k3CyfZ9GreTlOI4kEHnV1RLqurlXIXxaWmfXPFwJasYiyX9nTtlO97IRNnpjk4amwskpTryIjX7QbuuAyx-DBMQUrFNp7CQEc38b4nGxFnRmDAb5fJNCyEgB9BcEc5KljLUiDT8Pw5qsZvd-cH9qEktPS5dJmNJp7WcibpzMz3YsbP0H0SIRpYL8Ns2sQCpcfGyPsW80iYylJIiKsDLK0lb-48jH9MPnmVtV9wwA-P_MNi2eyIq10d2sevr9GF7U6LhZ9LWGt6N-dcN6ErXkpjmTAIj9mERV62CsSuHz_w0y5h6gWP9yfwrcOs9AFX0qyA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="5bf425ab-c5ee-41cc-b543-2705d41ffd18"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="d43ce3da-7045-4ef7-a663-548d0fb47707"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkZKZ2hULUxEcXBKOUhmTXlwdk5ySHAyajhKWXlZYUUxM3IxMTl1bTVMYVkiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM2OTE4LCJleHAiOjE3MDMxNDA1MTgsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.WJv5fFbm5tsgC8T_7ZnhN_c02YXp8Lgz268IZSP4Kgf9DfKncps9pT-IpBZ3s_XAE-_dGHgYmQoerpnmWHyPpHuow7fU7V9yEs0pDI7N4e_lebtD-40bervbQUPlpFoiUfjurVywnTKWg5N3iivpGTnXh_ZZC1TLat7vELnhzPUgubdFPoquv4YVwPjSLMPXkF6AauBiBYyP6L-DnYuDyio4c4Xr1Fip4UBIPSY1tQFIyQcOYYSgPVBZrDL8425Fb5Dm16aI-dYSLMI0p6M3y5Wf-O3_u1_xZGwyt78tZBjLPyfCPNmTfFJ04jy_BBRTtwjnsS421ir4aEEj3POxhg" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) and (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (active eq &quot;true&quot;) and (emails.value eq &quot;${#TestCase#email}&quot;) and (emails.primary eq &quot;true&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="65074276-f0b2-499f-86ec-fc11afa577aa"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_cBrWF0tK</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_cBrWF0tK</con:value></con:property></con:properties></con:testCase><con:testCase id="33359010-1e5d-440a-9f26-3506da0f5dbd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7089-To verify the response when invalid logic operators are given" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="05b3fab1-2b89-4cb4-9e04-004ce2be2923"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULllxQzNMT3Z1dkJWS0dfNDV0VFkteHdrN3BidzdFMzRTamJmVTUzNjBBYTQiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM3NjcxLCJleHAiOjE3MDMxNDEyNzEsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.nxmf9cGEKjU7kyRORh8RC2LcB68AWy0LQE8H2WYSS6B1XM5boe6BJxWwLSvKs7S8V40yNZ824RSgl93xDYR6HkerPVdGilybHodP04SUrYApeb-wIqkfNcz2n_P1y6V5q_m3vpR-6iewiit6xU0vv75Ik2_zg6S6p0Y-N6rS27H98s3k70bXLyHhRXiCYEOTkRd9rYxZlNjHOc3J_Rb7B6LEPBgQURVIKX1aIK2aymn6_i2GQrwkSZT7HfrvsERsRTOdM6PuYX_Zj671d72pOxfYjYQCvkYL1iGpPTRNWFFv-dqRuKsXrmcW-0eQAqmpXH-vjDHnClkIKdA4W-J5cw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="2c31ea75-8f57-4a1c-b062-868feea3dd87"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null
//
//// Verify First/Last name not null
//def fName = jsonObject.Resources.name[0].givenName
//def lName = jsonObject.Resources.name[0].familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(userName eq &quot;${#TestCase#userName}&quot;) tyj (name.givenName eq &quot;${#TestCase#firstName}&quot;) rty (name.familyName eq &quot;${#TestCase#lastName}&quot;)"/>
  <con:entry key="Authorization" value=" Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="19828b0b-7bed-4c02-90e0-31f9dfd96d11"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property></con:properties></con:testCase><con:testCase id="445d5891-6acd-444a-b2bb-11c5e20609c5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8302- To verify response for attribute &quot;id&quot; with eq operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="086ce2a3-8933-4a32-b038-78bfd60e94b4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULnlhMUVqNm5aNkdlVnhuVlRrVTZOTG1VM3pMMkM1R0FHNUp4ZTdSYWVaRHMiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM4ODIzLCJleHAiOjE3MDMxNDI0MjMsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.Yq6nuWdQFyIfBACaNQTpcY3kRveV1_Q20y1U6buV1wHvZYRTN4uw-kLZIZ6yK-hR_sGSszra7LT_R0fJUN_eaIcXnl77WfpFHXu9fGuROE-Fk9vVhl1s4Tce7nuqxlKEen5ieXqCe3feyvDJlOyUmMqasFv-hgjD3eLJnmDBQCsrpNgLZ2hCZruZNSy9tvP9MpyAMzLV1mtSa0WJCeGSmxKKaAenSh1NCoi-hb86pq88eo_Ab_K4ruQVddqSOK80eIxnWrI8LFPtZCQ83Z3btfZNLVl4hnpYWZODaGt6cVWMMNwr0uj5UrWZFFHOG3F6dQrVCWXBtAMnWw6C4_T5oQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d95f3a83-1232-41a0-8dc7-6875f755b585"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="0e5d0ad7-1294-45eb-9653-fc8c57131f34"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="42a5c600-b94c-4be5-ac4a-4f8a07aee677"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e0d8946e-65b1-490e-bc28-2828f81912a3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_KMgRXozd</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_KMgRXozd</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>267f8d2c-442a-40cd-b0e8-146f296df294</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>267f8d2c-442a-40cd-b0e8-146f296df294</con:value></con:property></con:properties></con:testCase><con:testCase id="904e723d-7574-4a5e-b58c-670c8a4c2ceb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8304- To verify response for attribute &quot;id&quot; with operators (ne)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="35f517df-3a7a-4fdb-84fc-cc2f0633fb9d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkNFMEdtUlhHc2dCaEl4cFUyc3dKMTNHbEZTb010TEdpaEp1RkdWbkpfSWsiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM5MTUwLCJleHAiOjE3MDMxNDI3NTAsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.guMr4RHTsBRt9aS7FCQNtIiNuczVBrveC-0Uq48OxcrKiadsnBYFtmwFwrVVZCE5kDOpCblErB-FsDUNQh2Pf80GdFrqKZk9CgcA41NuSqNnxUiFf9dET914zeKz4GHECHXFbpQtiSQMx7GpO4sXlgyMP1yQKfkdHIoRPn6Zf0jZPTmyckiJa5e1Og9Bw666O1aC6-1C2kM-jeWhY8GIfOnnug2AY0w1spkDZLzC8_ixm5dk4zL0WeY05-QcULak0UmaH90yuGCNdrqSMVsWnDax63wb_4ExWWElSBjmrauzen82jYQxBynIxjHg8s3DirU1tsvvYrKqIO6sQnH7Kg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="82fefbe6-23ee-4a4a-91b4-1a93b23307e7"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="e30e9121-c9d0-4636-b309-91aa4e5d507e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="6f6e190b-2064-471d-b2bc-f38f950bfa8b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a50ae6bc-ef91-4169-a3a6-77f99e89af4f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id ne &quot;${#TestCase#id}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b6508213-c07a-4fb8-bf20-36acd6ec9f55"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_EpGUeNdu</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>id</con:name><con:value>7ffb795b-743b-4de7-957e-a783fe4528d2</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_EpGUeNdu</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>7ffb795b-743b-4de7-957e-a783fe4528d2</con:value></con:property></con:properties></con:testCase><con:testCase id="e1e64822-9603-4d85-82d4-25277f65676c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8305- To verify response for &quot;id&quot; &amp; &quot;userName&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b45bd868-e855-4a5a-8780-0f8404a42806"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmkwRDVvV2Q3Vkc4VmxHMTMyajZJbVRnWnNDXzRLUlF5VDZBV05jQU0yVkkiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM5Mzg4LCJleHAiOjE3MDMxNDI5ODgsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.krdEVPFpQOIkcldL2cFQwzZZCGzq8pLY1DdW-CQ9Ix926akjRWulJ3Ub52l7k7AXCUxwxwETWRHsiFUGBLNGvyO7XyxW0as8UR4w0YpUcEAGeTbJt0p3FDTqtn-rEBkous4nrQqqnez7pf_5Dvn_9QGMfW3zQYvfqLxr-2ksLy4qT5Ugm5iHZVFVu4Qpj5TBMTuSaBFA6aW4GET2W2DkYRREaZNWkpzUgY-IvkN22Dl1ZSRdKomrY01eKLQscAG95mXQxYQ0X0wG5y3DZ7agIauFsWANK9siVeBBUHKtCLN8pGDYBUhBn_NfpNwyz3nG09tRd-goDH5yZu8_dzy-hQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="00321f8a-0f26-4291-916d-5b911d4b609d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="e3c13c66-3a38-4291-8cf1-4ce1884794df"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="34c88e6e-3b26-4076-9466-360631eb7e46"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and (userName eq &quot;${#TestCase#userName}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8d5d9be8-e4b6-4977-98f2-489e55f09024"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_ZE7aGs8C</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_ZE7aGs8C</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>17aa35ae-ee53-4156-b60e-b0aaf29d59ab</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>17aa35ae-ee53-4156-b60e-b0aaf29d59ab</con:value></con:property></con:properties></con:testCase><con:testCase id="8ebfc2fe-59d7-47b3-bb44-64adcbcd61ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8306- To verify response for &quot;id&quot; &amp; &quot;givenName&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ef8e0ad1-3628-48a9-845a-b051a1cd04fe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULnQzdkZ1akduLXpoLXFpSXZZRHFqWFo1N2dCbzJuX1R4bGlPeWQ5V3ozRlUiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTM5NTQzLCJleHAiOjE3MDMxNDMxNDMsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.Um5BDtyA53EHYYO2grxDc8JmFO443wzuNeOOz40MiE_YVgE_cC3gdMx9jicgUX775gR3Z-c81PgxO1RfLM1JmfGZA-b_0gd8gqDaYV5sw_cLOKwm24A_QSRoYV3Ii-OFYWm7hYysNfSa96VHS90BWBA-3SK_NkQlsdZVoeehr6I35MPX5C_JhNDpirUOlNIWd3d-g1D32rx07mL-AnauLwjsE473NUmApA2xO29BSe9f8RcaCkm4RaRJXG0_INlwabdYQkW3I1ZROvDpEYUgw7LhVRRAhgo_NgOjeHwnqeAZ3HR1tGI6EEtAwKnU_xuORayNjZOJr5T4XwTBVkGojA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1ef7b60c-302f-402e-8e37-17559ee4ff80"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="6c97d240-9c0f-4a43-809e-cbd331af29f3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="fc86f7d8-26ea-4d6f-bd00-b8b1f424f542"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;)  or (active eq &quot;true&quot;) or (emails.value eq &quot;${#TestCase#email}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="5"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a97f2449-2f54-4f21-a4e9-3280a54117c8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_wLkwUnWm</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_wLkwUnWm</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>8f496a0e-7cf7-4886-b773-eaf57efb7633</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>8f496a0e-7cf7-4886-b773-eaf57efb7633</con:value></con:property></con:properties></con:testCase><con:testCase id="555ebeff-cae9-47ed-bedc-7b86aa0ad148" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8308- To verify response for &quot;id&quot; &amp; &quot;active&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9a782af9-e588-4c09-9926-b9dfa966684d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkktdHpyU2lwUWkxamdGdnM3ZElfWWZEcUhqeGU1aDh1SEt4dWZzcFF6blUiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTQxNzQ5LCJleHAiOjE3MDMxNDUzNDksImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.ZpCUqYiZGnTtiQtvS6AoF34eWMpAUpB8woQ_kDzwi9omDtMR63vuhsR1YMkIeuL4Re6zWEFKZ6bk9QtPGtdXp0BXcnZI0eIv5LURTYqpumYlrZ3SFgIiW5MpZaRebelQ7_XjiFKMdK_f8zg1Ek-25dFpO7gkpcEzfh6EOocsQyHdMg7zorBtbNFbe_vvnCdjJxqOKAgDLLOzij1RwgE5i5eDF1_uV6Z0Zq2jZBKVthNzh-J452eYEekaXuTgH2fcfx2GOeeNaSuakBYgeLCGJHORLV4qOncHJEWnlRVui-NVhMijIjt9l85p7MLUXTWZm0B3lYbEC_SM-t_RJvBYRA</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b2d25b62-10b9-40d3-8d52-8abef3e27d1b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="f364817b-0524-4da0-8c6f-e46aefc86317"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="6bf74b06-64df-4790-b92f-fa2775ebb152"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and (active eq &quot;true&quot;) "/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="04efbcae-ef92-42fa-831e-7156425014c5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_xABQZqNS</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_xABQZqNS</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>edf43f70-81ea-44d3-9202-d8b3118efb1e</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>edf43f70-81ea-44d3-9202-d8b3118efb1e</con:value></con:property></con:properties></con:testCase><con:testCase id="e1574c46-cafc-46c1-85c4-7904740d6768" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8310- To verify response for &quot;id&quot; &amp; &quot;familyName&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e64b9904-6aa3-482a-a6f8-fced00ac363d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmROd1h2eF94dGZWSm44bkU0Z04tUlBKYjJ6U3pNb3dhZ0F3enJLc3Y1S1UiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTQxOTEzLCJleHAiOjE3MDMxNDU1MTMsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.NCB6D58BV0UXRYRQcAbmgyLQnmAAf4Xd-IxIUoGC3ZL1DdnBvkq61B43KVc3kvjdSt33Y2b4VhbSt0JkX4VOSj8JwaMWovK1ZhKaL9jTkuxujv9Yp1TbeKlTZKVHF0Z4aAxc7_DyQ7NDetclRH69vYib4WDpn5sGORs6jyyAqLeQZorXgNnCT4mk1eTfQKy6WQlqKyVNsV1lxNfcikOsmUZpJaF7NkmzR_gb2S0WAPn9UaWxi5iZ70VxjeoOdrebwu8bK0biorvVGypacrOU2JmAth1T9Qwuvs7EnzpqdREQeljHZ3EAGixHQHJmB4YBAgKu0JytuwHFODAQMLVUPw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="dd041272-06b9-4262-8cd8-49c5bc2a7736"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
 
def randomGen =RandomStringUtils.randomAlphanumeric(8)
 
// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="9b8e8856-81f3-4895-85b9-96fa23246872"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="1f441a02-c0bb-4ea3-880a-a5fa043cea3b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (externalId eq &quot;${#TestCase#userExtId}&quot;) or (active eq &quot;true&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a3546533-6c8d-4f69-a5b6-ed4e687d4f88"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_7SH5GjU1</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_7SH5GjU1</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>0d054c3f-82a7-4ac9-80da-3af6998cf6cb</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0d054c3f-82a7-4ac9-80da-3af6998cf6cb</con:value></con:property></con:properties></con:testCase><con:testCase id="6d5346d1-7d5f-49e8-9fe0-50ef0b8241e8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8311- To verify response for &quot;id&quot; &amp; &quot;phoneNumbers&quot; attribute with Logical Operators (AND,OR)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8d40b73c-5d20-4e54-8528-55c4980b2538"><con:settings/><con:config><script>//For Database connection
import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')
//def eventID = context.expand('${#Project#bookingId}').toInteger()
//def userID = context.expand('${#Project#userID}').toInteger()
def tc= testRunner.testCase
def tP = tc.testSuite.project
def headers = new StringToStringMap()

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//Connection String
//def tC = testRunner.testCase

testRunner.runTestStepByName("GENERATE_TOKEN")

 def TOKEN_ID = tc.testSuite.project.getPropertyValue("ACCESS_TOKEN")
 headers.put("Authorization", "Bearer "+TOKEN_ID)
 tc.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)
def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}
	def Query = "select TOP 1 * from tbluser order by 1 desc"
	def result = sql.firstRow(Query)
	tc.setPropertyValue("id", result.pkUserID.toString())
	tc.setPropertyValue("username", result.userName.toString())
	tc.setPropertyValue("firstName", result.firstName.toString())
	tc.setPropertyValue("lastName", result.lastName.toString())
	tc.setPropertyValue("email", result.email.toString())
	tc.setPropertyValue("telephone", result.telephone.toString())
     tc.setPropertyValue("mobile", result.mobile.toString())

	def accountActive = result.accountActive
     def tcActive =accountActive.asBoolean() 
	tc.setPropertyValue("accountActive", tcActive.toString())

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="a23d64ec-f1cf-4bb6-8f26-b7087a4cad69"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="7bb94e70-ea1c-41ff-b1da-bc3843114929"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1Njc5NjksImV4cCI6MTY4ODY1NDM2OSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.MHkqvmUXF1EQkqlXAma_tY0FNJku8AfEYLEEvOJm9fuIy8S7Qwp6rLfc1BoP9bZXniYyMYMndHxTmIE03LJjhQ" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and (phoneNumbers.primary eq &quot;true&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (externalId eq &quot;${#TestCase#userExtId}&quot;) or (active eq &quot;true&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;) or (phoneNumbers.value eq &quot;${#TestCase#telephone}&quot;) or (emails.value eq &quot;${#TestCase#email}&quot;) "/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b41df306-0010-423c-870a-3a074e2455bb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="calltestcase" name="GenerateToken" id="a4155739-12e3-42cb-b8d7-99d9e98852a8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmROd1h2eF94dGZWSm44bkU0Z04tUlBKYjJ6U3pNb3dhZ0F3enJLc3Y1S1UiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTQxOTEzLCJleHAiOjE3MDMxNDU1MTMsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.NCB6D58BV0UXRYRQcAbmgyLQnmAAf4Xd-IxIUoGC3ZL1DdnBvkq61B43KVc3kvjdSt33Y2b4VhbSt0JkX4VOSj8JwaMWovK1ZhKaL9jTkuxujv9Yp1TbeKlTZKVHF0Z4aAxc7_DyQ7NDetclRH69vYib4WDpn5sGORs6jyyAqLeQZorXgNnCT4mk1eTfQKy6WQlqKyVNsV1lxNfcikOsmUZpJaF7NkmzR_gb2S0WAPn9UaWxi5iZ70VxjeoOdrebwu8bK0biorvVGypacrOU2JmAth1T9Qwuvs7EnzpqdREQeljHZ3EAGixHQHJmB4YBAgKu0JytuwHFODAQMLVUPw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="381e8f8d-759e-41e7-936b-9427ad19da94"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_44182</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>4061</con:value></con:property></con:properties></con:testCase><con:testCase id="d6b746f2-f23d-4ebb-9457-d022cc2dee10" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8312- To verify response for &quot;id&quot; &amp; &quot;Mobile&quot; attribute with Logical Operators (AND,OR)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fd4d7479-b46d-466a-b77d-31dec0e87285"><con:settings/><con:config><script>//For Database connection
import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')
//def eventID = context.expand('${#Project#bookingId}').toInteger()
//def userID = context.expand('${#Project#userID}').toInteger()
def tc= testRunner.testCase
def tP = tc.testSuite.project
def headers = new StringToStringMap()

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//Connection String
//def tC = testRunner.testCase

testRunner.runTestStepByName("GENERATE_TOKEN")

 def TOKEN_ID = tc.testSuite.project.getPropertyValue("ACCESS_TOKEN")
 headers.put("Authorization", "Bearer "+TOKEN_ID)
 tc.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)
def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}
	def Query = "select TOP 1 * from tbluser order by 1 desc"
	def result = sql.firstRow(Query)
	tc.setPropertyValue("id", result.pkUserID.toString())
	tc.setPropertyValue("username", result.userName.toString())
	tc.setPropertyValue("firstName", result.firstName.toString())
	tc.setPropertyValue("lastName", result.lastName.toString())
	tc.setPropertyValue("email", result.email.toString())
	tc.setPropertyValue("telephone", result.telephone.toString())
     tc.setPropertyValue("mobile", result.mobile.toString())

	def accountActive = result.accountActive
     def tcActive =accountActive.asBoolean() 
	tc.setPropertyValue("accountActive", tcActive.toString())

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="6acb77ce-553b-4ed9-8620-d49d4b9e58fb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="c477fee0-bb73-4cd2-828d-27c97a70133c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1Njc5NzYsImV4cCI6MTY4ODY1NDM3NiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.YzJUsXefRoOlwi91clNdBMv3DGOXxHwqEU5H0vTYzoiiWaIo7t0_JMuqLpi9mOlSqwB3LB1u1uATjYXNRf2V4w" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and (phoneNumbers.type eq &quot;mobile&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (externalId eq &quot;${#TestCase#userExtId}&quot;) or (active eq &quot;true&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;) or (phoneNumbers.value eq &quot;${#TestCase#telephone}&quot;) or (emails.value eq &quot;${#TestCase#email}&quot;) "/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1d4c4fd8-0e02-4e9b-8cd3-25584ff033e6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_44182</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>4061</con:value></con:property></con:properties></con:testCase><con:testCase id="f611a867-6dbd-4f77-8788-dcf52ed50198" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8313- To verify response for &quot;id&quot; &amp; &quot;phoneNumbers&quot; attribute with Logical Operators (AND,OR)" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="11d9719c-9078-406a-a6e7-b78bf7ac9471"><con:settings/><con:config><script>//For Database connection
import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')
//def eventID = context.expand('${#Project#bookingId}').toInteger()
//def userID = context.expand('${#Project#userID}').toInteger()
def tc= testRunner.testCase
def tP = tc.testSuite.project
def headers = new StringToStringMap()

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//Connection String
//def tC = testRunner.testCase

testRunner.runTestStepByName("GENERATE_TOKEN")

 def TOKEN_ID = tc.testSuite.project.getPropertyValue("ACCESS_TOKEN")
 headers.put("Authorization", "Bearer "+TOKEN_ID)
 tc.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)
def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}
	def Query = "select TOP 1 * from tbluser order by 1 desc"
	def result = sql.firstRow(Query)
	tc.setPropertyValue("id", result.pkUserID.toString())
	tc.setPropertyValue("username", result.userName.toString())
	tc.setPropertyValue("firstName", result.firstName.toString())
	tc.setPropertyValue("lastName", result.lastName.toString())
	tc.setPropertyValue("email", result.email.toString())
	tc.setPropertyValue("telephone", result.telephone.toString())
     tc.setPropertyValue("mobile", result.mobile.toString())

	def accountActive = result.accountActive
     def tcActive =accountActive.asBoolean() 
	tc.setPropertyValue("accountActive", tcActive.toString())

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="44f71695-3de0-4dfe-b149-17ac234bc4ab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="232a476a-1938-4fe0-a053-4b1a45a4fd15"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1Njc5ODIsImV4cCI6MTY4ODY1NDM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.B6OlLBgxiTnl70sMcdRXOMrSsw4Cuc6yV_2FQSPiVj8i7JmxifYkvEFIXtvVsTz_Qodix-0ATyLBGuCMg0b4sQ" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and  (phoneNumbers.value eq &quot;${#TestCase#telephone}&quot;) "/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="973e63bb-beb6-4de4-88a9-b7d824375ad9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_44182</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>4061</con:value></con:property></con:properties></con:testCase><con:testCase id="ba95fa5f-3e6a-4558-b934-58c1fdf72000" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8314- To verify response for &quot;id&quot; &amp; &quot;emails&quot; attribute with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bb9015be-f606-436e-bda2-d40ec45b484a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmROd1h2eF94dGZWSm44bkU0Z04tUlBKYjJ6U3pNb3dhZ0F3enJLc3Y1S1UiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMTQxOTEzLCJleHAiOjE3MDMxNDU1MTMsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.NCB6D58BV0UXRYRQcAbmgyLQnmAAf4Xd-IxIUoGC3ZL1DdnBvkq61B43KVc3kvjdSt33Y2b4VhbSt0JkX4VOSj8JwaMWovK1ZhKaL9jTkuxujv9Yp1TbeKlTZKVHF0Z4aAxc7_DyQ7NDetclRH69vYib4WDpn5sGORs6jyyAqLeQZorXgNnCT4mk1eTfQKy6WQlqKyVNsV1lxNfcikOsmUZpJaF7NkmzR_gb2S0WAPn9UaWxi5iZ70VxjeoOdrebwu8bK0biorvVGypacrOU2JmAth1T9Qwuvs7EnzpqdREQeljHZ3EAGixHQHJmB4YBAgKu0JytuwHFODAQMLVUPw</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="73fe0745-a444-48be-aa1b-d7167de6b206"><con:settings/><con:config><script>//For Database connection
import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')
//def eventID = context.expand('${#Project#bookingId}').toInteger()
//def userID = context.expand('${#Project#userID}').toInteger()
def tc= testRunner.testCase
def tP = tc.testSuite.project
def headers = new StringToStringMap()

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//Connection String
//def tC = testRunner.testCase

testRunner.runTestStepByName("GENERATE_TOKEN")

 def TOKEN_ID = tc.testSuite.project.getPropertyValue("ACCESS_TOKEN")
 headers.put("Authorization", "Bearer "+TOKEN_ID)
 tc.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)
def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}
	def Query = "select TOP 1 * from tbluser order by 1 desc"
	def result = sql.firstRow(Query)
	tc.setPropertyValue("id", result.pkUserID.toString())
	tc.setPropertyValue("username", result.userName.toString())
	tc.setPropertyValue("firstName", result.firstName.toString())
	tc.setPropertyValue("lastName", result.lastName.toString())
	tc.setPropertyValue("email", result.email.toString())
	tc.setPropertyValue("telephone", result.telephone.toString())
     tc.setPropertyValue("mobile", result.mobile.toString())

	def accountActive = result.accountActive
     def tcActive =accountActive.asBoolean() 
	tc.setPropertyValue("accountActive", tcActive.toString())

testRunner.runTestStepByName("GET_USER_BY_FILTER")
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1531bf4d-98c3-4413-9d01-c7366a61ee70"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [{
            "primary": true,
            "value": "8088090876"
        },
        {
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "${#TestCase#lastName}",
            "givenName": "${#TestCase#firstName}"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "utc hawai"
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    } ,
    "urn:ietf:params:scim:schemas:extension:customextensionname:2.0:User": {
        "group": "${#TestCase#group}",
        "floor": "${#TestCase#floor}"
    }       
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId
def ActualId = jsonObject.id
context.testCase.setPropertyValue("id",ActualId)


//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage


// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="5c5330c1-e84f-4064-bd25-9a05bfe3251f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1Njc5ODksImV4cCI6MTY4ODY1NDM4OSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.V4vqUG0OJM9A9b2b8UKesFYKQMXjWb6mn6nbZbjDMVvMd_OlqJgu-i3zjPAK-8ElAbJkfsI9BP28STvlv0wTxA" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def userId = context.testCase.getPropertyValue("id")
def uName = context.testCase.getPropertyValue("userName")
def gName = context.testCase.getPropertyValue("firstName")
def fName = context.testCase.getPropertyValue("lastName")
def tel = context.testCase.getPropertyValue("telephone")
def mobile = context.testCase.getPropertyValue("mobile")
def email = context.testCase.getPropertyValue("email")
def accountActive = context.testCase.getPropertyValue("accountActive")    
def UserArrayLength = jsonObject.Resources.size()
log.info UserArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();
List<String> list2 = new ArrayList<String>();
List<String> list3 = new ArrayList<String>();
List<String> list4 = new ArrayList<String>();
List<String> list5 = new ArrayList<String>();
List<String> list6 = new ArrayList<String>();
for (int i=0;i<UserArrayLength;i++){
    
    list.add(jsonObject.Resources[i].userName)
    list1.add(jsonObject.Resources[i].name.givenName)
    list2.add(jsonObject.Resources[i].name.familyName)    
    list3.add(jsonObject.Resources[i].active.toString())
    list4.add(jsonObject.Resources[i].emails[i].value.toString())
    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    list6.add(jsonObject.Resources[i].id[i].toString())
    //log.info list5[i]
    if(list[i]==uName || list1[i]==gName || list2[i]==fName || list3[i]==accountActive || list4[i]==email || list5[i]==tel || list5[i]==mobile || list6[i]==id){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id eq &quot;${#TestCase#id}&quot;) and  (emails.value eq &quot;${#TestCase#email}&quot;)  or (phoneNumbers.value eq &quot;${#TestCase#telephone}&quot;) or (name.familyName eq &quot;${#TestCase#lastName}&quot;) or (externalId eq &quot;${#TestCase#userExtId}&quot;) or (active eq &quot;true&quot;) or (name.givenName eq &quot;${#TestCase#firstName}&quot;) or (userName eq &quot;${#TestCase#userName}&quot;)"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3093dcd8-76fe-41bf-b7ab-9c522b1bffdb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_44182</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>id</con:name><con:value>4061</con:value></con:property></con:properties></con:testCase><con:testCase id="75b37402-8d96-4a69-bb46-0972e140fca0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-8315- To verify response for &quot;id&quot; attribute with (ne,co,sw,ew) with Logical Operators (AND,OR)" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="999a4553-083b-4374-aba9-c8117fa82380"><con:settings/><con:config><script>//For Database connection
import groovy.sql.Sql
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
//Global Properties Value
def dbString = context.expand('${#Project#DB_STRING}')
def dbDriver = context.expand('${#Project#DB_DRIVER}')
def dbUser = context.expand('${#Project#DB_USER}')
def dbPass = context.expand('${#Project#DB_PASSWORD}')

def tc= testRunner.testCase
def tP = tc.testSuite.project
def headers = new StringToStringMap()

def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//Connection String
 testRunner.runTestStepByName("GENERATE_TOKEN")
 def TOKEN_ID = tc.testSuite.project.getPropertyValue("ACCESS_TOKEN")
 headers.put("Authorization", "Bearer "+TOKEN_ID)
 tc.getTestStepByName("GET_USER_BY_FILTER").testRequest.setRequestHeaders(headers)
 
def con = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
def sql;
//log.info dbString
try{
	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
	log.info ("[STEP - SEARCH USER EMAIL FROM DB] - INFO : DB Connection Success")
	}catch(Exception e){
	
	testRunner.fail("[STEP - SEARCH USER EMAIL FROM DB] - ERROR : DB Connection Failed")
	log.error "[STEP - SEARCH USER EMAIL FROM DB] - ERROR : "+e.getMessage()

}
	def Query = "select TOP 1 * from tbluser order by 1 desc"
	def result = sql.firstRow(Query)

	tc.setPropertyValue("id", result.pkUserID.toString())
	tc.setPropertyValue("username", result.userName.toString())
	tc.setPropertyValue("firstName", result.firstName.toString())
	tc.setPropertyValue("lastName", result.lastName.toString())
	tc.setPropertyValue("email", result.email.toString())
	tc.setPropertyValue("telephone", result.telephone.toString())
     tc.setPropertyValue("mobile", result.mobile.toString())

	def accountActive = result.accountActive
     def tcActive =accountActive.asBoolean() 
	tc.setPropertyValue("accountActive", tcActive.toString())

testRunner.runTestStepByName("GET_USER_BY_FILTER")	
testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="51b9c151-6337-4209-99e8-f84bbe948ae9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_FILTER" id="6426c17c-532d-491e-afd8-1d65cec48060"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2ODg1Njc5OTUsImV4cCI6MTY4ODY1NDM5NSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiI2NGEwZDVhYzVlYzE0MGRiYjEzOGRmMjViMTVkMDE4OSJ9.u54FLvvwul9UW7S6B285eAKX6fpNLyd1BF_oks1NwR6WnvwlMQLfr_qclL-0ibVlz8NpBNRBffGBd5rZPWrPRw" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null
//
//// Verify First/Last name not null
//def fName = jsonObject.Resources.name[0].givenName
//def lName = jsonObject.Resources.name[0].familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(id ne &quot;${#TestCase#id}&quot;) and (userName eq &quot;${#TestCase#userName}&quot;)"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a313a323-d73b-4bf3-bd67-a995aba881cb"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>username</con:name><con:value>scim_twntiz</con:value></con:property><con:property><con:name>firstName</con:name><con:value>SCIM</con:value></con:property><con:property><con:name>lastName</con:name><con:value>USER</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>telephone</con:name><con:value>8088090876</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9916616577</con:value></con:property><con:property><con:name>accountActive</con:name><con:value>true</con:value></con:property><con:property><con:name>id</con:name><con:value>4061</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="95df0f6a-7690-408a-9b19-42753599ecb2" name="GetSCIMUser-Parameter Name" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="83c7c489-35b8-4fe7-9259-efabd55a0bc5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7562-To verify the response when &quot;excludedAttributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="fdcf7c99-96a4-4b3b-ba0a-e1f7620884fd"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="48465023-1e16-4b87-a280-03269b4987f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="02dc9b79-8ba3-436e-911b-95f02a19e11c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExMzEsImV4cCI6MTY3NDYzNzUzMSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.oZ_1PCt_OzVEbIXgG_40Ggw4yE4LgiQkNLh5ifhaAuwvJoZ4-JfAy8gpAfB48-38oBNfT2YyAiyJQDdJFv0ptA" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info JsonRequest

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="cfce1932-7a91-45b3-ad34-92e99a2843f5" name="Not Contains" disabled="true"><con:configuration><token>userNamessssssssss</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="excludedAttributes" value="userName"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f13a614e-a554-484c-bbd5-d9037e7ffe04"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="1e512d02-ee20-4442-95ee-44413015a33c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7563-To verify the response when &quot;attributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="cdc57f65-ad60-481f-947a-18e16fedf66e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="989aaf5d-9e61-41ea-88e6-16616e764a0b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="33b5e4cf-1e7b-4acd-ba7d-32dd085183d8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExMzYsImV4cCI6MTY3NDYzNzUzNiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.srofD8p2xV2RloYHBsJlzhRaBEt3X3DdLqvUfcGDAoW_XpAdFC6QsswMKQTQ1rdWJFztamxPt0_KskuikXAsnQ" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="073d1756-9b6a-496e-a4b8-383a0b617599" name="Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="attributes" value="externalId"/>
  <con:entry key="excludedAttributes" value=""/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="00755f70-c638-4219-bdde-449a80776672"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="f663f054-c122-4d8e-811a-53993a059a3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7564-To verify the response when &quot;attributes&quot; and &quot;excludedAttributes&quot; are given in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="83ae03d7-6e8c-493d-b890-261d081d44e2"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="efd296a4-5960-4494-bbd0-6070ef9c8923"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="991ecd89-571a-4964-8b7a-45461a0b3355"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExNDEsImV4cCI6MTY3NDYzNzU0MSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.kJ24J-LpJAVzdciliKyNeP2R7h1jJGdfRYHKQgJzpWqygV4PmNp1AwBpqvsGv9x7zsxfqOZdXLVug8XdhFvuJQ" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId




// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="attributes" value="userName"/>
  <con:entry key="excludedAttributes" value="externalId"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="525a1b63-82ef-43fe-beaa-8f06f597a3ef"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="56acd215-f06d-433b-b4b9-8b6d7bbbb73b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7565-To verify the response when multiple attributes are given in filter for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6e35b8f9-66e1-4830-a273-b11dfc500c14"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="c570b62c-adc7-4937-afed-7882d034764a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="6ae831e7-73c1-4f7d-81d7-a40839a46d7a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExNDUsImV4cCI6MTY3NDYzNzU0NSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.O2wwyETyda3bqu34trPSE5qsZRreVhE_nhaxbNRCIQsn7LcWUtBMqPDzfv4mtPSOutgDkIQjsLcxO_oHN_K_6g" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="87169b2f-5f6c-4c17-bf45-7b9051e90f5c" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="aba1267d-5d7f-4b5e-995a-e868c52c5d26" name="Not Contains 1"><con:configuration><token>emails</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="excludedAttributes" value="externalId,emails"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="13ea4663-6afc-4e75-a5a3-ea19a0b693db"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="69fb8cb7-7341-448c-acb3-834f09acbb87" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7566-To verify the response when multiple attributes are given in filter for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="980e123b-314e-4e05-8446-c922720de0fa"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="d1823abf-a5e4-43d4-a85e-ec8f35c974c2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="425c0fbc-0956-44a6-b1c6-71d787d71655"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExNTAsImV4cCI6MTY3NDYzNzU1MCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.WQzMEzW5rN1NS4zmfCzb17eOxsWrqtWqMaHHWVVx8UD7yLTzevJ01uMBlYOX_gFL5sUAmm2OjcQ0X8NC-XB0Mw" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="attributes" value="externalId,name"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d1b6043e-2449-4e34-8130-c3ad989f5d77"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="2ad7583b-2dc2-419d-b8a2-3a7f6101d23e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7567-To verify the response when operators used in filters are case insensitive for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d91da2ec-d381-43eb-ba1a-fbd9b3646a82"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="e40f872c-3f39-44e3-b6b8-eb3ddd2adb06"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="0c3d6da9-ca3b-4a42-9175-e3f4cee9793e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExNTUsImV4cCI6MTY3NDYzNzU1NSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.S7VxiSzELm_ReeJ5kjylU0f7JwAk1huvtlkHvvEepYirZ-aXy4ioH1xOb3ysb4K1RBuMKqmvpDb-Vfb2Zprl9A" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "User"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="0d70930e-fc98-4314-aa1e-e7337787b04e" name="Not Contains"><con:configuration><token/><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="excludedAttributes" value="ExternalID"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a48a4383-1340-4b03-950f-cc2bbdf9bf4d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="0c621928-01ec-4f6d-b792-11b9a4db156f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7567-To verify the response when operators used in filters are case insensitive for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e6beffe3-b9da-4208-8eaf-d63396400c3b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="ded4d6f9-244d-4a21-a6ef-a08255cbfc0f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="0aa12914-46b7-42ec-b383-06f03c6a2f93"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExNjAsImV4cCI6MTY3NDYzNzU2MCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.Lu7iO1iMokxV5w8fZslA03yPwsrq6teDoLny1zdxBZ3T9BnMx27_vIWg7HfgrtEFAcQG-wd0XYmeuV9i7NKxgw" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="19744aae-f136-4f70-92dc-5cf285f741ce" name="Contains"><con:configuration><token>active</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="attributes" value="Active"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3fc3bfc0-287f-45d0-b0b0-e321f3d603b2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="f5bc9f3d-0634-40c3-b571-f0cf6cc47be1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7647- To verify that Child attributes are supported for Attributes names in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c2230fa7-8162-4f49-960d-d82d0c8a2679"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="1695b31f-53fa-45f9-861d-03c1bc66dcdc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="15b8efba-4417-4aba-8ae4-a9e84046c02d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExNjQsImV4cCI6MTY3NDYzNzU2NCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.hviJqDf2vufHdgGZMlUIRQiC7y7X-S_pum-3Z9FZMwjrYUNBdA8qtvzlbsFeASUmwqkIl_Quc0jZflmbzl5shg" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ac3c1049-29d8-482a-aa09-dfcded3e76d2" name="Contains"><con:configuration><token>givenName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="attributes" value="name.givenName"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="6f581812-750f-44bc-a78c-d2d687524bc8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="f250fb45-7292-4bb0-9354-a6ef02b04702" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7648- To verify that Child attributes are supported for excludedAttributes names in filter" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d4ebeffc-0445-42cc-b3b4-4448535ad90d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner
testRunner.runTestStepByName("GENERATE_TOKEN")
//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("GET_USER_BY_PARAMETER_NAME").testRequest.setRequestHeaders(headers)

testRunner.runTestStepByName("GET_USER_BY_PARAMETER_NAME")

//if(DB_FLAG.equalsIgnoreCase('TRUE')){
//	    testRunner.runTestStepByName("DB_VALIDATION")
//		
//}else{
//	    log.info "DB VALIDATION SKIP..."
//	}	

testRunner.gotoStepByName("END")
</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="dc729fd9-eb72-413e-9037-99825869bfa1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_USER_BY_PARAMETER_NAME" id="75ae9f66-5920-482a-8b3a-291d11d34c60"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/scim/${#TestCase#USER_RESOURCE}" methodName="GET_USER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_USER_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzQ1NTExNjksImV4cCI6MTY3NDYzNzU2OSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJiMGFiOGQzZDExOWM0ZDZlYTc5YjQ2ZTY2N2M2Y2ZmZSJ9.T6BRaIPid4CASFnzJjcwxdWG7I-zm7ia1IGZ7j_DFH8VFcdH-jcaCrdTuVvcfmAt3yZ0PhsRjHdAwr780lgaGQ" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="932a2e0b-245e-4582-8d79-5f1a5edc70a4" name="Not Contains"><con:configuration><token>familyName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value=""/>
  <con:entry key="count" value=""/>
  <con:entry key="excludedAttributes" value="name.familyName"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d4a6f1a5-ca04-45c2-be99-e6b0d6efc98a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="395636ee-cc81-4340-854d-fae180b86481" name="CreateSCIMGroup TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="92427950-f450-4e24-a9be-6820dcf96d0e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01 - To Verify Create single SCIM Group" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="87febcae-bc2a-46e7-a3cc-20a28c8111f9"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKcSt2aUdnWFVzQ1hrU1pVWFJXME5WTTRXSDFSODVhOWVnLzAwTnN1OHREWGZNREFDb2x5MTB3dVFlZ2t0VlJxS3JkZXlpaE9oQU5xcitPancyNWJYZlJrRjI0SmdvdHVDK3VxMURmbDVEUTN5bGxvYjVMMkU0VXdvdWQzblBrR0xtaFNEWm9MYXBIYzdPa01MTlJCWm45L05pd0Y5SzNRVTV3d0gzcW83UndlRDFaR3FISWhweUFFYTVlN0JVVXciLCJleHAiOjE3MzYwNzEyMTIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.TrgN9IFFk5X2RS8PL6cRFoKFu2DAk2UqIH7fIsoKVuU</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9d56e527-9585-4e82-b46e-5895f4359a57"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="a14e7e61-907b-4a9e-bf21-20e12da90c72"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="bb2ccd20-9589-4d8b-a55d-e83ae61003fa"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_zBrTu</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_zBrTu</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>02cb05ce-96fd-4327-a3d7-3e3a14db5367</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="d0de7a3e-2d78-4b21-b7b5-554a6f12fe1e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To Verify, Group is not created with duplicate display name" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e299a16b-774f-4157-805d-ad6663677c42"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIwM0JUOEExaTdmK21wU1llSkFaRDVuUmw5QitHZW43SURTYk5vMURLcC9meFBHa2s0Yi9Lb2pmMVFDbDI2R0czYjd5aFRpWUtOU1pDUzVvc2VySGN0NXA1OTFCeDVTTzI5KzZORjVWYXFnUm9saGEvZlowdkJ4UnA1VEFaNXFsSERta0xyNXU2NEZkTjJOZ2I1TGJiVTJ3UWVBekw4Y2dsMklFUUQ4eW03TTFjeGFEY3R3a2g5S1NaK2VVd05tcFUiLCJleHAiOjE3MzYwNzEyMTYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ZQ0_kevv4CkJ7B32M32kowh9WHMgshlOzWTpCmOaSkk</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="544db8ab-7fc1-4219-badd-10457b3b6591"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
def randomGen1 =RandomStringUtils.randomAlphanumeric(6)
tC.setPropertyValue("UpdatedgroupName", "scimGroup_"+randomGen1)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="e5d5240d-272c-4007-8aca-0fab75ece880"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//log.info jsonObject.id.replace("G","").toString()
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_DUPLICATE_GROUP" id="6a574c4b-c1cc-48f6-aa62-be8124354719"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_DUPLICATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="51f928b3-867f-44b8-a478-ae7c82b87259" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("ConflictErrorType")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupExists")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("Conflict")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="e231e556-1e5b-4600-9224-5680e34e5fa5"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_fNGZQ</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_fNGZQ</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>dc6d654c-f131-4bc8-b4c8-022f945feff1</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>scimGroup_hZKisP</con:value></con:property></con:properties></con:testCase><con:testCase id="fb3cdbb2-ad9a-46db-a141-ea339acdcf5e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03 - To Verify ErrorMessage/Status Code, when 'displayName' value is blank in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9f77e237-fd48-4ee2-9fa8-ce7e98f9f4bd"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLbzRadXZZcXVIcEtoY0ppTG1IKzJ2MTgwY1FaOEMwNFF6V3dLakNUQng2R0ZsOUJmWndWVVBXTTgyM3VtczY3OUs0MkFMZ3puL1lMU280SkNuV2lMa243WWtpSEQwWVNQL0pIaGJKRUIwSXdjWHFvUk84T1Bhd29hNHRYWHFxSk1hMVF0MTZod1haM1V4U0FZM25kMDl0cFc3aXBpVWFmdEJzbHUwa1BRRmRESWl4UlJyYy9OMWZCbFcwZU05elciLCJleHAiOjE3MzYwNzEyMjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.JfA47HpevqEQIFBKL5sdvwu5dCf3Yal2XyglkK15Dh4</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b59cff80-e67d-4a7a-956f-84f37e5169c9"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="f0a83383-446c-4eb5-89b6-21643801f30d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupNameMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="dc9eda51-47b3-4f5b-8134-65b62d25050f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_RreE7</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_3Nvhr</con:value></con:property></con:properties></con:testCase><con:testCase id="d796696c-60b5-447b-bbc2-c4e133cb2bcf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04 - To Verify ErrorMessage/Status Code, when 'displayName' &amp; 'externalId' both attribtes are missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c433cabf-5478-49d4-bced-a5a2d3cbb3fe"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJiZWhQYVZGS3dMOG1qMDhlYzRaam5jN2dMVzBaZU1vS2JkNUpLUHdNSzFSTzR1S3cxSXpBVmFseVA5cnJRRzN6SVI1cFhiSStxMEt2NnFWOTlTbzlqcHd1MmRHK2tJUTBhZ2J1ZFJQYk1INVN2bGpYOHIyWXJDZG9OSG1Hd2UwL0dqN3VhaEM2TW9QcUpwNXNTSEI1NEQ3TWpjUFhkL3RJSmE3eWYxZTJManN1NDR1Qm5vRkNpbUhWcHBwMDZJSEMiLCJleHAiOjE3MzYwNzEyMjcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.oZp37ac4-xoIG0rA1av8XHiEsvVdptLKbRAQLU4F4dk</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4e3c6772-e49d-4407-b9f0-799cf9068b4d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="a94675d5-b595-42ee-8f53-ca8876cbd62d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupNameMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3ecf8e93-f88a-4737-a31b-c7946ee30d7e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_s7KoT</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_s7KoT</con:value></con:property></con:properties></con:testCase><con:testCase id="ae5c35cc-2655-40da-b90d-eddc3291957f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 - To Verify, members list with multiple userID's" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="feacb9d7-682f-48e3-9c40-9f4ef82e6830"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJxak03QS83UVR6L0diQkNGeGk0LzV5STlUUWFLU0I0R1dSL2RESG5YZUhwL3BaUEFHTkhzbk9pOTNvZisyOVcyVkg2UEJFSXZqb0ZHQ2hMR204OXFRcll0NytqVStVd3pqZ2RrcDE4L1FWaTk2L0YzQ2djVXNpMldrWjJZamMySE84RnZCZ2FBWkJ1RlVwVi9wZmpWR3RxTVo4SS80OU96TmkxWmd0RWI1SmZ5YnJtM0IveDVMOVF4TnBpY0hnQU4iLCJleHAiOjE3MzYwNzEyNjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.OEo9BDNogoHjNplvp1ZRmtMiDhCqy8N8rVcuLPQEWEs</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="354cae31-68b4-4c89-a58d-9208d409d2be"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2971dd98-ae75-40c6-bd50-d2ff63c985c3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    },
    {
        "value":"${#TestCase#internalUserId1}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="728101fb-ee72-4e58-a435-414191155cf1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4057</con:value></con:property><con:property><con:name>internalUserId1</con:name><con:value>4059</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_FXnJ4</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_FXnJ4</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>6514efcf-78b5-492b-8511-6a5345fec71f</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="998a75c6-0400-4853-b1b5-5e0210c5b02b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06 - To Verify ErrorMessage/Status Code, when 'Group Schema name' is Invalid in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="5112bc48-e8c3-4d91-b6d9-4e7bb4c4f19b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ0ekY3N0RRMEwzblF0RjlqSnFDSG1pSTdYTXJ6REtYbU5OWlVhS0VSbW1sYWVEdWRuaWFzSkhLdVdockJkU1lwbG9jT2JyR0JUSW9qVk1SOTB6aHh1bEMwWEExenB1djBad044VVowQ1BLWHg2NG40elFWT0x3SGtPaXdjalZKcjliUUZTNzZJVFFUNzJNQmdNQmNoRGNnbmtMc2dIbkRITlFaSmhrRVgwTWV4VURFSGNlS2hlMm1RY0RxZjlWNEgiLCJleHAiOjE3MzYwNzEyMzAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.1hnZE_1t-YUoPRRObMCB9Yf1u0xyCpr5vZ5coshV7uE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0b3b5841-a718-4237-9a54-fc005f23e284"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="ff113454-1a9d-4a2e-bbf3-0d4f5cfa6bc7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Groups11"
        ],
    "externalId": "{#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidSchemaList")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f5f41d28-9ed9-4439-b814-482d4370dad3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_CIz67</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_CIz67</con:value></con:property></con:properties></con:testCase><con:testCase id="686332ac-d347-47b7-9ee5-68a8aa14b63e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07 - To Verify ErrorMessage/Status Code, when 'Invalid Schema List' is given in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f3eba105-923a-465e-a6da-168266412780"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKYnB6VCtGQVVBRnpITEFKd2NaZW05Si8vclNMQjJybzI1Rk1panEwWEZNUXJTRFZNazF5QS9zTDVSc0NoMFBQVjBpbkRhcTFkOWQ1QTdUVVRvK3BrSmM3emNQWlJRZnFnY3hkS3crS2tMcjNDcEc4eU5sS0ozNGZqOEc0UDNnMTlkTlAvWE9nRlpEQm12V2QzS0g1SDB0dXBoSzNiSG5mNU1PZndQYmV6K3I2YXFoa1gzcUpBMnB4L3p6RHJORk4iLCJleHAiOjE3MzYwNzQwNTksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.cjLS1rMzuVjKtZ_Kke6u8DShqbTRO2IDScGmTg86l5Y</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="41eb761c-fe00-43c3-83bc-a2df1b1480d2"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="f5c57eed-b3e6-4f67-bb2e-efb4e7807eaf"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemass test": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "{#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("SchemaListMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="54aeba7f-d9f0-488d-87bc-b6bf44a6a76f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_hwOW4</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_hwOW4</con:value></con:property></con:properties></con:testCase><con:testCase id="43eae790-414c-4373-a4ee-657154d339dc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08 - To Verify Create single SCIM Group with members list (active/inactive userId)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="be2a2242-732d-4f67-a940-e791acb10d18"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJaaGFVaDhPTkRhV1FqRXNkVWx1dGVFdzJqMWM3MWZoR05ycHVLVkVVYkhvVGZHaHpyT0NxenB1QjQ2K1pkQzJOT1R2NnFMV2FtUC9rU1RDOHZ2MllpeFFxNkFlTUd1VDZKbTVDZ21QcVJpTkNFcklsU1QyWUtmQ05FUWQ5blBFcXhBUVQvaGNjNXlBM29jOXJrNG16NXgvc0lpSEV5eWxVMGtwZXJRK3p6RGNTcHU0VmdwU3FFc2dwSFFaeUljbWkiLCJleHAiOjE3MzYwNzEyMzcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.bGDgemnvjnwJZHCuDSBT2ho_fmSlmZu-W0JVDZT10QY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="ea5f39b0-0ff5-4d8a-ac62-ece542104097"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="19295b5c-0ad4-44ce-9842-4bc01fd38bbc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"  
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="05e720e6-972a-4baa-9b62-d890bd643902"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>cbac8959-146a-4937-89da-a0822a1c2224</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_ACIjv</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_ACIjv</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>72f1b2a5-ee60-4db4-8de5-c20b369eec57</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="25de5b5f-b3b9-490b-aa16-323e5a61288d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09 - To Verify, members list with invalid userID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e9f37604-c277-4721-b783-37b81da3e9ac"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ1N21ndmlZZ3h4VVlIemJpRTdwWWNXU29QY05FYi9CbEpnbCtXb2UxdXA0SVIyZWRhVm8zeTF5MERvelVMWTZCdGtuV3IwWFJBT1pNU2xLNUZrZnoyajB4Rlc4bjFJeWZ4WWpwZ0s2VEVRbGJEWlNld1JhSW1hbTQ1SkZpVjBzd2VtV3M5WEhvT0ZHbWh5WUlhWmdhQi9jbjZWQ2RDQjJ6Z2JqbXl0a0YwQm1zT1k2Mm9iRG1vbmQxd3BQVzFjMDQiLCJleHAiOjE3MzYwNzEyNDAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ZMkAzLt4wsNRzdj7nA6_2G1nIOGv4LeLww87M_VqIvA</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9b23302d-e9a2-472c-9cf7-d656ce461737"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="ee587ae7-69bf-4a0d-bb60-44796787aae9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="af68b6fb-fddf-4ea1-8232-ae0ac156a336"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>99999</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_XjSSl</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_XjSSl</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>2ac652e5-4379-4f73-8c76-6b45e0550626</con:value></con:property></con:properties></con:testCase><con:testCase id="a7b07785-d10d-468f-9923-f91847ffebe0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10 - To Verify, members list with blank userID and reference URI" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a6ea995a-5982-4870-9ad8-383e6d2042f4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJxbzJpUnE3SjM3SGI2MHROSHJIa0pUZkFuMXBGc1VFT25NRWNLZkZFcjBsOHZPL24vTHk4dnZKZlVXbG83cENsdk9TOGxod1pQbHFRSC8wc3I0RkxSTUlKOHo4WnM3NFBsaXpMdUpsM0N6bEdnYXNRRXk0NHVEQld5SG12ZDNKZXVmUytId0pmbGJhMmRpUkpVY1FPU1ZKY2FHL05McjhUK3RUdzFibzRSdVU5aDkxeTZ3VWZoTk1mNEw1cXlISVMiLCJleHAiOjE3MzYwNzEyNDQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.L1gJtZvXLyiX3_NjdwE56uAhwPos7T6QZjgV1d3tmmk</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b3194d3d-4ac3-41a0-9dc4-a1cdb82eb89a"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="1241317e-8c02-4394-abd6-43cf4d46b53d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("InvalidValueError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidValue")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3a7ad754-63c1-43d7-b06d-f55f67be0608"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value/></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_qqnX1</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_qqnX1</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>163</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="994f7fe9-f26e-4a95-91ee-ecc3d6763b5a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11 - To Verify, members list with permanent deleted userID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="22e7183e-a235-4307-88f9-750917cca0ab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ0RzJFODhiWHRNaVc2eU00OE15VEVPTHFpa3o2SThvRUtkMHRTeEViNzZsUzRZT2ZlVzQrUHhrWGJSOFRENG5NRm5JWHR2RWdjTDVZcjRNbjZzKzlvSnhyK1lIdlpyTStFcHpHdWxON3FJSk13N0ZLZS9WdEF2b0JNWEx0SjZsMCtuL0VjMzU4ZE9zcXg4Ym1sTFlOWm8zUVY1cGNsbjkvSmRNTVV6LytudFBwQjFHMDRDcnFEdkl5UmRkZ3Yzc0siLCJleHAiOjE3MzYwNzEyNDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.67mFJgmtSzgrPk5f8ppqTvhI0P-mzq4IjN90OIXH7Eo</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="03b36318-8af4-4321-88ad-ffcc48b23c51"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="bff88f99-c9cb-407f-a0b5-d91bbb3be3e3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ccfc1c1f-b07d-4dca-9d82-97e1bcf8a2c2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>02579465-1f2a-4615-885c-f8a0fee57fd4</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_WOT8K</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_WOT8K</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>dd39ba54-ad29-42db-8cbc-abafec8aa8c1</con:value></con:property></con:properties></con:testCase><con:testCase id="5c7c1c0d-5a43-4990-a0ba-27f104b01829" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12 - To Verify ErrorMessage/Status Code, when 'externalId' value is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9268ba6f-bf09-40d0-b75f-688fca191d94"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJjYTBjR25Rd25GNWVnc0g2K3E0dGZvdG5XTVBrdDJMK1YzRU9McTNlVlVoT0xFQjh3ZmlqTUpXU1hVZ2VXMDdZWjA4dEI0RTEwTC9Ob3FpejUyY2d0MlVtNnhoMHFnSCtOc3FrQlloYUF2RGY1K2hUNEtqRE03SmxDd3lOeTF6a3ZMcjBxZ1piTVBQZC9yak1EdXlyOTJYdUp5ejF6MUxkRG81OHRucmJ0bzVTOTlXYnplTEVIT0pITnBvQVJWTTIiLCJleHAiOjE3MzYwNzEyNTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.FSRV7G9PiocC-MjtXEQLMXMQsUNTitnsLL4UJjut1Vg</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1cc084d3-4905-4cfd-af15-f0a5846c9db2"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="652d0c9b-142b-48d2-bc55-a1392e6456c6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("ExternalIdMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8d0c27af-f884-4bd0-af50-79a58d13fb3a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_25749</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_haebr</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>1754</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_NVizZ</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_NVizZ</con:value></con:property></con:properties></con:testCase><con:testCase id="4ca01b4c-6ec5-4483-8ab5-36034647fb72" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13 - To Verify, blank members list in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2ac328bc-a23c-4d57-8194-a4b1e07ed9eb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrVko4bDJpYWVBTU9wejBWczNLcTJ1WmQ3L1hoODg2bC9Vb3N0WUF2RkVEdUIvZ0FRSW5ETHpnQnRBVHFoMU0zcEp6eGJPWGhKVDBrSzhGZWg5dFpjc2ZMakk1eDl4UHd2NzNaa2FJSDFuSjIwZE8rQmlaYXFuTjBxaE5mcmlXT2RQWTA3aHQybTcxWGVRRXJiZSt0ZVdUemFoSVlTb2F3YnY0SWw0K0JsZHc9IiwiZXhwIjoxNzM2MDcxMjU0LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.m0nHzRYj6P85qWiaqTxP8grQka2kqhYGY_DvQy_WG3g</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="98a9752d-8b4f-4890-9d17-4b6b9fec929d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="ccc0bf2c-02a8-4a8c-a199-813dc4c15417"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cd6db963-f7c6-497f-9fc3-a65ad6a5e604"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4059</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_1UG8G</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_1UG8G</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>051c518e-f1a4-44e6-8ba6-ddd0f6cc0c9e</con:value></con:property></con:properties></con:testCase><con:testCase id="503a0b56-1c28-44b8-86ce-bc6400c39764" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14 - To Verify, members list is 'null 'in request payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="edda9e43-78f4-41f4-948f-f676b67b66a5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJid1R5dkF4QlV5QlRrU09GUW5NaHpjTVVndzIzZkRJS1V6ejBCVmdOVkw0aUo2VWZKcHVvSFd3SlJzQnJIa001c0ttazFVN2dSbEJaYzV2MHNQTjZyY0N4TVlnWHkzNFpBUjZZcTNRQm5Pb2t0S3JUL1FoK1lpTnRJRUxHN2hjMzI0ci9RL1BwSGNucUNKTW5FR3VzRmNZbEdwK05saklXU0hJWTMzZzYwZWc9IiwiZXhwIjoxNzM2MDcxMjU2LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.aXrBcxA2TDv_z44t4tAT9yKsV48UZnrG-pRP2Bgyh0U</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0ed0b3c2-e3e0-42d4-93ca-7ebf857b55d3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="61fb8839-d933-48d6-b40a-6672995a2553"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":null  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="fae35d96-fec6-4a25-a67e-c23872647993"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4053</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_g8a0y</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_g8a0y</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>e8e3ccee-7b58-46cb-bc50-adbf099ae821</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="88fc3fea-a78d-45c4-b134-20685e225cc4" name="UpdateSCIMGroupByPUT TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d37bb135-0de0-4535-866e-9b0a2108bc64" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01 - To Verify Update single SCIM Group by name with same externalId" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="72ea916d-d39e-4727-8668-c332e1f0a551"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIrWjdNL3F1TFgwQVdxeGpSbEYvdzU0aE1DUEtESTE5SkhGNFNZVXRYUWRIWTNYM21McjB2Y05iUFNPSSsyMmlDNWloUzVQSVBjdU9kRWNNdzh2TTdOQjh3a1daMXhYZW1WY2o0NmZ2OVkvMEtZUmZ1anM5MndGemxPZmhzbGlnUnpCSDhqZFBHcGhYQ0JKUHNXNHFlWjIvdnJyUksxVlFYdmpmV0VVUkhmKzdQaVl3WURJZGh5ZnVrNVdRTHlQMmIiLCJleHAiOjE3MzYwNzEyOTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.8gYdJkoM5E6j-azVLshYvYfxfup0ib-U9kioBrVp_KQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bb9470ae-3700-443b-9a15-607200dc1e5d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("UpdatedgroupName", "UpdatedGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="08ae3dfd-8bfa-443b-a2d1-e9d3a154efa9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="427746dd-b331-44b5-86bc-9dd709efd230"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#UpdatedgroupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4b4e0303-cf49-4173-a46e-cc9a3e41f4dd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="34dc76c3-f5f2-4acf-a73f-0b547250b5e8"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_U7GTz</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_U7GTz</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>e1c85052-86c9-43d6-9b44-bb4b8e06aaf3</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4052</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>UpdatedGroup_U7GTz</con:value></con:property></con:properties></con:testCase><con:testCase id="af5291eb-32bf-436d-8529-252d37fe78a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02 - To Verify, update same group with different externalID" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="093f677f-5430-47fa-8dc5-71ddb373b792"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJXVk11UFU3MWJkOW5jdW52ZXBNZmM0djJNTGFVUytsc2RwcDk1UkE5cXdhVllQUC96N3cwd3greTVKaWtRMXpuZXhUenZ1L1B5N3lDazBYcXVQOUNSaVZOWHFzVjZLVXM0NXVQelBESnllemdWZy9rdjBXOTE0Rmw0RHJUcGJqVFJkLzZacG9LYkFyb0dJQ2ZjSGwxLzNBL25HOUdkU290NUpYRzM3WDcyWllGQVNiUHQ1K3Z0RVJGamxQWWNlcDgiLCJleHAiOjE3MzYwNzEyOTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.aC3zltUl84uskWq9LF7UyRMabw0xCV26Hh6GPs5fQA8</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c14dda3e-5078-455b-9daa-0b1a1f993192"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)

// Update group externalId
tC.setPropertyValue("UpdatedgroupExtId", "extId_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="e1baa5e8-8a16-4777-85da-47a61dd2b3b5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="6d70440e-6997-4a19-8afc-16f2cb686323"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#UpdatedgroupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[
    {
      "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="48342050-2847-4d19-8053-b140cf532e1e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("AttributeReadOnlyError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("ExternalIdReadOnlyError")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d92ffbbf-78ec-4917-8d7a-0b9eb62799c4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_HJ60q</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_HJ60q</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>cddf848e-8366-40c9-8ec1-70d54533d15d</con:value></con:property><con:property><con:name>UpdatedgroupExtId</con:name><con:value>extId_HJ60q</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>3234565</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="b52f86c2-d989-4fd1-bd36-32ae4ff2add7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03 - To Verify ErrorMessage/Status Code, when 'displayName' attribute is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="06863558-aefc-49a8-a97d-4b35413b1f9a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0K2ZTckQ0YW5mMnhpQWJBeXhhc2duT09SK2lUT2I4WmN5cGRrU1JFUnZZaXJYSk9SY2h1cm1LOU5keUJ6SXUvRFQwZlhqZU9sZ0M2YTkvNmY5RjVxcE9Qb1ExaUQvWUt2WEh3UVB2ZlRmN1FaeXVNcDYyaEFheE1BZmpOU3BycVpKZmkrcnZycThkOVNseHU0a05ETVNtWHdRcUp0ekNGc0pKTjhGcTRSeFVMdUFIVzc4eGNacTNJNExYRVgvM1AiLCJleHAiOjE3MzYwNzEyOTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Ks_obrMSklTsNVXN-kbPGbjZjtBIs8hE3yTO58V3hmQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4d7fb7ed-9735-4acc-b148-072bb317ccd5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="144cb24b-599f-4c20-8068-2c0c8962a548"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fd488aac-3b00-4d1b-bd2e-34014641227a" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="4582dadf-b594-4153-b50c-71d6eaeb6ce2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d1d68ca7-5381-4254-8720-0a0e4648ae62" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
def ActualErrorType = jsonObject.scimType
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("SyntaxError")
assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupNameMissing")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="47422636-3d08-4c41-9261-9cb87126f282"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_oNmM7</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_oNmM7</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>d5a96a8a-b8a0-4509-92ca-fbf11fba816c</con:value></con:property></con:properties></con:testCase><con:testCase id="596da8a5-0fd7-4e89-8d0f-deb9cbc002fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04 - To Verify ErrorMessage/Status Code, when 'externalId' attribte is missing in payload" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="a310ca70-3714-432d-b6c4-e535432953e1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRVG5KbFA4Tm43cUlsZVVHOFdoWDFGZ0NRNFpvM09vSEsxRVN2cTM0ejR4cVRCKzhaanJPbGx3Z1RoUUo5MGdCVC9HSCs3L1RKNXladzlHWUtyUlZmMk1NRkhDSEZxWnNRb1YxV1dodEZzVHFXMWtscmRmR3FLOC9PN0U2RmMwMUFkSUE5SGJEUVhOTGp5RHFWenVvSTBDTFQ1NEgxUDNtTkFrNXhJSTh3Vms9IiwiZXhwIjoxNzM2MDcxMzAyLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.2jfKyCCdQr6jhomYwx02aN07mEO9JyyVMGBtBoPQEdE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="31994759-9c01-4e51-8b7f-72d77c43c387"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="6720dd1d-c783-436f-896b-f5d86083e9b5"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="0600c791-c16a-4a38-be26-798adc321624"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d1d68ca7-5381-4254-8720-0a0e4648ae62" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the scimType error
//def ActualErrorType = jsonObject.scimType
//def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_TYPES"]
//def ExpectedErrorType = TC_PROP.getTestStepByName("Properties").getPropertyValue("mutability")
//assert ActualErrorType == ExpectedErrorType

//Verify the Response Message
//def ActualMessage = jsonObject.detail
//def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
//def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("GroupExternalIdMissing")
//assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0b058467-de93-4934-89f6-f067ef2ce20d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_rQ49f</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>a98a69c4-0661-42d0-bfef-9cbd04650f0d</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_rQ49f</con:value></con:property></con:properties></con:testCase><con:testCase id="3374e779-e05b-4027-ba3e-794cd52db241" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7459 - To Verify, Update Group with blank members list in request payload" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="35d0a6ec-799d-4e02-b858-7ca12b31817b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjROODEzNmdSamNZeXJXVGcwRDhpVlJZdHk3elhkNk5veXFnZzRnV0FhME0iLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDcxOTcyLCJleHAiOjE3MDMwNzU1NzIsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.Y7Mvw5R1hj_ZgFLL0sNBWErtYa0bIW7cH8r3cdyZSB3oRy__TxEWo2HgG7XK46CmPZkIjj15IVYwqOSZ7aC62HSS42raJG594dwpFUx57r-D67WqKrXhCy7GMjaqaNIPD-Pd5OO7kJtq0WH730x2iSg-O19URp6SiR682CUvCTESDqcWfBYskiKDa9eFH9solhY8ho9xpwD5ARSQNzrtiqoqbVyBN0K4GE55us1QnNuMv_TCiogR2mujFVQaOHCP3hqQlhj4FUI2WnEsA0cNDCakK3Eu6N190P5mnCSS5E2ygi5ZhNPLjTjn_U1xp7xx6kZIgFDgs118X1zKF4KhyQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="220acb30-8017-4d09-ac6f-04ce944cbbe5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="1fb11362-5597-4b06-a165-843bf29dfafa"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }] 
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="fa1f8483-a057-41e2-927d-bb4eabb05969"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId != ''
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f0b7a3d4-cbc5-4c6b-b59b-922807517dd4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4058</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_v4wti</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_v4wti</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>9ebcdf35-3034-40f8-b4f6-8d59d1fd5c29</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="1c45f08e-436a-4198-93aa-7c0b87195dbc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7460 - To Verify, Update Group when members list is 'null 'in request payload" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="ee59146c-aea3-4cca-8789-d1b2a03e2331"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULmNWUmNoeU9wS056eGxaOXJST25jU0JPajJzNkJ4eE4zT0gyT1dEbkh3SW8iLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDc0MTMwLCJleHAiOjE3MDMwNzc3MzAsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.Y1b9_qQgK2BsOVoWbgH9_PJZpvCZ8P6pvnVjBh61IO7SNpMiTzf_JymUByVaZdYlx4uQlOld0Zf0FRjV9W61W3Yt1ENo0Af4A8linXOsoOI0U5URC0HYQsv5efCr16DYTVag3C4pV70krm1pD1GaLQdmVXnM7wruqhS6uuqSV7m8re55N7K5jQuTTpOPdn2Xi2Xm4Q2N6-mEDp6FA47EP5bBaLxDDg0gdRvZSKNKEVpMzVX0cR_UK4p7c9QJe2np6cjoBL9rZxuUyEu3PAJsQQ67vkvPhSjC1Z_dtp9IKa-H8rl0No7avF3GVkzMo6t5xf2LBJOUydDNNYgKiMq22g</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="3a52203f-1e93-4ab3-a137-c10025bf5612"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="506d8633-e026-4dc6-93fa-88d9e6eb90f8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="b125b490-ad61-4ed9-a57e-e9fd265192c8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":null
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId != ''


//Verify member ID is updated
//def ActualUserId = jsonObject.members[0].value
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//assert ActualUserId==ExpectedUserId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="171f7ac7-611b-4d3a-b1bf-b69a5b9e91bd"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4053</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_kxdct</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_kxdct</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>7fb21d08-7873-461b-96de-26f34f2e1383</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="034b11e2-ae58-4f82-8c39-4794458e0ad2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7461 -To Verify, Update members list with multiple userID and reference URIs" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="55224485-1e48-47a4-81bd-2ecc02f26a43"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULm52MW9aZjNBeVl2Z25QU2hSem81N3BrTUVvM2lVUlkzVVMxdHNzQ01PSFkiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDc0MTY1LCJleHAiOjE3MDMwNzc3NjUsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.PxGkie4n3355U3gufJ68NtiSdf6uzPswZ9gzyRfsX4jBzWdickIKLhfGuZWWBC0OyV0o_6lVggdyYTo2XCn8y5akFWWTvGhgS83s5tidb2vDEFLtE6hY03vH_duj_wiUvPgF8ir6XlPoBh20wOIYyWKmaNP9y1qjS5cmwBbf2tILPs0oqG8gZXcYzz35OatcSpRsQRiRpPq4OawiZmrTGw6CRPdagEUzTIoqUDsjuMK68Or802xqAOPXa2yUIff-0EgE5YnUw2kEev3cz8ioKKXambYp6Ui4yPxKBowSpZsNw7smisfKTMDe_GWB00iiBOp7ykoU8CpMEMR1ew0ppg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8a85ce40-a965-4faa-be5a-959ea9e8b717"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="33a6eb4e-0dfe-4a51-81dc-ae358508a1dd"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    },
    {
        "value":"${#TestCase#internalUserId1}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId1}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="d7a33a2c-3a9f-49d3-9a61-48d2f45c9cfc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
	  
    },
    {
        "value":"${#TestCase#internalUserId1}"
	 
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null


//Verify member ID is updated
//Get size of members list
//def membersListSize = jsonObject.members.size
//log.info membersListSize
//
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//def ExpectedUserId1 = context.testCase.getPropertyValue("InternalUserId1")
//for(int i=0;i&lt;membersListSize;i++){
//	def memberIds = (jsonObject.members[i].value)
//	if(memberIds.contains(ExpectedUserId)){
//		log.info "Member is found in response"
//		continue;
//	}
//	if(memberIds.contains(ExpectedUserId1)){
//		log.info "Member is found in response"
//		break;
//	}
//	else{
//		log.fail("Member Id not found in response")
//	}
//}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d57d59c4-4bad-4f13-afc5-6568bb13357e"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4059</con:value></con:property><con:property><con:name>internalUserId1</con:name><con:value>4058</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_NjMK7</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_NjMK7</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>0a5e61f1-560c-499b-885a-4fda3caa66d5</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="2903e3fd-4008-4ad6-bad2-02d812b4a2ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7462 -To Verify, Update Group when members list is missing in request payload" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="74b8bf8a-2b92-49ad-a741-b7ab230ec6c7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjc1WkJVNTdhU2FOdWktcUtFSUI4eC1LNjMyb2d2QVlmUV8wZ2ZZdHF1cm8iLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDc0MTk3LCJleHAiOjE3MDMwNzc3OTcsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.Y6OTBVlgDU7U6EgCZTvRckrIWnzsSwkzMSNKuRPCU-RI_OXcD7OkCL9BTYSVw0_5_uJRwqzyaa0UvQyfWcvZzHqvUEgYFe9TVsoqENFs73OEuIQ5rwlrNA_ahDsmKhMwWy-yp4Ki6HtAW9wCwTW_AMVBF1dB6XSqOneIocevhf16MfBrLt0bLNb_IN-46UmROeVYAHCo9-K66qrYwOhOoZjIL1DgWRQnolMZnlrC1uxYude0EXgg8fgZTz57P25FAj2N73tikvARdrRlJbtdBrU6lTdIE5cblRY-7iurX0P21KRweT_A9LLBkKZF_yMcoajUAO-4lB8nn-781q231A</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c2aa736b-cd0c-4407-97d1-d8017a1af56f"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2da8e604-4034-46a0-8620-cb412f961544"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="0e81ca35-226c-401c-be71-b2577057f31c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null
assert ActualId != ''


//Verify member ID is updated
//def ActualUserId = jsonObject.members[0].value
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//assert ActualUserId==ExpectedUserId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9c2650cc-39b4-4faa-989f-7706bb8b2694"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4051</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_hlyHX</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_hlyHX</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>bea2e2f1-3a2f-4692-91ab-864795b455a1</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property></con:properties></con:testCase><con:testCase id="307b738d-ccc6-42b2-afa3-15af72a8d621" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7700 -To Verify, when same member is added to group" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d56e01b7-13ee-47df-a334-63c973a54be2"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULldrWWRsT3BKa0MzeVAtdTY1RU5Dd19ob3NRd1FCNGc0VzBFUWVLS1NfMmsiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDc0MjI0LCJleHAiOjE3MDMwNzc4MjQsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.TiNrQdEEsfsX1UKc6Jq-EdkiP_JlFp7tJIowTJ9zM8IYp5t9QEKiPmmuZizTj-2kuGQIkh79yGJs4WJ-P_A9FoBQMEEB6AVC1dN6aghMtFcRV077IdpspOph1gZzKuhlpa0G2_LuKrhhsS1HQ_DCD0DWo4AFUKjlb8pjMsIFAnzwuIxEXn9EsC6B2QqzU5PCLLXJJHwF2PMftFtgPj16JAvRhKdlV5yvbFPqS9kaSo-MPkRmo8-b0O4QbH5Fh0IyeAuhakMGf_rup2jiqYVzsF2Z5Uq6q_qBdZheSbMP92LwbwIBPd_bUc0cGoJW8DWIsE0WeMPefCreqRCQLNs00w</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="d7ba2098-f0a6-4da5-b045-ecf7172b6f9b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="4b381a33-3dba-4736-8931-4380351f1dc8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="15b1e3d6-44bb-4f39-b63d-971ecb9045c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    },
    {
        "value":"${#TestCase#internalUserId}",
	   "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="af6a1bfe-fe2c-4058-906e-b966726405ef" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null
assert gName != ''

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null


//Verify member ID is updated
//Get size of members list
//def membersListSize = jsonObject.members.size
//log.info membersListSize
//
//def ExpectedUserId = context.testCase.getPropertyValue("InternalUserId")
//def ExpectedUserId1 = context.testCase.getPropertyValue("InternalUserId1")
//for(int i=0;i&lt;membersListSize;i++){
//	def memberIds = (jsonObject.members[i].value)
//	if(memberIds.contains(ExpectedUserId)){
//		log.info "Member is found in response"
//		continue;
//	}
//	if(memberIds.contains(ExpectedUserId1)){
//		log.info "Member is found in response"
//		break;
//	}
//	else{
//		log.fail("Member Id not found in response")
//	}
//}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="16638ac9-6e56-4002-867a-365eb52ab403"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 </con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4059</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_fs83M</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_fs83M</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>20103d89-34ed-4dc5-bb96-2d6652e20639</con:value></con:property></con:properties></con:testCase><con:testCase id="b49ba2b1-3b02-4454-9980-d03a45a4711e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05 - To Verify members list with invalid userID and reference URI" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8d4b8d52-6421-402a-9c8f-998d355594bb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULkVjb2syQmlvbkF3RDcwWlhTR0pBN2tYb1hYWGs4dVFBZ2VhektUS3JZSUUiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDc0MzMwLCJleHAiOjE3MDMwNzc5MzAsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.KAdih6EFS7cgtnyydPp_8KHBa3Up6j1DvInT_Htn09S3ePBQjeSp5t6zPNfyQwkB39j1BwZOmYeV2O6tgBEakf0_mMR6Y3vzct6yU3g_cvPf5FUo5eHOqfkCwgNtZSshnE1oOhWHU7LeOVIeCaBMmE1Wn0sWabQ7j8SxTvhco8JxOg3nzz2g98PXSrl7_ozTjCipQcZTVDdNcmB9Wl3ZSkHm28sf4bUsGA0kVEqIVc32L0J9r5CjhYtCJSpA2TYfW7E6VMkjE99V-tGcAIHE67yt3jDdX6jJWMLd4z99jdJ7jQi9_01P2LKeQEkQ3MM2XbXsZbP3c9Uhq-rEhfCHEQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="8fe9d7c0-1aff-4d91-8657-56f88955fdcd"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("internalUserId", "extId_"+ randomGen)


</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="ec42ea17-4b0f-46b7-9fe7-b9937b481217"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="5e3479f1-f779-4a9c-baf2-cc9551591591"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[
    {
      "value":"${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d1d68ca7-5381-4254-8720-0a0e4648ae62" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the Response Message
//def ActualMessage = jsonObject.detail
//def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
//def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidValue")
//assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5dde8b17-6908-4f4e-83a9-e20af9f783d4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_MZcYs</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_MZcYs</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>22bc235b-f437-403d-8c4e-b8e4b7f6bcb6</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>extId_MZcYs</con:value></con:property></con:properties></con:testCase><con:testCase id="36744e55-0123-4109-8191-50817ab3b1c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7711- To Verify, members list with permanent deleted userID and reference URI" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="8d342496-81e5-4a66-8583-20424bb94687"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjRQUmJqQ0xKczlqWTlKc2xuMXNBTWdFdkZXYm9FXzJRMUgxOTRseTFoZm8iLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDc1MDY1LCJleHAiOjE3MDMwNzg2NjUsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.oKtsyH22TfjcXXVXt_miWXisT75t2m-DVgyWzCI6WC5Errpn48UZDp5Kby2pH7ypob6PaD4ub8uIUFh0JU4QIx6-bmbyDkwJ5o8sTXaNV9jK8_MuGdbxNcE5eIhLAY0njyGiEktfO4UQ3RkmVRZq106y3WsfmztMEU_JISiCbWWvy3KywB9DfW37tC721XM2XGTNCphFwRFWeiRJdQGeb_R87aEB8CZS4NTAtEHMralmecT6Uvlg0owIebqNSaLARnj5Lh0WhDLnEGp-WBOrVtnXz5pYE2b447-o_TPu8PPvE4-sRwuwQeCt4fW1N26u6fNhgFfydB2mGlJFVafPMg</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="917f5fdf-f753-4c5f-908a-4b57e36f55a0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="cba4b1d8-86f3-47ea-af58-1fd639149ac8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8090cb1e-7637-44df-9bc1-e2b4eb8628c7" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="714324b8-e8ad-498d-901c-c4f8277f8770"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[
    {  
    	"value":"${#TestCase#internalUserId}",  
	 "$ref":"${#Project#customDomainURI}/scim/${#TestCase#USER_RESOURCE}/${#TestCase#internalUserId}"
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="48342050-2847-4d19-8053-b140cf532e1e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidValue")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="2247b36c-8ea4-4caf-967a-c28cee7dea38"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>342</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_xN2C0</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_xN2C0</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>66b30f15-2b27-4f10-8343-5879598e815a</con:value></con:property></con:properties></con:testCase><con:testCase id="283df8d0-e7e1-46ad-ac30-bb00a43031d9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7712 - To Verify, members list with only userID" searchProperties="true" disabled="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="035ea175-02a4-41e5-88a9-1d1468f239cf"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>b6a33d84-1192-4709-9869-f5e7c3c7eb97</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJraWQiOiJuZ3lLUFUtMHRnWWpERkhfLWh6X0xQUWRoNl81VWo2YTRPMTJMcjQxMzJrIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULktkUkxNUXN1RUgyRVpsdTBOTTRzaWdWU0hnQ1JwRHp6a19zN2UycWxOSWsiLCJpc3MiOiJodHRwczovL2xvZ2lucHJldmlldy5pb2ZmaWNlY29ubmVjdC5jb20vb2F1dGgyL2F1czY4NmtrMmo1YUZseUd5MWQ3IiwiYXVkIjoiaHR0cHM6Ly93d3cuZXB0dXJhLmNvbSIsInN1YiI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3IiwiaWF0IjoxNzAzMDc1MTIwLCJleHAiOjE3MDMwNzg3MjAsImNpZCI6IjBvYWF4NzhvNWw3ZjFwNjd1MWQ3Iiwic2NwIjpbInNlcnZpY2UiXSwidGVuYW50X2lkIjoiMGYyZTZiNmEtYzM1Yy00MWFhLTliNjctNDI3YjYwOWIyMWJhIiwicGxhdGZvcm1fbmFtZXNwYWNlIjoiZXB0dXJhLXFhIiwicm9sZXMiOltdLCJwbGF0Zm9ybV9kb21haW4iOiJpb2ZmaWNlY29ubmVjdC5kZXYiLCJwbGF0Zm9ybV9lbnYiOiJxYSJ9.GzuuoI2cX70mXbhS_EUwJLUnDMCQZrph0aglVVVracLG90uYXmAssFuK3JQAtWY3D0P2QDn4EeV9Ra9IEXWsII10LDkUac8c8W_P3i-aZpq19YtF4MPoVva6iRVw2HbGLrX1M6vhyEoRgGO-s9DD5meMX8YvysJa5lsH8ddB3uzZd-lZmiNlBD9AAzGBvgRQB8jLAzIUx6YRnFX-TP-jHG64lkBptqf2b3kQ0z4_ufesDJncJdUK8oC2Mxq2tOkD5V90lr9R5ISqpda4LNUYTVWibXMF9HE-THOAIrHrgAEp2FxnjDFXT5tuS0nROJv1j6SkxsHf_xeTyL9JuMxArQ</con:value></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="ec983f9e-53d6-4ef0-83ad-7bbba3cadc00"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="15b48145-122b-402e-bc3f-2e844b28db0d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="4d7eb272-123f-4bd2-8dc7-9e53c361b855"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}",
	   
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="4b4e0303-cf49-4173-a46e-cc9a3e41f4dd" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="20c23638-ea13-477b-a0f3-b686ef664ced"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 </con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_ARaQM</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_ARaQM</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>7f899ba3-8783-406a-a3db-7d0aa9f01e29</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>4055</con:value></con:property></con:properties></con:testCase><con:testCase id="718b58a0-0f72-4b82-bd25-09cb0a92865e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-10932 - PUT Group | Verify that user is able to update group containing 'and' in display name &amp; matched in DB" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="DRIVER_SCRIPT" id="1076412d-c249-46f3-b83f-913b0f79a0dc"><con:settings/><con:config><script>import groovy.sql.Sql
import java.util.*
import org.apache.commons.lang.RandomStringUtils;
import com.eviware.soapui.support.types.StringToStringMap
def tC = testRunner.testCase
def tP = tC.testSuite.project
def run = testRunner

//def DB_FLAG = tP.getPropertyValue("DB_VALIDAION_FLAG")
//
//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
//// Azure db to db details
//def dbDriver = tP.getPropertyValue("DB_DRIVER")
//def dbString = tP.getPropertyValue("DB_STRING")
//def dbUser = 	tP.getPropertyValue("DB_USER")
//def dbPass = 	tP.getPropertyValue("DB_PASSWORD")
////Connection String
//def sql;
////log.info dbString
//if(DB_FLAG=='TRUE'||DB_FLAG=='true'){
//try{
//	sql = Sql.newInstance(dbString, dbUser, dbPass, dbDriver)
//	log.info ("[STEP - CREATE_GROUP] - INFO : DB Connection Success")
//
//// firing a query for InternalUserId
//def  count = sql.rows("select top 10 * from tblUser where accountActive in (0,1) or accountsuspended in(0,1)")
//// Assign list of pkUserID into a variable
//def list =  count.pkUserID
//// Pick random pkUserID from list
//Random rnd = new Random()
//for (i=0; i&lt;list.size(); i++) {
//   def userId = (list[rnd.nextInt(list.size)])
//   context.testCase.setPropertyValue("internalUserId",userId.toString())
//}	
//	}catch(Exception e){
//	
//	testRunner.fail("[STEP - CREATE_GROUP] - ERROR : DB Connection Failed")
//	log.error "[STEP - CREATE_GROUP] - ERROR : "+e.getMessage()
//
//}
//}
testRunner.runTestStepByName("GENERATE_TOKEN")

def headers = new StringToStringMap()
def TOKEN_ID = tC.testSuite.project.getPropertyValue("ACCESS_TOKEN")

headers.put("Authorization", "Bearer "+TOKEN_ID)
tC.getTestStepByName("CREATE_GROUP").testRequest.setRequestHeaders(headers)
tC.getTestStepByName("UPDATE_GROUP").testRequest.setRequestHeaders(headers)

// SCIM Create Group Data
String extId = RandomStringUtils.randomNumeric(6);
tC.setPropertyValue("groupExtId", "extId_"+extId)

String gName = RandomStringUtils.randomAlphabetic(6);
tC.setPropertyValue("groupName", "TestDisplay_"+gName.toUpperCase())

testRunner.runTestStepByName("CREATE_GROUP")

// Update group externalId
String newextId = RandomStringUtils.randomNumeric(6);
tC.setPropertyValue("groupExtId", "extId_"+newextId)

testRunner.runTestStepByName("UPDATE_GROUP")
testRunner.gotoStepByName("END")</script></con:config></con:testStep><con:testStep type="calltestcase" name="GENERATE_TOKEN" id="0e894ae0-d10c-4e48-9cb9-2f974ddf4dcb"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>5f220af4-672c-4b40-9956-97149fbc4a40</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MDM1NjU4NjIsImV4cCI6MTkxOTEzNTM4MiwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiIzYjU1MzNlZGJlMTA0NTU0YjFkZTFjZWIwM2Y0ZGJjNyJ9.MqF7HaJb5d6Gb8MPinV3gGyHb2MEL5w4Q4vRbGpDiYk</con:value></con:property></con:properties><con:returnProperties><con:entry>TOKEN</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="47821ed5-cc59-476f-8594-933b85cfb5e1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzY0NDA1NTgsImV4cCI6MTY3NjUyNjk1OCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJlZjY1YTliMGRlNjE0ZDc2YjkwYmMyNjRmNGQ4NDM5NiJ9.ckYbqkZaxQoEd4q2YybnrpBDnc8-IRot1RtxHpRgoquJ8UdFEZjMXekHqAQAz2TASF_e4tnZBpfJXzRIaHJiww" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP" id="dbb935dd-90f2-469a-92e8-985f47baf63a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NzY0NDA1NTgsImV4cCI6MTY3NjUyNjk1OCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJlZjY1YTliMGRlNjE0ZDc2YjkwYmMyNjRmNGQ4NDM5NiJ9.ckYbqkZaxQoEd4q2YybnrpBDnc8-IRot1RtxHpRgoquJ8UdFEZjMXekHqAQAz2TASF_e4tnZBpfJXzRIaHJiww" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
     
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="48342050-2847-4d19-8053-b140cf532e1e" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the Response Message
def ActualMessage = jsonObject.detail
def TC_PROP1 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["RESPONSE_MESSAGES"]
def ExpectedMessage = TC_PROP1.getTestStepByName("Properties").getPropertyValue("InvalidValue")
assert ActualMessage == ExpectedMessage

//Verify the Error Schemas
def ActualErrorSchema = jsonObject.schemas[0]
def TC_PROP2 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["SCIM_ERROR_SCHEMAS"]
def ExpectedErrorSchema = TC_PROP2.getTestStepByName("Properties").getPropertyValue("GenericError")
assert ActualErrorSchema == ExpectedErrorSchema

// Verify the Status Code
def TC_PROP3 = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP3.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value=""/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f1663b90-8460-45d1-9995-3f313e2bc24a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 </con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_849644</con:value></con:property><con:property><con:name>groupName</con:name><con:value>TestDisplay_TENKVG</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>g1422</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>30</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="de971150-ec1a-4c71-8397-206c784fe03e" name="UpdateSCIMGroupByPATCH TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6f125337-ae3b-42c2-8aa2-f25548d7b8b7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify, 'Replace' single SCIM Group by name with 'Add' and 'Remove' members" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="14fc40f4-2e36-4ea4-97a6-251443dda167"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI0ekFvSHRrWmtWbC85MG50WjdIZXNESjhxWDFUSlBpc2d6WC9FSHlESjM2aUFlMnVnYTBqNTdDVXpWZU1BYVJIcGZtZm40NTVtVFFaZlhMNytmVURTS0I5VGU4cEJreWZsSXNheWFyN2dxWmZXdEsvYTZveXZSNGNXQXRZZEVUZG1CSE1iaEl5Lzg3elV5SEJPMUIxcUdiQVpMUDZyZkt2VXpPeEg5NkY0LzE5YnhVa2pCSG1CNG9sR2FybkEzWVkiLCJleHAiOjE3MzYwNzEzMTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._cUq-WFXkowbCRRmsY2i1oGeEsBOvQKesNbZjHTXELE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c7173db5-cd13-480b-b6bb-3dca6b7fa8be"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("UpdatedgroupName", "UpdatedGroup_"+randomGen)

// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

// SCIM Create Second User Data
tC.setPropertyValue("userExtId1", "extId2_"+randomGen)
tC.setPropertyValue("userName1", "scim2_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="91a0e02a-976e-4ed9-b103-9a412a8be3fb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER1" id="af99cb4c-adae-4da0-aca5-821213305a2b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId1}", 
        "userName": "${#TestCase#userName1}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId1")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId1", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="77563f27-5e37-44e8-8245-4bb80ff042e9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   ,
    "members": [
        {
            "value": "${#TestCase#internalUserId}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP_BY_PATCH" id="0de66faf-f85f-4439-b39f-09ef57b70224"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP_BY_PATCH" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "members",
      "value": [{
      	"value":"${#TestCase#internalUserId1}"
      	}
      	]
    },
    {
      "op": "remove",
      "path": "members[\"value\" eq \"${#TestCase#internalUserId}\"]"
    },
    {
      "op": "replace",
      "path": "displayName",
      "value": "${#TestCase#UpdatedgroupName}"
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="94be91ad-7a84-431c-94a6-9caf42b28529" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1071de4b-ec3b-420f-9bc0-b7d3784506e2"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>6bac7384-a8fa-4130-9211-0c86189219ca</con:value></con:property><con:property><con:name>internalUserId1</con:name><con:value>359ec097-b3b8-4743-ba8b-f6e3785cba1b</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_T6ryi</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_T6ryi</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>e56270bb-22bb-4cf6-bfa5-b15460d617c4</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>UpdatedGroup_T6ryi</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_T6ryi</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_T6ryi</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>userExtId1</con:name><con:value>extId2_T6ryi</con:value></con:property><con:property><con:name>userName1</con:name><con:value>scim2_T6ryi</con:value></con:property></con:properties></con:testCase><con:testCase id="e1b85693-1aad-4dbc-937a-6a0a5c44045f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To Verify, Update group with 'Replace' operation without giving path" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3af32044-2f42-48bd-a4f2-8f12e04c5303"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJqZFRVSVpFT1ExRHdJSEtCaHprVVZrejdBWEtFc2VMc2xIeFdMUE5hMjZNcG95WEZkVXpDZXl0QXp4Zzc2eThTM1o4MFRHaFBMdXVXeFlBVk5MVWF5M1RobzNjSnoweVlKQ2tqaHBtbGFMOUJvVURqb0g5djhubmZOVkV3UlF4WWI0NmIzZUpTM3E1RkdXRFJHOVZ6MXEzVW9oaHRYZE5yN3UzWUJZYW9yN3V6MzJRRU5GRzdZZnVRN0JId2xZQXkiLCJleHAiOjE3MzYwNzEzMjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ApW0MZN3Ufct8vT-BKNKVIxr0EJJVeSZdjlBxNouyOU</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="e1212677-baa6-4376-be0d-fad6047a7e96"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
tC.setPropertyValue("UpdatedgroupName", "UpdatedGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="dcfb4b9d-1faf-4b53-9943-5e0fa3cd285e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c5c64079-6a84-4ec5-9032-aebc66d4d517" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP_BY_PATCH" id="ba7a14c8-4abf-424a-a4b6-154dcd59fb3b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP_BY_PATCH" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [ 
    {
      "op": "replace",
      "value": {
      	"displayName":"${#TestCase#UpdatedgroupName}"
      	}
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="94be91ad-7a84-431c-94a6-9caf42b28529" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1c67d14a-2ee7-4f5e-a9d8-15f7fc47b063"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>31</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_w7HH8</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_w7HH8</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>297003ed-f1b2-4466-9667-c1c5ebd78a36</con:value></con:property><con:property><con:name>UpdatedgroupName</con:name><con:value>UpdatedGroup_w7HH8</con:value></con:property></con:properties></con:testCase><con:testCase id="7a29f539-1581-4438-98d8-e7e1e4d6d867" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify, add member again, who is already part of group" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="82e6ead0-169e-4fda-a182-d66675ce4d8a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKODZOT1RUYUxWQnNvSGZpeFZjUVdpMnVpVDFpVlBLZmIyMG9hc1ZZMGY5MGdmWlJyNTZNRVc0WG5SUVIzLzJiRjZsd2w5V2Jta0NzcXE1Zzk0TmJMZUlyMStFZlBsRmxNdVlheU9Oeit3N3FsYXhZMFR4NkIyalFrZEJHc3JxeS9UWXdkZmhrNjZHRjVlS2t6c1gzak03UjVFTWorcWE3TFgrYWRJY0xUTzJJRWRMTWxuTldkdFRmaTJpRlVsTkMiLCJleHAiOjE3MzYwNzEzMjgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.WPU-oxbMXnYcVY7JHgfEGhuk4OxGLIfhiAWOKfJ-xEc</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="541a0831-ef31-4b46-823f-463584251636"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)


// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="1718601f-0272-4aaf-9da8-3c16a2b7287a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
    	  }],
    "phoneNumbers": [
        {
        "primary": true,
        "type": "work",
        "value": "968003519"
    } ,{
            "primary": false,
            "type": "Mobile",
            "value": "9916616577"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "${#TestCase#Language}",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "${#TestCase#Department}",
        "costCenter": "${#TestCase#costCenter}"
    }    
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter
//
//Verify the Language for User
def ActualLanguage = jsonObject.preferredLanguage
def ExpectedLanguage = context.testCase.getPropertyValue("Language")
assert ActualLanguage == ExpectedLanguage
log.info ActualLanguage

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="7e8ef8d6-2f78-46df-bd2a-30095c97ca95"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    },
    "members":[{
        "value":"${#TestCase#internalUserId}"
	  
    }]  
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fc32e808-ec8d-45d5-9928-de47ea111023" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def GroupLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify userName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="UPDATE_GROUP_BY_PATCH" id="b169a9c1-bff0-4c25-a612-97e4ab09a121"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="PATCH" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="UPDATE_GROUP_BY_PATCH" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
  "schemas": [
    "urn:ietf:params:scim:api:messages:2.0:PatchOp"
  ],
  "Operations": [
    {
      "op": "add",
      "path": "members",
      "value": [{
      	"value":"${#TestCase#internalUserId}"
      	}]
    }
  ]
}    </con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="94be91ad-7a84-431c-94a6-9caf42b28529" name="Script Assertion"><con:configuration><scriptText>// Verify blank response
assert messageExchange.hasResponse()==false

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="07f2b923-f6fa-4846-b4ba-37e7518a1d8a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))
 tC.setPropertyValue("USER_RESOURCE", testStep.getPropertyValue("USER_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>0190fc8d-6b40-41c6-b218-99b6b0d29603</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_gP9LH</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_gP9LH</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>ba10cf3b-1152-4029-817d-498fafa8a8eb</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_gP9LH</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_gP9LH</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="7b4237a0-94b0-499e-b032-07d9a5bb74f7" name="GetGroupById Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="2adef0b8-5c20-4df8-9279-dc7d2ed7387f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify that group details are fetched correctly" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d2d47bcb-efc0-4e47-bd93-997fd74353e1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ3MWJMbndIKytjWFJXUHE2amV0ejdjNkNlZ204Q0VzaVJLZDFYR2ZLZlJwaUlEbUZSd2RlaG14K2hURW8vbnQxbVlQT2JlbmFwUGVmdEpNTUNIVnBZdnFka0pXQno4NjNvY1pSbkJHc0kxTDVUMEdoNS81R3JRaUVEMHI5OVUvQy9aM3JlRnNoTW45cGJQMWsvdGY5aGRkcTViaWF3b1hpay83WjJza25pMnVrQlNYVFlENHBxOFoySTZ3M2NpRlYiLCJleHAiOjE3MzYwNzEzMzksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.rmR6LIhtM-M35xPGIvm9lZafvQ-u_OvYQlPEbphpiyA</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="82d285ca-1cb5-48e7-8d8e-de1e7a7c5e0e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("displayName", "scimGroup_"+randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="03c63ae2-4970-43cd-8db1-f0c668ba2763"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#displayName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="e878cc74-f88b-447e-ada7-bade03888ff9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the Group Metadata
def resType = jsonObject.meta.resourceType
def groupLocation = jsonObject.meta.location
assert groupLocation != null
def groupCreated = jsonObject.meta.created
assert groupCreated == null
//def groupMembers = jsonObject.member
//assert groupMembers != null
assert resType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null

def ActualinternalGroupId = jsonObject.id
def ExpectedGroupId = context.testCase.getPropertyValue("internalGroupId")
assert ActualinternalGroupId == ExpectedGroupId

def ActualinternalGroupName = jsonObject.displayName
def ExpectedGroupName = context.testCase.getPropertyValue("displayName")
assert ActualinternalGroupName == ExpectedGroupName

def ActualExId = jsonObject.externalId
def ExpectedExId = context.testCase.getPropertyValue("groupExtId")
assert ActualExId == ExpectedExId


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1dab24bc-a476-4896-86c3-ec2ad7fa0eb7"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_K0k6i</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>b6a67de1-9030-44aa-8450-f2a5c2813fc6</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup_K0k6i</con:value></con:property></con:properties></con:testCase><con:testCase id="d75de622-6cc7-4203-809d-4cfcc5ea2d0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-Verify 404 status code when invalid group id is given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="49ccf6fa-994b-4886-99f0-bfaae5b72e7c"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJIZDB4dWIvVXhkUldIZm0vSkp2U2ZLeHNOZ1JKeDZESXFzdzJ3Y1ppRk5LU3pweDNDNk1VN212ZUdxZE9FWVlGNmYxZnA5S0tLZzNXS0htUkZ5elJXUVhPaGV3TUhXUzdjZDZuMDFCeVN2cmg0SG5MbjJIMWZTRDVlZTFWTk81elJQNitNTWlMK2U1UjFZTENBYTlKZVBsN2Jnc1RpeklSa1BTZWFoVHpLMnNhYjQ4RDVnQWR2OGtXQlVVMHZmMG8iLCJleHAiOjE3MzYwNzEzNDMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pAn7ryPW2NLNqQTXQ4Q0tj7kzWZuKZzYjjDQZcagAf0</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c68ad28a-805a-47ca-b17f-d78c860b87f3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)

tC.setPropertyValue("internalGroupId", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="0b9c6cf4-dbcc-44fc-93bd-45c523dbf375"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 404

def responsedetail = jsonObject.detail
assert responsedetail != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="0336f44e-0f2b-4e31-9583-cae5f09cb411"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup_4ByiU</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>JiwrcauQ</con:value></con:property></con:properties></con:testCase><con:testCase id="dd5af4d7-da6c-4798-93c4-8121da190879" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-Verify that Permanently deleted group is not part of response" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="857ad473-45b0-4ea2-a8f5-487bee3e17f5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI4MVd5WExWamlyZVlZQXI1QzZpU1MzMFVYN3dIVFh0NUhXSE8xcDJNNVpHRW1oeHd3d3dPMm5FWDJkM1FXOGQ2em1CQTJuS3dDQm1oSi9GaVkwOUhUWW9qWWZjVlUwREUzak5COWVzaWZOQWNscEFORFdwK0NpQ0tpTVNpVkJDa0laQ2hSb2pZamdhVlgvcFl6S2h0OTZMQm5KaTJ2NGJkbHFVcE9DSk1hVEtwTGxEbnlQaU1tUDVKUUpjVmt6WTciLCJleHAiOjE3MzYwNzEzNDcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Ca7JcrqdqzKM2iX-P70Hye1ETWfjZ5hn3Zg5BUWd1N8</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a1aa150f-f9a6-4a63-a035-82e6b6c7cd43"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(8)


// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("displayName", "scimGroup_"+randomGen)
tC.setPropertyValue("internalGroupId", randomGen)</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="9c0e8ca8-1a51-4c4e-9b95-4c2b635adfb9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#displayName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="5e36f9fa-70a9-499a-9ea6-65d6bd2f7d3a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="c3785542-4824-419d-927e-e07abf4a12d2"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 404

def responsedetail = jsonObject.detail
responsedetail != null



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id[0]
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a902888f-40f0-4da2-b407-78f96dc698bc"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup_SDFyeFbU</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>f373c29a-05bf-43ff-83b0-5474eb81bb86</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_SDFyeFbU</con:value></con:property><con:property><con:name>active</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="bd013558-0e9a-4eb1-8853-889d72461231" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To verify 401 status code when expired token is given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="198ad9de-1932-4db7-9156-a6c39415070f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJlVXUweDVaNHJkZ1luK1lPR0diQ0N2YXBQc0NCQVdqMEUvS3A1MDhTZXZNQkhlOU1CaDJGdzhPWjVON3h2L2JsaG9YOUxpdEJVaVNIdTFKTkhDY1l0a1p0VWtOV1ZQWFlZUXJZM1FTM0QySTZZOW9nTXdPazcyN1pTSUg0RDVsZ2M5ZGpBWWdxNjc2M2wvbFFha2xTWnhXNEZuT05KSHFnajNSa0tNQWRUZGJDSGVBY0NhWWx3NFNRUzdPV0U3azgiLCJleHAiOjE3MzYwNzQ2NDEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.8lQiPxhZocP9wX21dxw1S8P9OrY8iQWc0iZq-FluTiw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="e253d48f-e8b3-48c6-89cd-22abc4a94bf4"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTQyMzE0MDgsImV4cCI6MTYxNDIzMTcwOCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJlNDRlMTc4NDM0N2E0N2FmYjE1NDNjMDQzNTc3NDVjYiJ9.FN1QVh_L_TvIXJ3oEUGVAxQjvtZbG2ovtcjC397taJY" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 401

def responsedetail = jsonObject.detail
assert responsedetail == "Token has expired."



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("UnauthorizedStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f42ed6c8-696c-472d-b79b-ef9927f9c945"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ghsdv</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>624</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_87441</con:value></con:property><con:property><con:name>ACCESS_TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</con:value></con:property></con:properties></con:testCase><con:testCase id="20ca248c-5c1a-4a63-8184-186e85f38999" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-Verify 401 status code when invalid token is given" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="062e9b5c-dddc-4df0-bdf6-4826152188d3"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify scimType is null
def sType = jsonObject.scimType
assert sType == "null"

// Verify status is 404
def responsestatus = jsonObject.status
assert responsestatus == 401

def responsedetail = jsonObject.detail
assert responsedetail == "Token is invalid."



// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("UnauthorizedStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer fuifhweuifuierferg"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="fd513bf8-d976-48e8-b8fd-aebdba6a7d32"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scim_ghsdv</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>934</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_87441</con:value></con:property></con:properties></con:testCase><con:testCase id="03212e59-3edb-4f1e-969a-6718d0947daa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06- Verify that user is able to fetch group containing '&amp;' character in display name" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="45d697cc-2955-4f80-9d16-5ccf0f2ab39b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ3Mlg5SzFabmY5NHZHZlM3UHpDSHlRcERlV045ZmNwSmQ1TkhPZlEvZHpFZ09OQzZpYS94TUdsNnZsMHdmempXMVc2QTlNT0VvMGU4WlhDWXh3NTRXSUJPdHkrQkduU1Nlc0ZvcndBS2dTUisxRnI4MFJneU1FcGVYSVY5WHJUbHhyUDJTcHJBbGtSL3JoMjFvcnpQNWpTSVBTMlhQNnpLSUZZMnQ2eVJncGNlbDJaaWI0SzRjOEdXZDRpNXdsL3UiLCJleHAiOjE3MzYwNzEzNTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._qHvdkhWGUkl2rtAAtty_X8E0fnJV0z5U5_qVNGYwfI</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7364e942-ad6f-47ab-83ca-1e5efe0a05e7"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("displayName", "scimGroup&amp;"+randomGen)
//String dName = RandomStringUtils.randomAlphabetic(5);
//tC.setPropertyValue("displayName", "&amp;"+dName.toLowerCase())

</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="90b60115-1689-4e49-a5f8-113b6c84652b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#displayName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for User
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="7fd70f99-b7c4-4abf-bf80-5f4c9aca345b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the Group Metadata
def resType = jsonObject.meta.resourceType
def groupLocation = jsonObject.meta.location
assert groupLocation != null

//def groupMembers = jsonObject.member
//assert groupMembers != null
assert resType == "Group"

// Verify displayName not null
def dName = jsonObject.displayName
assert dName != null

def ActualinternalGroupId = jsonObject.id
def ExpectedGroupId = context.testCase.getPropertyValue("internalGroupId")
assert ActualinternalGroupId == ExpectedGroupId

def ActualinternalGroupName = jsonObject.displayName
def ExpectedGroupName = context.testCase.getPropertyValue("displayName")
assert ActualinternalGroupName == ExpectedGroupName

def ActualExId = jsonObject.externalId
def ExpectedExId = context.testCase.getPropertyValue("groupExtId")
assert ActualExId == ExpectedExId


// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b81cb93d-a32f-4dbe-b446-9a898f03491b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>displayName</con:name><con:value>scimGroup&amp;UQUDi</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_UQUDi</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>3ffa7508-9447-4055-ae8d-34f70b87f96d</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>ACCESS_TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTQyMzE0MDgsImV4cCI6MTYxNDIzMTcwOCwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJlNDRlMTc4NDM0N2E0N2FmYjE1NDNjMDQzNTc3NDVjYiJ9.FN1QVh_L_TvIXJ3oEUGVAxQjvtZbG2ovtcjC397taJY</con:value></con:property><con:property><con:name>ACCESS_TOKEN1</con:name><con:value>eyJhbGciOrthbiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2MTQyNDI5MTksImV4cCI6MTkyOTgxMjQzOSwiaXNzIjoiU0NJTUNvbmRlY28iLCJhdWQiOiJlNDRlMTc4NDM0N2E0N2FmYjE1NDNjMDQzNTc3NDVjYiJ9.skyV_JZe8FAo7APoWPDnnYlT-Uq-wyrUJZkBpyHQnj4</con:value></con:property></con:properties></con:testSuite><con:testSuite id="f056a929-6bd5-4acc-92f1-155b11aa56b4" name="GetSCIMGroup-Parameter Name"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="982ebe06-7b05-4bfb-8f00-83f38593d6cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify the response when &quot;excludedAttributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c4745825-30f9-4268-9bf4-de62840775a5"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKSmVFOGNZOTN1QXE0Qys1QXgyS0xQb2tuUExVaHR3WXNvLy9heVRwZ1NoNUJ2cWR3M2hBaGxXNjI0a3k4N2w5TFN0NmVGclVqK2ZCdnZ0LzBZblN0Nm9MMXNENXRRSG9DRDNacWtlaVgxQThpdEM5c0N0cEtEbGpqaHFvVkJNdDZRam1ZSzkybHg3OUhGTGJFcGlQLzZPOEw0UUxBa0ZTcnhtNUF3QUZ6VHJibmhpUkJsenJOWkd1bXZZUlZzOTMiLCJleHAiOjE3MzYwNzEzNjgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.-CJedGV7KFj8BctPrXH4ZIzw5-VVby0LVce0dHkfDyA</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="343826d1-b53f-4feb-bdf7-0ab498d8f964"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info jsonReqObject

def actualAttribute = context.testCase.getPropertyValue("excludedAttributes")
//log.info actualAttribute
//def dName = context.testCase.getPropertyValue("pathName")
//def extId = context.testCase.getPropertyValue("groupExternalId")
// log.info extId
def GroupArrayLength = jsonObject.Resources.size()
//log.info GroupArrayLength
//List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    //list.add(jsonObject.Resources[i].pathName)
     assert  jsonObject.Resources[i] != actualAttribute
   // log.info id
    //list1.add(jsonObject.Resources[i].groupExternalId)
    //assert id!=actualAttribute
    //log.info list5[i]
//    if(  list1[i]!=extId ){
//        log.info "Input query filter not found"
//        assert 
//      //context.getTestRunner().fail()
//    }
//    else{
//        log.error "input query filter is found"
//    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="f2aecaeb-a07a-4b51-a39b-5544a60f75cd" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="excludedAttributes" value="externalId"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="beeef1ec-1981-4455-8133-749b17aa801d"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>excludedAttributes</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="d84791c7-b6ab-43aa-9763-5d49ba3b1385" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify the response when &quot;attributes&quot; is given in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="eeea0bad-901d-4b14-a78c-2e7bb4bbf4da"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJZc05EV3hXNTNUR3A2YUovRWdnRGs3MytrNExiNUJOanREeGtBWXk5YlBUeXB1NXREaHFkMWwwS3lYcm9uU3FaSTEwM1dGb2xKM29UUzBXbE5zQjNWa2wzTjlMZTZmaEFIWTlIdmZqZU1TN3pHQXdoVmZxZmp1YktxU3REanhvYUc5eVpIbFl2ekZOS2pWSnBnVkVDWXNXUTNRZHVYUWxTR05mV1U3YitzVy9wNnNtTUJJejdxeGJtQzJxMklJSDEiLCJleHAiOjE3MzYwNzEzNzcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ukoKXoNb3rPtTeVQpc8mC7KpUJoDy_IA8xJfwzpDVVY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="cff5e1cc-7860-452b-9d80-f02cf9d1b20e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info jsonReqObject

def actualAttribute = context.testCase.getPropertyValue("attributes")
//log.info actualAttribute
//def dName = context.testCase.getPropertyValue("pathName")
//def extId = context.testCase.getPropertyValue("groupExternalId")
// log.info extId
def GroupArrayLength = jsonObject.Resources.size()
//log.info GroupArrayLength
//List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    //list.add(jsonObject.Resources[i].pathName)
     assert  jsonObject.Resources[i] != actualAttribute
   // log.info id
    //list1.add(jsonObject.Resources[i].groupExternalId)
    //assert id!=actualAttribute
    //log.info list5[i]
//    if(  list1[i]!=extId ){
//        log.info "Input query filter not found"
//        assert 
//      //context.getTestRunner().fail()
//    }
//    else{
//        log.error "input query filter is found"
//    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="88a15c9c-a1e8-4a35-95fc-75131cbe7a26" name="Contains"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="displayName"/>
  <con:entry key="excludedAttributes" value=""/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d082bc61-2d82-4f4d-9ccc-afb74596a9e1"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>attributes</con:name><con:value>displayName</con:value></con:property></con:properties></con:testCase><con:testCase id="417f8be1-d04f-47d6-ae3b-0fe20afd0050" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To verify the response when &quot;attributes&quot; and &quot;excludedAttributes&quot; are given in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="51bb4614-d207-4361-92d1-17dc6fa8ced4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ4MWhoYTlnL3V5RklsbGU4bE9tL1l0R3JsdW1lYlcwaVVrb2RNelBxOCs4Nk1rTjRaNEpXOXlkbUUvUklxSVV2REcxOE82TEd2NGwzMmpkOFVLQlpYOEpldHFSbTVNZEc0TmxOaWo1cXNoS0U5R25hdStxbklZNnFSZ2tuMW1oR0R0a3dwNjFXYUtoWGhZcEdKV21reEs1akRUa1ptUXFuTjk0YVc4K2dpNlk9IiwiZXhwIjoxNzM2MDcxMzgxLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.zdfYceCQqe_huDBQFw7Tg8fov66y_ecVvP6alsL3M_c</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="d3f5d3df-02fb-43e9-a80a-f33561620e06"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]!=dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="displayName"/>
  <con:entry key="excludedAttributes" value="externalId"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4bd61096-0a12-437d-8a51-ca1b99829d80"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="9b33ad97-4489-4283-8174-cc1023729451" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To verify the response when multiple attributes are given in filter for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="2c39c7c1-65d3-4263-aa02-edd191967b33"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ0UU13YzFBTHlOdkRGVDdWdmordjB6VlpmbXJFMmpBS3JUZEN0RkEybmIxVkxNaloyVmhHbU1lcDVMYlYzTUswNDcxcHljUGJDVlFUd1BTb2RYQkIrSnB3bFkvSi9ObnFFZmFzUEhJK3U2ZEVGdWlHZ2w3ditTdjVzajUyVDFQOEZFL0dzOEtyTW5ic1NoK3I1Y2puR1NyZ012OFA4S2ZxYzhmdWkwU2xRMWc9IiwiZXhwIjoxNzM2MDcxMzkxLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.F3isaHtzfvvthl6eozTG_iDVNHTuwbjOfBIiBsgXPoc</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="56f28c28-655b-4f55-9bad-00f53ff635eb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]!=dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="1c595b7a-d0d7-4b14-adb2-860cc470274b" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="07bbb8ce-0091-45d7-9a4e-a6198141841c" name="Not Contains 1"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="excludedAttributes" value="externalId,displayName"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1d35da3b-4c6a-4cf9-b5be-3d5e933ccc33"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="719517fd-d09c-4c0b-a90e-4cdd1e60cd37" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To verify the response when multiple attributes are given in filter for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3a2aa2d6-4295-494a-be5e-b6c0b44a0777"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJZbEEwYzZnZGVNc1AxQ0JvRUxoVnByeXgxSER4RDZlYnlaa3puM2NMVG8xREVwUkt2U3NmUEh0Lzk5MWYyT080cmRYVTR2cnZkVDdIRDhVZldBZWJOemJTb01kNXE5NEFObUU4RkxOWStmUFlwNUdocm9Vb1kxVjNQTENuRiticnVMUERoSkdaNk0wL1FONSt2MnhtWldOREZsU1BHS1dyVmt0NU1qTFMyRzVEcExFVnNvb1ExckU2SnI2ZzVpZnkiLCJleHAiOjE3MzYwNzEzOTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.1vbZEALOtAkdh5IPhZIfk0Qb3elyeYVIgqAr0cA6DHY</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="552de538-e9b0-49cd-bfd8-2ad60b44e973"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="b78b75b2-00b5-4948-a2ed-1f3b354e2b53" name="Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="08489474-bbfe-4582-887e-eed937d8a6cb" name="Contains 1"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="50"/>
  <con:entry key="attributes" value="externalId,displayName"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1a7417ba-aee7-4363-a947-1dd30de58255"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="936f689f-c139-4f34-b29d-44f08ad7c3fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To verify the response when attributes used in filters are case insensitive for &quot;externalAttributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3e7b9f56-f8c1-42e1-abef-c1cce0de5690"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ6cG5ZYVNJbmJ0OTdaN2xNTUo2Y3JxeTdzYmFPYXFZOWFBdURNZU5KUXBNMnZxaU1jeVMrQ3ZKNU8wOUFCV21pYW10UTVZZ3ZjaUNZeVZhMWNKYld3M2p1ZVhsQ2NsVHpZaHFCYXVZTmM0eDlkSTVsWFVobHJmMlRmZmgrZ1B5dUhvczM4b2NSaHJlYlpQVm9zSVI4R3J0MmNjVUMyL1ZkZEFvMkdpOGp2V0piVStCbldUbHdpNlBsZHJ4UEowVjIiLCJleHAiOjE3MzYwNzEzOTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.C10_k9kl8z4Rj1YgJVd8hv0OshRGooMYvH2Oj6E0puQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="6cd08bb4-e724-4f14-a141-760f4e60067b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="760505b6-9f88-4084-8d02-0b8da05d041f" name="Not Contains"><con:configuration><token>externalId</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="excludedAttributes" value="ExternalID"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="91bf1125-fc87-43fa-b25f-24bbaf893e25"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="b9b4ec82-62f7-494b-ac76-d7348e316478" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To verify the response when attributes used in filters are case insensitive for &quot;attributes&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="e7ac67b2-7715-4d7f-8f40-7de75a5b033b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsTXBiT1dFa2ZuZGFtTU1HWXNBWlJqcVl0VkJOTisyMDNjNXpkNDFJWWV2ZUJmZ0lMN01tdUVFVjNsK2Q3MXhYTHBjRVl4VG9qbXNSTjNReDY4V3pFVG1aMTZXQUhZblBValA5QXd3OXY4R0E4Z0hkZzRlWnhZTk8xSUx6OTZjeXVkZVFvYlRGS2srL2YvYmJLVEdTY05UMG9OQ251NzkrdWJFa29jS09nQkJ1UENpdHR3ZndWYlRDVTlib1hYemYiLCJleHAiOjE3MzYwNzE0MDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.ocJJ1xx5YJeFkEKT-lO176eeraT7LwEc2nIFWGedVHw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="618740ee-7720-4467-9b45-e236e8d8c959"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]==extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="6c628d56-1895-4574-acbd-79cfc48f4ed4" name="Contains"><con:configuration><token>displayName</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="DisplayNAME"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="fd038df9-96e1-4794-8d9f-909e9fea5181"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="e11c0355-56dc-45f4-a0c5-7d5b67e85a96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08- To verify that Child attributes are supported for excludedAttributes names in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9b91a776-c8e2-4160-a3bc-05fc1305f52e"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJramVMb0dOQWx6a0swVHpmdVhrNk1IZG9TZ29RbXVQdkRDUDgrOHhvTVhTMlZRRnJLRExPMWFBUTJoRk0zRE1HNGxJSFZKT0Q2M09nYXlZMGJTQ01SM0ErSDA3bjdPd2tuZDRUbmNCZzR5R0pQZVhCUE95ZFpvUmMxSnhqWWtzZHArdVFXRkw5NG5BQXRMbjR1WGhLU3I1aVFYVksyVVlkY25tUjFNYnEvWVpmTS9FdCt0ZFZGSlQ5Mk1ibFIwMmQiLCJleHAiOjE3MzYwNzE0MDUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.fRohJCVq01XvprVNifYPa7hXjou6xFcjCzrCq3Ceaak</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="dd9ca2f5-40e3-4ca5-8248-c83ad9189d00"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple NotContains" id="932a2e0b-245e-4582-8d79-5f1a5edc70a4" name="Not Contains"><con:configuration><token>created</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="50"/>
  <con:entry key="excludedAttributes" value="meta.location"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="77ef397a-5e28-4a46-8c0d-704d7d6a66d4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="b54f6d23-313c-4061-844b-17b07641e3d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09- To verify that Child attributes are supported for Attributes names in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="066e7123-057d-4975-a75b-eba96a28b2cc"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJiU1RJU2wwNXdvaWtadURBUGFsTkxqb1JqZWw2WDdXVHNDaVZNV1h3MEU2K2d6bEg3SURFMmx5bkovL2FYN1ZTNWFtZzk1UVdOaEkrRC91L2lOR1VoYUVodlI5TjlIbTdpZmFsRFliSmZMdWo0Q04xNTNFQngrYWNWdGRlNXlsUDA0RDljdUxNVU05ZnE4NFlWeFJvd2dRVWwvYlNWb0RTellWb0NZak9nNUVyQUZtcWFjaVpndUtLdWVleTZlbkkiLCJleHAiOjE3MzYwNzE0MDgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.-F6p00_bdvAMvR97rHZI89xBnFcPK1SvZjswXtcVtbI</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="3da5c7e8-e5f1-4aae-8dc6-39bb7e008f27"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if( list[i]==dName || list1[i]!=extId ){
        log.info "Input query filter not found"
        break
    }
    else{
        log.error "input query filter is found"
    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ac3c1049-29d8-482a-aa09-dfcded3e76d2" name="Contains"><con:configuration><token>location</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#pathname}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="50"/>
  <con:entry key="attributes" value="meta.location"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="f5b3f341-e7db-4093-88f9-dd2c548a470c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="1a740cc0-6434-4317-8152-58d4741e76f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To verify that Child attributes are supported for Attributes 'displayName' in filter" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="68bd5982-46ab-40ab-9b3a-bb1b9a51ec7a"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiI1VldnZlF0Rk1hVWN6YXRJQVNON0xLZXA3aEs5S0Y5ak5WVHE2OG5tQXgyc2FHTXRCME9wS3BhOGVYUVdMWm9CSWZneGc2RXg2VzliWnpmWVAyeTVKejV4em9QWHJldG9LdlB6ZmRYK0NzdmpNQ3d6a2greGppZm4rTlZaYnVkakFnMWUrVlVkbTN1OHZHc1NRRC9qWGhLVW9qbFZ1YjJPRDRmUVFPK3JWcWx4NU1JYVFlQk5sTFdHK1hVcCtoVzIiLCJleHAiOjE3MzYwNzE0MTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.3-lTmIVp2HfuY08eHojbu-bIyeSaW7WZgXFF3zAaAU8</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_PARAMETER_NAME" id="8ca55b7a-543e-4a3a-b3b3-ceb6fbb28c7e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_GROUP" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_PARAMETER_NAME" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="c71b468b-b209-4d66-b65a-a19a3ada415b" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
//log.info jsonReqObject

def actualAttribute = context.testCase.getPropertyValue("attributes")
//log.info actualAttribute
//def dName = context.testCase.getPropertyValue("pathName")
//def extId = context.testCase.getPropertyValue("groupExternalId")
// log.info extId
def GroupArrayLength = jsonObject.Resources.size()
//log.info GroupArrayLength
//List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    //list.add(jsonObject.Resources[i].pathName)
     assert  jsonObject.Resources[i] != actualAttribute
   // log.info id
    //list1.add(jsonObject.Resources[i].groupExternalId)
    //assert id!=actualAttribute
    //log.info list5[i]
//    if(  list1[i]!=extId ){
//        log.info "Input query filter not found"
//        assert 
//      //context.getTestRunner().fail()
//    }
//    else{
//        log.error "input query filter is found"
//    }
}

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


////Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:assertion type="Simple Contains" id="64e94eb4-06ff-449d-89f4-e9abd6f27316" name="Contains" disabled="true"><con:configuration><token>resourceType</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="attributes" value="meta.resourceType"/>
  <con:entry key="userName" value="userName eq &quot;${#TestCase#userName}&quot;"/>
</con:parameters><con:parameterOrder><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>excludedAttributes</con:entry><con:entry>attributes</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="8b7bfe77-15fe-48cb-ac06-22c2c22630a9"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>excludedAttributes</con:name><con:value/></con:property><con:property><con:name>attributes</con:name><con:value>meta.resourceType</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="0c9842b5-5e27-4df9-83cf-5699a2be547a" name="GetSCIMGroup-LogicalOperators TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ee0a7702-2baf-44fd-8070-beec56b81c67" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To Verify response for attribute &quot;displayName&quot; with valid Operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="398a93df-01b8-4570-8112-3e560136b7e6"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJRekZPSUo3SFBBVmI4ZXZqbTZyRVM4ZHVJcnlRb3JtMW5va2tmU0xMeWVWZW9CUm5ER0lMNXIzR2FPM1lrUkl1V0FzaEVhSHRMVTFqcnF2ZFBOVExxNmZneHFIV3E2OE1BdWt4Z0IrYmVnMmF2Wkpqc1dWUmxyKzY1SjJrSUhFOENHY3dqRXJHRDUrUis5WmE3ZnJpUXY3eG90UDUvS1Y4OXpSUDlwdUdKa2NOdHQxcWVGdEd0UUtiMzFBY09iRGIiLCJleHAiOjE3MzYwNzE0NDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.cOPi0aaTVVzCd5n04-VSn0JGpX5GZZMtez78reoE7FE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="28aabb47-ab69-427f-905b-90e087761663"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="696ce0c7-94b7-48a7-a7ac-147e56d6ed30"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="771c15c9-e631-4e31-9f46-b1418cd6c75a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName eq &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="3da513ef-2535-45b7-bbf7-cb4de6720ed4"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_nQSxe</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>a46130b4-b952-405d-bcfb-38fe3fcb8f6c</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_nQSxe</con:value></con:property></con:properties></con:testCase><con:testCase id="0fba8240-4b3c-4272-90cc-0c01345c47c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To Verify response for attribute &quot;displayName&quot; with valid Operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="968486d2-6c47-4ba1-bf60-6de449c745a8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIrL2RFNExQdm1KRjV6MGdVaWFWVnh1U2NRWEVYbDFwenIwSUxKbHA3OURPY0NDWDZpQ1ZlemhtcXZURHZtSVFPODduem4yQVFJK05qaDZBWW5VczEwaGpQZ2lZL1VhcXZsR3A2V2hCNHZKRnRWa3VTcmplek1seGlCTG5oZVB0R2pzZ0lWTElTZldSaWVhNkJZZlJmcVpmSi9nN0lNMk1oQ1NJM2dKdXhZR1hJK3ovSDVQSnk4SndIZlVUa3pqVFkiLCJleHAiOjE3MzYwNzE0NDksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.pkLf-hys_GRlioZRyPshGEYuZOLXU2hQELF1OQfiUx8</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="57130feb-69c5-4c86-91ad-c0dac2dd72bc"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="40b73e9b-b365-4668-aebb-4b96baaf51fb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="7b54660f-7dbd-4e76-b01a-be6f37739a3c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName ne &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="22"/>
  <con:entry key="startindex" value="1"/>
  <con:entry key="count" value="50"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1a898d06-d74d-4841-b294-d5b13e8a12a3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_I7GxV</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_I7GxV</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>32ed42bf-15cc-4efb-823e-803d6ad2a4bc</con:value></con:property></con:properties></con:testCase><con:testCase id="e48411ea-db0c-41b9-b0a9-0d6906391be7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify response for attribute &quot;displayName&quot; with valid Operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="b0ca2202-fd61-48b9-a5ec-868513880343"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJKRmt5aWpoaERRYWg0RU1KTk1PQkI1SXdFdzVncnRNdnN0UE81WGdiMmRtdlZTL1hDS3F5SkhOZmk5Umo4YnE1cDYxTUtrTGxnSUtYamJaT1JyRFE1V2FiRmJ1QmFZQjhPcERMa3RCME5Ha1JBSldodWFqY3U2L0V4WUtCeGJnT2lFTkRVYXRyVUhsam9qMDU5dTBSS3hXTGR3UloyanArU3FUbVppbnUxNk5RRm44di9XcHZMS0NMdDFrMWxJVXZidTkyV0xNeTA5NmJTS3NGQ1dzSTZnPT0iLCJleHAiOjE3MzYwNzE0NTUsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._y3joZYlsvNZtu7TqiRyNGzoSlIikW6uRPqN1RJa-Ok</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4035338c-baf3-4a4c-a785-d5fa999eb086"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2d0887e6-3e31-44c3-a0fc-2f46df50aaeb"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="a7514b2b-77f8-4820-9377-27bf32337b88"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName co &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="40"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="5b63b7a9-3ad7-402f-b3e1-4acf49021465"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_9r9Sg</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_9r9Sg</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>632622da-1ec3-4445-bc5c-1c386baa9561</con:value></con:property></con:properties></con:testCase><con:testCase id="07c4aec1-8553-497d-a226-0249c7e8d8ba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-To Verify response for attribute &quot;displayName&quot; with valid Operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="d24f4231-e733-4177-8b46-06eb8b8c6857"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ3c3ZGcVBCRUptTkFnbVprQVA2bldNejBOOEpSRk9zODlINzRNeFJZdEV3RXY5NlQ5WnFINmxocTJlWlIyZ0UzS3pEZCtqVUpXYUlpTGE3aHJPQUs3emtXaEcvS1F2L1ExNDJiSm4vbDNzY1RqK2ozMGFIMVcyNnFod2xHY256cW03a3E2enBFMmhTNzdJajR0TjlYRVJRSENVVXozRTQzdHhtZXN1Zlp2MnFMbjdpTUFDR3hCYWV0YjQ2L3hjV1UiLCJleHAiOjE3MzYwNzE0NjAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.6XlfFSQWhcfpCRI9ZaM9s3WtG19X4CR0Ine6J6v3Y_c</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bdb867ce-f16d-4917-99fd-c1c6b0ed99bf"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="dc7265b7-0c04-4726-aaae-13ef6e8fd25e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="df30f291-15f9-467a-a08b-bb81378a7ab9"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName sw &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="2"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="54f16df6-dbc0-4cd4-b9fb-2db1371a021f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_rtwnQ</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_rtwnQ</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>cd3a5e51-ed08-4faa-8555-5ee23e527170</con:value></con:property></con:properties></con:testCase><con:testCase id="42a6e6b4-0794-4295-bf9c-47ae1d06d794" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_05-To Verify response for attribute &quot;displayName&quot; with valid Operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="bd30abf4-29ad-423e-a09d-e07d442b986b"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJrbzRtMk5Sd0NYc2NuOWU0Y2ZqMEVEbk1YczVpZDd6MGdEbmczekRYd2Q5R2k4emNqcWd4TytKSHR5VGExZEVVZXQzOXFsU3RkZFhPQmF6SW8wSk4yaWEyZzhiaTVqNDBza2NyRlk0dThGc202bENWczJOSVZVck5YWEF0ZHNoaUNIYlp4RUJ1cmxmblcxY0kxWnZCcFp0clZVQ2dNRW9lc0tUWm9WbmZTOWFtNWY0MXBnL2VaNDhmK25xMjdHdGEiLCJleHAiOjE3MzYwNzE0NjQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.H4Y6yPmoYtkzSSv6hzNzOq-ioiQSgNs5Z5CskJud7Ck</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="0b535157-5559-400a-8e02-3088f7232227"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="252b1ce5-a63b-476a-bbbc-4282c412d2dc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="fab77175-aab8-402e-8a9f-be63749eed75"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName ew &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="2"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="239918df-3304-4a58-92cd-da3eca2ebc4a"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_6w2OL</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_6w2OL</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>dadaa5bb-3acc-49ae-8e6c-7afc99ce82c0</con:value></con:property></con:properties></con:testCase><con:testCase id="b82054fb-f27a-4579-9a38-60e9363f737b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_06-To verify the response for attribute &quot;externalId&quot; with valid operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="28bafc5d-8c20-44e1-8136-20e1818d7ed3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJCOHh0N1p0YW9xU0lxTktZczJXeUNsc3ZjRTJwZGl5SjdKa0FHMC9EZkI4TWVhdlZURGtLb2ljTnZ6Z3FmUDhzeUF3VXgrNzJua3ZkSkMvak1HRVlONHB3dUJkenpVSXNiSTgyL0EyUVN0YzFETlJGUVJrY2tWSEFQV3d2WkticzZzLzkwdS94aHR6ZjMvdlFIOTlmRUtsN0VZSVh1NXpZSmlPMk1Nb09uVW55VFd6bzdBc2NTUnJIMzlOajJJM0VxRlY2NmUwVU9LTDlqTjNxMnpwdXZRPT0iLCJleHAiOjE3MzYwNzE0NjgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.Q8xYHEZsHDn_v7jzRhY5VsIfij0l9tiZaLKxoGRFlJw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="88bd7617-3558-48b2-8606-e799878943cf"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="94aad351-76f0-43ba-9bda-052007d14d7f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="9dbc428c-2db1-49c2-98d2-850388b9c6d8"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId eq &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="10"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="b7e36dcc-8ce2-4606-94ff-2b76edc1b6ee"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>pathname</con:name><con:value>andRGBMT</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_jPFbA</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>ae379358-fbac-4e56-9bb2-60bb831eecd6</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_jPFbA</con:value></con:property></con:properties></con:testCase><con:testCase id="9f30b6be-9a1d-4bfb-8acc-99e750a77a82" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_07-To verify the response for attribute &quot;externalId&quot; with valid operator (ne=not equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0265f24a-c12e-43f6-bbf2-4ad64fa18a16"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5dEhQQ3NZQjhVMzdMdTVPb3RPOFJYQWZuR0hIcDQyNkNOcjdlT3NSTTRIN3JCcnhmYnhPbFVGN212bVE4WjBSYzRFeVM4SFcydi9kQlFWVW1ZTHk3SDdFMXdqVVZzRWZFOS9IZWJObkFtZTVtTEhBVEhlMGpzb3dPdTdqamxmcjloOVdpaW15elFwaHBJUzFsOFlaaGU1M3FvMWNESTRNMnVnR1g3WHNteGo3OGh4MzNXNGtnb2pDNWQ2cUFRZ1YiLCJleHAiOjE3MzYwNzE0NzIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.YfAB7xNxXNukW-2FqYmgvcZoKCsCtJ3-uQLp_OWN0tM</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="abe324ac-5932-4407-90c9-eec6635da4c3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="fa4505a2-04ac-447c-a096-32b6a25f1989"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="9d8142ec-ded6-4ca0-88b0-dfff1a6c135f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId ne &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="startindex" value="2"/>
  <con:entry key="count" value="43"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="9cde87b8-bd94-4f78-9898-0a68b13eff8b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_vfc00</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_vfc00</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>ab468946-7c1a-47e1-9d23-e76125035b81</con:value></con:property></con:properties></con:testCase><con:testCase id="6be36500-4f44-4e4c-bd01-66a7a5c113c3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_08-To verify the response for attribute &quot;externalId&quot; with valid operator (co=contains)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="f3efd79d-d191-4b40-9c94-a486e781fed4"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBb3F2M2ZYZU9NMWxWaWFISHAvalRjb2dYTitTb0pZTXg0V01mcHhiTGM3a041UnJzMElHdmZHb2lab1Irb1UyOFR2OEp0SDg5ckdtZE9mZ2E2emFNZEpFc3J6TGlTTFR1c1llRkZpWGRSQTFMMk5OK0ZVb3JWbG1MdDJzWENoT3hYT24zNURCUVhJa3I5Z1RlQlFaY3RWajZDUGZiRDVDYUVnTFRWbE00WWs9IiwiZXhwIjoxNzM2MDcxNDc2LCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.kNktbJQN72jvn4GzsFb0mcEl5H-NbDUXqWVU7th1yEg</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6d7bbcd8-2e71-4a00-a08e-34ccda76d99b"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="eaa13ed0-eeed-490a-9b51-f0fb12cf5816"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="4d80174e-d187-4949-bec5-db93f6545e12"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId co &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="100"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1685970e-ca8f-4655-8d6c-ce19af4b23e6"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_xTawd</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_xTawd</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>02ba3fea-6e09-4851-b498-60e76951508e</con:value></con:property></con:properties></con:testCase><con:testCase id="3f02d53f-c172-4f86-a233-56bd3bed932b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_09-To verify the response for attribute &quot;externalId&quot; with valid operator (sw=starts with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0517c8e6-ed4f-48f0-83ca-3009bf49131d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJLS3Q2QVZoSTVNdDZqQnZ6RXhWYjVMUkNsOFM1cWlmQ2dFY0wrcElWcmJrYSs0MGRncHFEVUo4eThOY29WZGRBZ2h2Y0EzNXFjcjM1b3NpWmRBN0R0OU16eGxsVkJRQjkxc3F1cTB1ZmdOd0xCUEtJTU5rOXFCZ2RidzY0MXNOZVVvZEg5ZHdBK1N5RFhEMGNOR2g4VEpDRkh6R09scXRIWTAzcUJzTkVqYkFYbmNRUmh5dUtQaUxNY0xscCtiQlAiLCJleHAiOjE3MzYwNzE0ODEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.jlXZVZReEK_agx_cukD0ilnQquuCouer6BRgcFSks4M</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="7a5852ae-a9e8-4ab4-8b26-63a6896ac2a4"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="2aea3626-31ed-47c4-8bb9-b6b250a785c0"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="bd8afc43-7c76-4ed5-b074-4761807ccd4b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId sw &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4e0864a6-f4d8-422a-8edc-6a8ebc974893"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_ZxVwd</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_ZxVwd</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>69304561-311e-45ae-8d34-43054a4096ea</con:value></con:property></con:properties></con:testCase><con:testCase id="56955a7e-8d1c-4528-8fd8-80329f7df595" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_10-To verify the response for attribute &quot;externalId&quot; with valid operator (ew=ends with)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="0da2627e-330b-4244-b89c-5fcc222e4827"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJONit4WnRycXpzd2t6bWRRNFEwYzh5YkxyeWR1RWViZ0k5bnJ1UDcydHJZbVlRM0E3amZQOE1nVDhwWEY0NW9iNnJhaHdXTXkwN2FQaENObjBZd0psYWhuVlhBMS9qTE15OGpSNzMwa3ZqWHN1c1BOUnNCRSt2ejZsaUpjblE3TzdXRTQ0cFhkbWxPUCsrOFRNdVpTcXhOeklYY2JFdTJYU3R3ZUlYSzZ2Q3d1U1hoM3FzZ0xIeWJHWXBHRjluN3N6UjQzYU5wOUpzSmhEeDVzamxtMDZnPT0iLCJleHAiOjE3MzYwNzE0ODQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.AgDo3VLZNg5WE1xchZHa78W8w4Nr5ZwwGFBP0YjZh1Y</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="bc561fce-c473-4c8d-8daa-de77809192d0"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="af83d97f-52ad-4f08-97ea-b08f15f050d1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="a04126c9-fb23-4c7a-a47e-921cf5480c78"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId ew &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value="1"/>
  <con:entry key="count" value="21"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="a9bcf99f-8928-4e10-8637-40cd16a82783"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_s5Jdo</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_s5Jdo</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>5e10d6b3-14e0-4fdf-9016-5573f9c7ea71</con:value></con:property></con:properties></con:testCase><con:testCase id="83ee018c-f210-4767-8073-6268f89426a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_11-To verify that &quot;displayName&quot; and &quot;externalId&quot; will support all filters with logical operators (AND)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="63085ef6-c120-4d66-957a-3668bd58af70"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJsaGhZYlJMYmFFQnRuTlVvNzBUejBkZkxVYUswTHpuM0M2YTV3Qkw2Q1NPNy96Z1d1ZU9tWTJ2UDJVYk1qRkRrUVU3ZUN5T1JkNm5tdmxmMWF3ckorK2xOeDBoaWEvTkl1NVdVVmtqUG9peHpab2dJV3N1VGlSNElGRjlJa0gzSXVFdHBOUkY0MlArUW1YSkpVck1DemxMdTNYVmpFMFRuTTYvZW51K3ErNzhwTWFwemI5dGhrbFVKM3phN1NCRFUiLCJleHAiOjE3MzYwNzE0OTAsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.wibs_-kHQDApcJVU96H3_4O_wLa4MI423kPvKyFrjyo</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="00bf0698-cd9d-4f6e-8542-918875bda127"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="b3fef7d3-3a44-4d5a-89eb-6e5ee360b435"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="66a32e57-683c-4396-9a62-fba8ed49207b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) and (externalId eq &quot;${#TestCase#groupExtId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="aa851a1a-485a-45da-bd15-cd1019da1430"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Xo0uC</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Xo0uC</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>c42dbf94-9c31-48a7-8595-c94473c9575a</con:value></con:property></con:properties></con:testCase><con:testCase id="4389aaf3-cdcd-4226-ac66-aa2aebc5f724" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_12-To verify that &quot;displayName&quot; and &quot;externalId&quot; will support all filters with logical operators (OR)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9bd55bba-e482-4aad-94c7-6d6ae76449be"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJEeDY4a3ZWRHZENXVXd1dHaU40cFVmQTBjSzJld2lMWFVqb3AyVVJ2dGlMTitVckFsOVd0M0dGRnA4SC9HN05wdWY4VnErQ3BXbHVqbWJxQjZsbkJKWmhyZzdaVVpFREZOSm16TDkzS09RK05iYnFFNHVGU0NJYzUzdWlUcHB2M3lKQVRqYUlWQUQ4SnN3ODMxbm43R0xGcWloSWFMYlUyakhyM2gyVE5yWldJSVpOU2l6QlRaSzJsWDZRbjV1RDAiLCJleHAiOjE3MzYwNzE0OTQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.yThrN-PTlPSFdvavHFpXtRH2_3F06Rh7mLkbUq7-x3M</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9e06970c-7711-4ccc-9ec7-35212e4f52b3"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="5f6492a4-db22-4037-8434-295a4ed4b68c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="0968d112-97ee-4dd9-b79d-90fd6fbf8783"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) or  (externalId eq &quot;${#TestCase#groupExtId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="01db99d0-a964-4de2-bcc4-24ddfffa5f41"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_P54bC</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_P54bC</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>22a8c874-7a39-4e27-a4d1-7a8d5cf820c7</con:value></con:property></con:properties></con:testCase><con:testCase id="22ab22b1-a9a2-4cbe-95fd-ab8992d7caba" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_13-To verify that logical operators (AND,OR) are case-insensitive" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="9327807a-d3d0-445f-850e-eca8bd015930"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJzNkJPVWlPeUFZVWlzZ1RyYlN1K0wxUTlKTEN4S0ZyVmFsM1FRamc1cnpqRmU2a09MMHJVR3VnWCtVWWt6YllTUE1HS296WDZPRUhYUlNjSEJJQkkyL2tiY0duTm1iYlV1OVYyTzVoN3c4dzBka20rTlc0WlZMd0ZlbHJmOVpGMERLRHRlQThwWUZWOXV3cjhxM3JJdzVYclNJMGlFYTBzY0dSN1hHU3VsdmFoOVNsZVBmWjlxZ0JHbTRDdXRHMkciLCJleHAiOjE3MzYwNzE0OTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.x8L3yFfEca--M7ITZm7cAl4RWIX06WjvTR9ibI9_shQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="649db14c-930f-4022-b4be-1be56221f32a"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="95231e32-cc8f-485c-95f9-05fc6be72586"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="1131a4de-9488-47f7-951e-30e2d7b741f6"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def dName = context.testCase.getPropertyValue("pathName")
def extId = context.testCase.getPropertyValue("groupExternalId")
 
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>();
List<String> list1 = new ArrayList<String>();

for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].pathName)
    list1.add(jsonObject.Resources[i].groupExternalId)
    
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) And  (externalId eq &quot;${#TestCase#groupExtId}&quot;) "/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="count" value="5"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="09d8bec4-18c0-4681-85e5-341ab8b4bc18"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_PbQRG</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_PbQRG</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>3f6218e3-9705-4866-944e-97296c7abb9a</con:value></con:property></con:properties></con:testCase><con:testCase id="bce052b1-772b-4717-8631-ba023a0f5f75" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_14-To verify the response when invalid logic operators are given" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="551f67ae-b086-4169-9159-48c772fcbcab"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiIwaG9jWkwzL1FyOTFyM3hPejB3bDNqTlFPM0VPTUd0ckhwWFVHbC9OS3pBbVVSdHVhK0IrTkE0NDdsVk5hVmlobTNwUkJtQ3JIMVI2UThXbW9ORkNNOGJsYTZCMEZOaGdxdUFlNmhMc2YveGs2dzZ2YUgrMWlCc0dJVlVvZEtlM0NEQ2kzS2hBL2VOSStrUWxYMVAyNEh0cTRiTXNUNDFRakhQczd0NEFITVVJbjRPbHZSM1hiaGF6NWdPRThkN3FHa0tCa3dSN2g0a0NDSnZvMVZobzNnPT0iLCJleHAiOjE3MzYwNzE1MDIsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0._uaGMkNrjjfl5axhZrSFvb1WThQZe_8T5QRSo6qji8g</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="f5dcdb85-f407-4a64-9038-bc5cbeebd28d"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="04f08633-0d79-402e-99fe-e4c0082fed8e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="1fd305fd-d339-4e89-91c6-5cea6896600e"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(displayname eq &quot;${#TestCase#groupName}&quot;) hyj (externalId eq &quot;${#TestCase#groupExtId}&quot;)"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="52e52db7-542a-4bed-b69e-d775e152472b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_6NY05</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_6NY05</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>a81fbdb7-5ff4-458b-86c1-064f105bedd9</con:value></con:property></con:properties></con:testCase><con:testCase id="80e14ecf-72e3-4db9-b16e-d662fe1d64e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_15-To Verify response when Invalid Operator given in filter for &quot;displayName&quot;" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="83b228d6-8e1c-47e4-9347-3f1216b9aa4f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJQZjF1TGJEdUxsOXoxeVVaR1VTbTRPUGZROHg3L3dQTWd5SkFCZ2NPcm1CaUVvdjhUZ1ZabmhPMW5mbTVqM3hHVThTOTNFYjhpdmhrNHdJQXBPV3hpOFJnOVYwdXVEc1Fza1lHcUV1YmhtWFI4S0lQRk9aQ3R1NGxXQjMrODVtMlRpYmRuUU5nVzVTaDBWeWRUZzFkbktPUkFzbUdFOXhtQUsyR2R1OGRHMmxOY3NMMjlyOGV1aTUxRGlXSFZDd2MiLCJleHAiOjE3MzYwNzE1MDYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.yjFgbsRD4rsNW5ypWktaISVDYqL-KCmw3tgaa4Lqzeo</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="41305920-8366-405d-a8bc-885cd51cbafd"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="0e2e0a8a-df2e-4bff-81f2-094e3e0cb937"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="39c59002-d127-4399-8b50-c2719678624d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def JsonRequest = messageExchange.getRequestContent()
//def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

////Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
//context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.Resources.meta.resourceType
//def userLocation = jsonObject.Resources.meta.location
//assert resourceType[0] == "User"

// Verify userName not null
//def uName = jsonObject.Resources.userName[0]
//assert uName != null
//
//// Verify First/Last name not null
//def fName = jsonObject.Resources.name[0].givenName
//def lName = jsonObject.Resources.name[0].familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="displayName re &quot;${#TestCase#groupName}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="69daaafb-e62c-499a-9c09-f59882c67804"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_u4h0m</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_u4h0m</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>dd3e80b9-f8f4-4ea3-9d82-f50c3bd3f3a9</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="13d0bebc-5c1f-4cc6-839b-24eebe99b83c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_16-To verify the response for attribute &quot;externalId&quot; with Invalid operator" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="164e8eb6-ac99-4685-bf04-cd37acd56253"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJBVldFRXBFNENlNFUvZVd4V0VMd1RPNXh1cUM5QXZKSUorWFl0L1dTY1NGZ2pTMUR3QTRIamtIQitGS3ZpTVlhY3dBcS9HbHkwd0F4UWwxTXlmaDEyUWt2emR4SHNGYkd5Z3hxZHpWYUorTWdENUtPMng0NmhQTmJlRmYvTHp3ZDg1MjN4VHd1dzlFRGZKNGJLWU9uU3FaQzlud3J2YUxMRTRBN0IwaGNhU3J2SS9MenI0Ky9KSStOclQ1L2g3aTciLCJleHAiOjE3MzYwNzE1MTEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.J2KNfCQQpgYpX5WQuhArl0Q-AC4GqpWFtb3Dj5OxDNQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="9a10da3e-a1f1-4fd8-b5b1-460609d4331e"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="a04cdd66-ec5f-4c79-974a-f9441b41417c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="bbb1f3b9-342e-4083-978e-b46cbd2f831f"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]

def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("BadRequestStatusCode")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

if(HttpCode[0].toString().equals(extStatusCode))
{
	  log.info "Status Code verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}

//Verify The scimType is not equal to null
def scimType = jsonObject.scimType
assert scimType == "invalidFilter"

//Verify The detail is not equal to null
def detail = jsonObject.detail
assert detail != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="externalId op &quot;${#TestCase#groupExtId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="aa8768a3-b368-493f-903a-08b5d0e37c8b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_BvlCF</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_BvlCF</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>a8f76cca-c4c6-4d68-962e-09b98735224f</con:value></con:property></con:properties></con:testCase><con:testCase id="4142e6b0-730c-4a8a-917f-b2699014f67b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_17-To verify response for attribute &quot;id&quot; with operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="1097c1b8-2f30-43f3-b938-968f7b76e0a8"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ2eXg0U0ZIY2x4YkVBWlU3aWVXUFp1WFFOMWF4UWQvTE00VVB2NjNRaU5qRWxQbUxGMi9GTUlUQWs2dE1wZ3VNa0xEOTdJQkNVLzM3cXFkd0I0dk9EZDBnTlFBTzBlU0luZWdMY3RwaUlqL2ZMbWE2RjB4RUVlVzduYW1JNGE4SFkwTXpCWFVzYTh0YzRGQWZrYi9PODdvSDl1NEZhbDNjV3E2MWlxUlBMY3laeStzb0tHcFpxYWZrV3YrU0dWdzgiLCJleHAiOjE3MzYwNzE1MTgsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.gNbmp9Ev9XvM1xSaT7CTkH1yUB5_4lEodMvgNiKomWQ</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a41f7506-6d0d-4dcb-97fb-8ca4ed9f7038"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="d0c40cad-6307-46d3-ae75-dd6dacdd157c"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="32c06351-b48d-49c7-ad37-298ecf807f61"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//def dName = context.testCase.getPropertyValue("pathName")
//def groupId = context.testCase.getPropertyValue("internalGroupId")
//context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())

//Verify the GroupID for Group
def ActualGroupID = jsonObject.Resources.id[0]
def ExpectedGroupID = context.testCase.getPropertyValue("internalGroupId")
log.info ActualGroupID
assert ActualGroupID ==ExpectedGroupID



//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="id eq &quot;${#TestCase#internalGroupId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>Authorization</con:entry><con:entry>startindex</con:entry><con:entry>count</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cfdbc34c-400c-4f66-88b6-eef8763de2f3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>groupExtId</con:name><con:value>extId_X0IaE</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_X0IaE</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>5f26e175-0e55-470a-afa5-05aee1fa6491</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:testCase id="b0af889f-3a59-49ab-828c-c779c8f1bc03" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_18-To verify response for attribute &quot;members&quot; with operator (eq=equal)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="59bcd58c-6df1-4fb2-96d4-45a6ad4d5405"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJxVlFNRk15eXJyVi9tbkdvVGNaSXUydUw4blhNQVZHeWRENjVLZm1vdjhhb3ZPUzhRR3pmbjhnUjRWWTR4VVk5U0lST09ycVorK080OXJONTExd3V3U3RGVjBNT2pDUFphcGVWSkhpUXFqUStDejZ0c2ZFa1Z2UGtGMEcveTErQlVnRmtWNnVJY3o2RjNIZFVySjNWZTdCb0ZoZVRVMzU5QVlKTXEvU25ndEE9IiwiZXhwIjoxNzM2MDcxNTMyLCJpc3MiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0IiwiYXVkIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCJ9.kizzLcmj9k7nc4AlFvjuYOKEkOL-f7ngHnoYvDS5hto</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="a320f5f2-3750-4916-bcc2-13f972173bea"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)


// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="61087e24-7499-4a22-bf32-cea589c9cf32"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [
        {
            
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="e5a6c1a4-b8c7-49f0-8918-4d79a5ab1b92"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   ,
    "members": [
        {
            "value":"${#TestCase#internalUserId}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="caf79e31-0cb0-49d5-af74-f652e9e61011"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="members.value eq &quot;${#TestCase#internalUserId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="4548ae8e-fd14-4d2b-8a68-056131aa3e6f"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>internalGroupId</con:name><con:value>088c228c-8e39-4b6a-87a5-4a54daba957a</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_5Lolg</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_5Lolg</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_5Lolg</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_5Lolg</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/v1/users</con:value></con:property><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>b9aaa5b9-4f75-4fb3-89e6-33053c425be7</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property></con:properties></con:testCase><con:testCase id="769e8ec2-6efb-467c-afd5-75473b15655b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_19-To verify response for attribute &quot;id&quot; with operators (ne,co,sw,ew)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4ea76060-2040-4a35-ab10-a9c37dbe53f7"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJMNElGRHdPVWM5UWUyVGtJZ1E2QkpBd0o3akh3YW9sSzYwV1l4VGpmVml1Wld0R1QzWEI3NjRMZDd2eTAxQjdyWVZmaWZqT0pqRlBwME4wd2I1cGpna3A3SmRRMzZkNXVHZU5CREx1eWtVOURSTUNaV1d1TElGcWQwcTRSdUVTeHZPM1pCclFZM20yUjF2SUhRd2Q3eHFFOTlXbzVlODhJcXZvR2RhRkd5VHY1ZVJzMkNEOG9rLzdJRUxjS002M0EiLCJleHAiOjE3MzYwNzE1MzcsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.dtSj-YPvkbbRWTf1kiLFLc9KXc6xR_BwjJ-h4loZ0bE</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="6000373b-fe32-4dd9-a3f6-0aa0607a051c"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="316676c5-f8d9-4f54-a4b1-1f19cdae0749"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="32ab2f23-bd07-4119-9b45-07f7a131be02"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="id sw &quot;${#TestCase#internalGroupId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="affd1c23-0fea-4074-8017-631cbae2d263"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>d72cb031-6848-4324-b0c8-948269faf845</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Q4vAn</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Q4vAn</con:value></con:property></con:properties></con:testCase><con:testCase id="0b625f58-b219-43ea-a9bd-fbf1a1418927" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_20-To verify response for attribute &quot;members&quot; with operators (ne,co,sw,ew)" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="3b3f1e58-6e90-43c0-85cd-ffea32895ced"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJqL01YRE56aVpCUDFtTm9XdHJFNWVCdTRnbFp3Q0R0N01XUGhyVmV2QTlLWkF4Vlo0Q2Zqc1E0UldyNU9EMjVySEFSWHlmZ3BESWJCdUMwdHJEZm1NV3BzVjdvVTNRYS81WDdRL2ltNEJpbVBsY1huSkZHTHZWT1Y5WTlXdWpBczEzendIcVllT29OQ3pJRkRnNnlXYWRHREsrK21rUFJpTTJpbHpqTkJZZFZFeXVqNFQraVU5dUg3Qjh5cEtNdjkiLCJleHAiOjE3MzYwNzE1NDEsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.r5nwxbq6Aw4S5Kh_4cm9W3a1p88dq0y5Gf-50dwdq34</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="01fd5393-6f7a-45d4-95d6-44be689427e1"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)


// SCIM Create User Data
tC.setPropertyValue("userExtId", "extId_"+randomGen)
tC.setPropertyValue("userName", "scim_"+randomGen)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_USER" id="0e392ac1-6e10-4c6d-878d-af460594830d"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#USER_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_USER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "externalId": "${#TestCase#userExtId}", 
        "userName": "${#TestCase#userName}",
        "active": 1,
    "emails": [{
            "primary": true,
            "value": "automation@condecosoftware.com"
        }
        ],
    "phoneNumbers": [
        {
            
            "value": "991017789"
        }],  
    "name": {
            "familyName": "USER",
            "givenName": "SCIM"
        },
    "preferredLanguage": "nl-NL",
    "addresses": [
        {
            "type": "work",
            "country": "India",
            "locality": "Delhi",
            "primary": true
        }
    ],
    "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User": {
        "department": "IT",
        "costCenter": "123456"
    }    
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="12bd3d57-262b-40f3-96e8-1bd129278422" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
def ActualExternalUserId = jsonObject.externalId
def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
assert ActualExternalUserId == ExpectedUsersId

//Verify the Department for User
//def ActualDepartment = jsonObject.User.department
//def ExpectedDepartment = context.testCase.getPropertyValue("department")
//assert ActualDepartment == ExpectedDepartment
//log.info ActualDepartment
//
////Verify the costCenter for User
//def ActualcostCenter = jsonObject.User.costCenter
//def ExpectedcostCenter = context.testCase.getPropertyValue("costCenter")
//assert ActualcostCenter == ExpectedcostCenter

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalUserId", jsonObject.id.toString())
context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "User"

// Verify userName not null
def uName = jsonObject.userName
assert uName != null

// Verify First/Last name not null
def fName = jsonObject.name.givenName
def lName = jsonObject.name.familyName
assert fName != null
assert lName != null

// Verify Country,Location not null
def country = jsonObject.addresses.country
def locality = jsonObject.addresses.locality
assert country != null
assert locality != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="93973d8d-86b3-46c2-8a3b-3757b784c2ea"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   ,
    "members": [
        {
            "value":"${#TestCase#internalUserId}"
        }
    ]
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_FILTER" id="d77c0ae6-e303-4411-b5a1-65a14fc9b929"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET_BY_FILTER" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_FILTER" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {
        "schemas": [
            "urn:ietf:params:scim:schemas:core:2.0:Users"
        ],
        "externalId": "ext_APIM_170", 
        "userName": "SCIMApimUser170",
        "active": 1,
        "emails": [{
            "primary": false,
            "value": "email@example.com"
        },
        {
            "primary": true,
            "value": "john@s.co.in"
        }],
        
        "name": {
            "familyName": "_familyName",
            "givenName": "_givenName"
        }
    }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="78430a17-a7ec-468f-97b4-9de0d1b22039" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="members.value co &quot;${#TestCase#internalUserId}&quot;"/>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry><con:entry>startIndex</con:entry><con:entry>count</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="cf524bb0-4ed5-4dbf-b4ca-ca8be6f0aa9c"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>memberId</con:name><con:value>4055</con:value></con:property><con:property><con:name>userExtId</con:name><con:value>extId_RWty3</con:value></con:property><con:property><con:name>userName</con:name><con:value>scim_RWty3</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_RWty3</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_RWty3</con:value></con:property><con:property><con:name>USER_RESOURCE</con:name><con:value>api/V1/users</con:value></con:property><con:property><con:name>internalUserId</con:name><con:value>ead17a3e-5f8c-4b83-abbb-2ad24671c059</con:value></con:property><con:property><con:name>email</con:name><con:value>automation@condecosoftware.com</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>8ad35a61-0345-4be5-bca6-37e631c17981</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="53acf563-2ded-4fa7-8fc5-f0f26aa7f09d" name="GetAllSCIMGroups Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="89658529-2041-47f9-8978-ed6ccb02ced8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_IN-7205-To Verify GetAll Groups (active only) exist in System" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="4eb274fb-9122-4334-a83b-4932af3410a3"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ5c0FlMWZ6TlVkY1EvbzdUZ1E0V3dPdVJITmY4enJGYTRrVmNxSkhYbHBMMUlBaVRhNWJhZVZKeStHbDRqb2o5QURoYWg3TmZIcmkrc21oVWhMTmdnRTNTU0c0c2Q5T21WMnFFRml3UThJemI0bkxMV05pd1ZRa3ZYME4vUW5HcTRRbXRFQ1hNeGdiZXQ0ZFJpMmFrZmdPbCtnMHlRVnRNYVNBcjQ2SGNQbTEranhOZXg5MWpWR2tOWTQ1SFRhNXEiLCJleHAiOjE3MzYwNzE1NjYsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.l5w0ei8tNMYx7zNiemR-e4vkzo4jdjSLxTmim3yG-Eg</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="GET_ALL_GROUPS" id="a45ec05e-829c-42d1-8795-fb42b1a90adc"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_ALL_GROUPS" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>    {         "schemas": [             "urn:ietf:params:scim:schemas:core:2.0:Users"         ],         "externalId": "ext_APIM_170",          "userName": "SCIMApimUser170",         "active": 1,         "emails": [{             "primary": false,             "value": "email@example.com"         },         {             "primary": true,             "value": "john@s.co.in"         }],                  "name": {             "familyName": "_familyName",             "givenName": "_givenName"         }     }</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

// Verify displayName not null
def dName = jsonObject.Resources.displayName[0]
assert dName != null
assert dName != " "

// Verify externalId not null
def extId = jsonObject.Resources.externalId[0]
assert extId != null
assert extId != " "

//def dName = context.testCase.getPropertyValue("displayName")
//def gName = context.testCase.getPropertyValue("firstName")
//def fName = context.testCase.getPropertyValue("lastName")
//def tel = context.testCase.getPropertyValue("telephone")
//def mobile = context.testCase.getPropertyValue("mobile")
//def email = context.testCase.getPropertyValue("email")
//def accountActive = context.testCase.getPropertyValue("accountActive")    
def GroupArrayLength = jsonObject.Resources.size()
log.info GroupArrayLength
List<String> list = new ArrayList<String>()
List<String> list1 = new ArrayList<String>()
//List<String> list2 = new ArrayList<String>();
//List<String> list3 = new ArrayList<String>();
//List<String> list4 = new ArrayList<String>();
//List<String> list5 = new ArrayList<String>();
//List<String> list6 = new ArrayList<String>();
for (int i=0;i<GroupArrayLength;i++){
    
    list.add(jsonObject.Resources[i].displayName)
    list1.add(jsonObject.Resources[i].externalId)
//    list2.add(jsonObject.Resources[i].name.familyName)    
//    list3.add(jsonObject.Resources[i].active.toString())
//    list4.add(jsonObject.Resources[i].emails[i].value.toString())
//    list5.add(jsonObject.Resources[i].phoneNumbers[i].value.toString())
    //log.info list5[i]
    if(list[i]==dName || list1[i]==extId ){
        log.info "Input query filter is found"
        break
    }
    else{
        log.error "input query filter not found"
    }
}

//Verify the User Metadata
def resourceType = jsonObject.Resources.meta.resourceType
def userLocation = jsonObject.Resources.meta.location
assert resourceType[0] == "Group"

 
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ValidStatusCode")

 
def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]

 
if(HttpCode[0].toString().equals(extStatusCode))
{
      log.info "Status Code verified successfully, Assertion [PASS]"
      
}else{
    log.error ("Actual & Expected Status Code Mismatched, Assertion [FAIL]")
    assert HttpCode[0].equals(extStatusCode) : ("Actual & Expected Status Code Mismatched, Assertion [FAIL]" )
}


//Verify The Internal ID is not equal to null
def ActualId = jsonObject.Resources.id[0]
assert ActualId != null]]></scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="startIndex" value=""/>
  <con:entry key="startindex" value="1"/>
  <con:entry key="count" value="100"/>
  <con:entry key="accept" value=""/>
</con:parameters><con:parameterOrder><con:entry>count</con:entry><con:entry>startindex</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d419d32a-b630-4464-8671-0f8f0c018611"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="5008ac78-6bff-41cd-98a9-ab573bf2d94f" name="DeleteSCIMGroup TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="16f0c023-7efe-4a4d-b21f-d13181111b28" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_01-To verify that correct response is shown when Group is deleted" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c437d75b-9fc5-4eda-a134-9e6e745ea5e1"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJXa0NDdkpRQnkvWEMrS2Fvby9qdWM5ZXdGN3pwUnhSL3pubVFwZ3B3Q0t5NVlZdGdybllCQ0RtbjZmZ3RkK3NlWXhjRmkxMlNSVFMvV1RXQ3NHdU4zZ1NDMjRLSXhvK3ZWV1gyZ1hGeTBrQ1RUQ1VVR3Z2Nzl1ZUZIeFY1b2FPSC9udWZaMmpGdGZSQXhER1hmTnFoWEorZklKcE0yREJzU2k5Nld2c0poVG5yNXNoaWlSRVdnT3llNHJJeGF0WGIiLCJleHAiOjE3MzYwNzMxNzksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.2CI6XvzHf3p9dWDvOpz_QwfWSE8AuM3B_O8fg3a5i2k</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="4328f68f-e2db-447b-a1f8-5666f4dca279"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="fa05ff55-33d6-4c5b-8c8d-6c639caec367"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="c09ce73c-57d0-4e18-94ed-38ee50134db7"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d0d83e34-109e-410f-9b43-6e3bce71d8fa" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="16af05a2-2257-476e-b35d-0a03c29b51d3"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>66027fa9-24bf-4d0d-858f-ba3e0b6530bc</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_XPw3M</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_XPw3M</con:value></con:property></con:properties></con:testCase><con:testCase id="93ed13ef-0608-457d-aaed-4bf7138e1e9f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_02-To verify response on deleting a deleted Group" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="92df11b6-8e0b-4d1c-b72c-e6c139f576ca"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJ6TFhLMmhCZ2taZUIxWWF6cGs4YjduQ1RjTkxGc0dBSElrcjJjMVZrczRrby95bE8zSWpxMWUzT04xbUZ2b2RTclBvRjEwRmJzOGNNL0VKTzJOUDEvbXdKS2syUHRJZi9xRTJmT2t1aHFpZzVmL3JnMjB4RlVoYkJIMDA2Z1BnV213K0hrcStWUlhpZ0JBWGxyNFoybnd2ZWZZY0FvcXVheTI5ak5FRjNGYSt6OFNDalNtTENMQXQwblY3KzNweDMiLCJleHAiOjE3MzYwNzMxODQsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.DsH_dtmS88NrDik8f_Dl2Ps073ylOyiV3xkt1A-NUzw</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="c95bf771-7c62-43cd-8d77-f40608f3c0d7"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="40faea1b-3be5-4038-a75c-819f545bb122"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="4edb06e6-042e-46fe-a046-a335b749fe6a"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP1" id="d12d2e1b-47f7-4819-af17-df20eac33b6b"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP1" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="d25d1a29-22aa-4219-8252-b68ce6ebfead"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>a41f08a1-3867-4ce7-b6a9-5bfc5587043e</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_Eqt25</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_Eqt25</con:value></con:property></con:properties></con:testCase><con:testCase id="ae8686a7-4a27-41b9-babf-7e46ba8471ee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_03-To Verify that deleted group is not shown when we fetch group through GET endpoint" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="dfc2e83d-8c9c-4d59-82f7-c6b3b4487b58"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJSL01WR2xRRHNHaWh1KzVGMTdQZXhpNkdLM1NSVzhHSWRLME01aEFwT0hNanEwZTBvNEFKb0lLRnRBc09OcFdzT2tPVUs1K2VYQW10SjBlNUJSMFBqdUdMUys0bkh1UEExZHNwOWhoa3BQMm1WUDk1a25DaXhGYm9vRmtEaVM4KzFWdXh2dWx5bjQ2MitIODdMOVZ3QlNPYlBMWi9QMndmQkZsYTlncjhYT0h3OFRmWTRJaW5XeFh6eXZyaTRMWisiLCJleHAiOjE3MzYwNzMxODksImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.aPIQrjTDt300Bz6q7VK7m35-Knc5gqyV3ojAUOse4O4</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="b0b99f36-8ab0-4bb6-844a-1534eb913db5"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CREATE_GROUP" id="b734717b-94e1-41be-9a0d-d07b211ff044"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CREATE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}",
    "meta": {
        "resourceType": "Group"
    }   
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="fe133096-6a0c-4ab8-a961-1c1ac306d46b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)

//Verify the ExternalId for Group
def ActualExternalGroupId = jsonObject.externalId
def ExpectedGroupId = context.testCase.getPropertyValue("groupExtId")
assert ActualExternalGroupId == ExpectedGroupId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())


//Verify the Group Metadata
def resourceType = jsonObject.meta.resourceType
def userLocation = jsonObject.meta.location
assert resourceType == "Group"

// Verify displayName not null
def gName = jsonObject.displayName
assert gName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]
assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
def ActualId = jsonObject.id
assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="4317e9cb-c083-4387-8a80-bc281f75e049"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_GROUP_BY_ID" id="2bdd2a90-66af-4048-9dc3-89bc2620df85"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="GET_BY_ID" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_GROUP_BY_ID" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="162f0429-0310-498b-bfcd-58d7c9183229" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)


def Res = messageExchange.getResponseContent()
def resultResponse = context.expand('')
log.info resultResponse

//Verify the User Metadata
def scimType = jsonObject.scimType
def status = jsonObject.status
assert scimType == "null"
assert status == 404

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Not Blank"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Verify the Status Code

def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFoundURL")
//def TC_PROP = context.testCase.testSuite.project.testSuites["Utility"].testCases["StatusCodes"]
//
//def extStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NotFound")

def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Not Found is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(ExpectedStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="Authorization" value="Bearer ${GenerateToken#token}"/>
  <con:entry key="id" value="${#TestCase#internalGroupId}"/>
</con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="1cfca54c-6aae-4a61-92ef-a2589e798d24"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>f7c8fd31-e508-4ecb-a4aa-1246cc019b79</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_LO5Kf</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_LO5Kf</con:value></con:property></con:properties></con:testCase><con:testCase id="0fdb4068-52e9-4948-9c0b-f88adc9514cb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_04-Delete Group | Verify that user is able to delete group containing '&amp;' character in display name" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="GenerateToken" id="c80579d5-ef2c-4d67-b27e-52ca55cfa63d"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>ae8d8e45-016f-4a11-b8f7-f69e81b0b2a7</con:targetTestCase><con:properties><con:property><con:name>TOKEN</con:name><con:value>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YS1jMzVjLTQxYWEtOWI2Ny00MjdiNjA5YjIxYmEiLCJzZWNyZXQiOiJkMzhYN3JlbUtyOGptTTFGc3l4SlBEM0xLMit2U2s1ajBFY0ptVVNMSmtXSjhWSnZvSjB2T1MwaHo4My92YmxyNlpSNGp5OGNOM09LQ1djczFDMEI2UHNFVzVMaHpsYXR2TmN6S3d5ZHVTbmEvQWpIQjBUVVQzS1dRN1M0bkdScCtGNmtWN1VJeitZVzVKTXg3bHZXUFg0YW5yMkNhOGJWV0FGazVaeFM3VnQyQjdDaFZxU1ltUVlWRHNVZ1dKaWsiLCJleHAiOjE3MzYwNzMxOTMsImlzcyI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQiLCJhdWQiOiJodHRwczovL2VwdHVyYXNjaW1tYWludGVuYW5jZXFhZWFzdHVzLmF6dXJld2Vic2l0ZXMubmV0In0.1T_YByeBQVwjtYEQz9h1RPqeyULZFiUnlfA3fG51rOc</con:value></con:property><con:property><con:name>accesstoken</con:name></con:property></con:properties><con:returnProperties><con:entry>token</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="DRIVER_SCRIPT" id="94906add-3b65-4a1e-abd3-382c504cf0fc"><con:settings/><con:config><script>import org.apache.commons.lang.RandomStringUtils;
def tC = testRunner.testCase
def randomGen =RandomStringUtils.randomAlphanumeric(5)

// SCIM Create Group Data
tC.setPropertyValue("groupExtId", "extId_"+randomGen)
tC.setPropertyValue("groupName", "scimGroup_"+randomGen)
</script></con:config></con:testStep><con:testStep type="restrequest" name="CreateGroup" id="5167d104-f823-4513-90a6-25a26c43fd80"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="CreateGroup" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request>{
    "schemas": [
        "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
    "externalId": "${#TestCase#groupExtId}",
    "displayName": "${#TestCase#groupName}"
}</con:request><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="90c9a4ae-d5cd-4066-97eb-0b497234329b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def JsonResponse = messageExchange.response.responseContent
def jsonObject = new JsonSlurper().parseText(JsonResponse)

def JsonRequest = messageExchange.getRequestContent()
def jsonReqObject = new JsonSlurper().parseText(JsonRequest)
log.info jsonReqObject

//Verify the ExternalId for User
//def ActualExternalUserId = jsonObject.externalId
//def ExpectedUsersId = context.testCase.getPropertyValue("userExtId")
//assert ActualExternalUserId == ExpectedUsersId

//context.testCase.setPropertyValue("userExtId", ExpectedUsersId)
context.testCase.setPropertyValue("internalGroupId", jsonObject.id.toString())
//context.testCase.setPropertyValue("email", jsonObject.emails[0].value)

//Verify the User Metadata
//def resourceType = jsonObject.meta.resourceType
//def userLocation = jsonObject.meta.location
//assert resourceType == "User"

// Verify userName not null
//def uName = jsonObject.userName
//assert uName != null

// Verify department is null
//def department = jsonObject.enterprise.User
//assert department = null


// Verify First/Last name not null
//def fName = jsonObject.name.givenName
//def lName = jsonObject.name.familyName
//assert fName != null
//assert lName != null

// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("ResourceCreated")

//def ResponseHeaders = messageExchange.getResponseHeaders()
//def HttpCode = ResponseHeaders["#status#"]
//assert HttpCode[0].equals(ExpectedStatusCode)

//Verify The Internal ID is not equal to null
//def ActualId = jsonObject.id
//assert ActualId != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DELETE_GROUP" id="4fecc8bf-86b5-49aa-b954-0df240a351b1"><con:settings/><con:config service="https://epturascimqaapieastus.azurewebsites.net" resourcePath="/${#TestCase#GROUP_RESOURCE}/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE_GROUP" id="5bfb9721-2d03-4ea2-8a80-448070fcbf57" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>${#Project#customDomainURI}</con:endpoint><con:request/><con:originalUri>https://scimqa.condecodev.com/scim/api/V1/users</con:originalUri><con:assertion type="GroovyScriptAssertion" id="8026141f-b236-4d6a-bc46-e39028224243" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper

//Parse Json Response
def Res = messageExchange.getResponseContent()
def resultResponse = context.expand( '')
log.info resultResponse

if(resultResponse == ''){
	log.info "[STEP - DELETE_GROUP] - INFO : Results Response is Blank on deleting any group"
		
}else{
	
	log.error "[STEP - DELETE_GROUP] - ERROR : DELETE_GROUP Response has value, Assertion [FAIL]"
	assert  resultResponse != '' : "[STEP - DELETE_GROUP] - ERROR : Results is not Blank , Assertion [FAIL]"
}

// Assert Blank Response 
assert messageExchange.hasResponse() == false, "No any content returned in Response"

//// Verify the Status Code
def TC_PROP = context.testCase.testSuite.project.testSuites["UTILITY"].testCases["STATUS_CODES"]
def ExpectedStatusCode = TC_PROP.getTestStepByName("Properties").getPropertyValue("NoContent")


def ResponseHeaders = messageExchange.getResponseHeaders()
def HttpCode = ResponseHeaders["#status#"]


if(HttpCode[0].toString().equals(ExpectedStatusCode))
{
	  log.info "[STEP - DELETE_GROUP] - INFO : Group Deletion is verified successfully, Assertion [PASS]"
	  
}else{
	log.error ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]")
	assert HttpCode[0].equals(extStatusCode) : ("[STEP - DELETE_GROUP] - ERROR : Actual &amp; Expected Status Code Mismatched, Assertion [FAIL]" )
}


//2. Assert Blank Response
//def JsonResponse = messageExchange.response.responseContent
//def jsonSlurper = new JsonSlurper().parseText(JsonResponse)

</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="Authorization" value="Bearer ${GenerateToken#token}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry><con:entry>Authorization</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="END" id="ce9b23d1-3d8c-472d-b180-f1a360c160af"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:setupScript>tC = testRunner.testCase
def TC_PROP = testRunner.testCase.testSuite.project.testSuites["UTILITY"].testCases["MANAGE_SCIM_RESOURCES"]
def testStep = TC_PROP.getTestStepByName("SCIM RESOURCES")

 tC.setPropertyValue("GROUP_RESOURCE", testStep.getPropertyValue("GROUP_RESOURCE"))</con:setupScript><con:properties><con:property><con:name>GROUP_RESOURCE</con:name><con:value>api/V1/groups</con:value></con:property><con:property><con:name>internalGroupId</con:name><con:value>5d6930fe-a331-41e2-b650-129186c17a07</con:value></con:property><con:property><con:name>groupExtId</con:name><con:value>extId_vGzH1</con:value></con:property><con:property><con:name>groupName</con:name><con:value>scimGroup_vGzH1</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="OVERRIDE">https://scimqa.condecodev.com</con:endpoint></con:endpointStrategy><con:properties><con:property><con:name>customDomainURI</con:name><con:value>https://epturascimqaapieastus.azurewebsites.net</con:value></con:property><con:property><con:name>tokenEndPoint</con:name><con:value>https://epturascimmaintenanceqa.azurewebsites.net</con:value></con:property><con:property><con:name>TenantId</con:name><con:value>0f2e6b6a-c35c-41aa-9b67-427b609b21ba</con:value></con:property><con:property><con:name>AuthSecret</con:name><con:value>MG9hYXg3OG81bDdmMXA2N3UxZDc6RHNlQlM4X19hTlBnX2hZMThYckYxQUN1ekRPWjFjT2tHTmJpV3NkVVFpWHo5Z1dxd0g1RWtVSXBidHZBQUNWUQ==</con:value></con:property><con:property><con:name>grant_type</con:name><con:value>client_credentials</con:value></con:property><con:property><con:name>scope</con:name><con:value>service</con:value></con:property><con:property><con:name>ACCESS_TOKEN</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZW5hbnRfaWQiOiIwZjJlNmI2YWMzNWM0MWFhOWI2NzQyN2I2MDliMjFiYSIsInNlY3JldCI6IkJBcXJpYmxZV3FtLzBGSEUyYmxoOU0ybEc2UThMRWpXQVpkdWMxZ1ZELzlPN29hVVNLTDRKeHk4a0tEWU93YkNUSDRoRUJ2UzVUTTJ5bGFEN1RubmJzemhOVmdJZFJUR1BBcEZOQnd0ZzBmNVJiSkVzMUo4Y0RlQk1vTlYxcEZhblVGelhBdENmN0JoR2NjRjNzSHFOWnpYZDh4am9pdm5xWmFncWNldjVjbHoyNmh6OE90VDYxU0V6SmVGL2VCVSIsImV4cCI6MTczNDc4NzUzOCwiaXNzIjoiaHR0cHM6Ly9lcHR1cmFzY2ltbWFpbnRlbmFuY2VxYWVhc3R1cy5henVyZXdlYnNpdGVzLm5ldCIsImF1ZCI6Imh0dHBzOi8vZXB0dXJhc2NpbW1haW50ZW5hbmNlcWFlYXN0dXMuYXp1cmV3ZWJzaXRlcy5uZXQifQ.vcV-nevZ8ijeYYB6NqG07H6yyzVJHyFRfeX8b2TACUE</con:value></con:property><con:property><con:name>Authorization</con:name><con:value>Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlQxU3QtZExUdnlXUmd4Ql82NzZ1OGtyWFMtSSJ9.eyJhdWQiOiI0YWU4ZmM2ZC1kNDJjLTQ0NzQtYjc0Ni1jN2FmNzYwMGNhMWMiLCJpc3MiOiJodHRwczovL2xvZ2luLm1pY3Jvc29mdG9ubGluZS5jb20vYWRiNDhjYWEtMGIxNC00MjU2LWIxNzgtYTVlNTA4YzgwN2Y1L3YyLjAiLCJpYXQiOjE3MDMxNjM1NDgsIm5iZiI6MTcwMzE2MzU0OCwiZXhwIjoxNzAzMTY3NDQ4LCJhaW8iOiJFMlZnWUpDcldDd1lmNHJqOGZuUWovTEZYeWF4YlBiY1ZDTVU5VXBTVkhqdFBSYStOMjhCIiwiYXpwIjoiNGFlOGZjNmQtZDQyYy00NDc0LWI3NDYtYzdhZjc2MDBjYTFjIiwiYXpwYWNyIjoiMSIsInJoIjoiMC5BUzhBcW95MHJSUUxWa0t4ZUtYbENNZ0g5VzM4NkVvczFIUkV0MGJIcjNZQXloeXdBQUEuIiwidGlkIjoiYWRiNDhjYWEtMGIxNC00MjU2LWIxNzgtYTVlNTA4YzgwN2Y1IiwidXRpIjoiYlNSMjl1QVB3RTZyVU5MRExQaUlBQSIsInZlciI6IjIuMCJ9.U2P4EQ_bG8R8WUAbhXIszWJBcj86S5biRasU2p5SH6RvzWLdWwJLhFqdDiOk25Og4hNH1zptiPeEUlxjbo18Gk43FVAGv0nGLjbN38DnovffWq5Cqr2Z_EcSoC7n-_r5weE_24QpmG0Kh1-mtlgJ3ydVqEswWjbQqHjwCp9Q56FxtYom8vhumzVg35ddOZC4i9coIXzieYB3eTnr0b34Jbe7JEK0sTSiyjs4P4kUT91SaYvsI9x4nSJ62eeD4ybj-W9oG2MwTZiLXkEir7kSDGxecSpMoEjRKtuR9wnRA1uuLHJvU_Bxc5hB1RQiKGilb6hkWkWkXCLD_1Pk6YaVvg</con:value></con:property><con:property><con:name>getattributecode</con:name><con:value>9S15Bn7QjT8oOtx4vS_vT_7iVMVo-N2JFUBEkMaqJaQ0AzFu5thoRA==</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>